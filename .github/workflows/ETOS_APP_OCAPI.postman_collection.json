{
	"info": {
		"_postman_id": "9cf06db5-240e-4d07-aa07-060c4d4c941c",
		"name": "ETOS_APP_OCAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12819193"
	},
	"item": [
		{
			"name": "CUSTOMER",
			"item": [
				{
					"name": "MY_ETOS_AUTH",
					"item": [
						{
							"name": "LOGIN_MYETOS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {",
											"    var res = pm.response.json();",
											"    pm.environment.set('LOGIN_JWT', res['token_type'] + ' ' + res['access_token']);",
											"    pm.environment.set('LOGIN_REFRESH_JWT', res['refresh_token']);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{LOGIN_SERVICE_CLIENT_ID}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{LOGIN_SERVICE_CLIENT_SECRET}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{CUSTOMER_EMAIL}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{CUSTOMER_PASSWORD}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://beta-api.ah.nl/secure/oauth/token",
									"protocol": "https",
									"host": [
										"beta-api",
										"ah",
										"nl"
									],
									"path": [
										"secure",
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "REFRESH_TOKEN_MYETOS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {",
											"    var res = pm.response.json();",
											"    pm.environment.set('LOGIN_JWT', res['token_type'] + ' ' + res['access_token']);",
											"    pm.environment.set('LOGIN_REFRESH_JWT', res['refresh_token']);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{LOGIN_SERVICE_CLIENT_ID}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{LOGIN_SERVICE_CLIENT_SECRET}}",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{LOGIN_REFRESH_JWT}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://beta-api.ah.nl/secure/oauth/token",
									"protocol": "https",
									"host": [
										"beta-api",
										"ah",
										"nl"
									],
									"path": [
										"secure",
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_EXTERNAL_CUSTOMER_ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {\r",
											"    var res = pm.response.json();\r",
											"    pm.environment.set('CUSTOMER_EMDA_ID', res.id);\r",
											"    pm.environment.set('CUSTOMER_EMAIL', res.emailAddress);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{LOGIN_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://beta-api.ah.nl/member-service/v1/members",
									"protocol": "https",
									"host": [
										"beta-api",
										"ah",
										"nl"
									],
									"path": [
										"member-service",
										"v1",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "LOGOUT_MYETOS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {",
											"    pm.environment.set('LOGIN_JWT', '');",
											"    pm.environment.set('LOGIN_REFRESH_JWT', '');",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{LOGIN_SERVICE_CLIENT_ID}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{LOGIN_SERVICE_CLIENT_SECRET}}",
											"type": "text"
										},
										{
											"key": "access_token",
											"value": "{{LOGIN_JWT}}",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{LOGIN_REFRESH_JWT}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://beta-api.ah.nl/secure/logout",
									"protocol": "https",
									"host": [
										"beta-api",
										"ah",
										"nl"
									],
									"path": [
										"secure",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "SFCC_AUTH",
					"item": [
						{
							"name": "GET_TOKEN_SFCC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {",
											"    var res = pm.response.json();",
											"    pm.environment.set('BM_ACCESS_JWT', res['token_type'] + ' ' + res['access_token']);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{CLIENT_SECRET}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{CLIENT_ID}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://account.demandware.com/dw/oauth2/access_token",
									"protocol": "https",
									"host": [
										"account",
										"demandware",
										"com"
									],
									"path": [
										"dw",
										"oauth2",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "LOGIN_SFCC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {",
											"    var res = pm.response.json();",
											"    pm.environment.set(\"JWT_TOKEN\", postman.getResponseHeader(\"Authorization\"));",
											"    pm.environment.set('CUSTOMER_NO', res['customer_no']);",
											"    pm.environment.set('CUSTOMER_ID', res['customer_id']);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{BM_ACCESS_JWT}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{CUSTOMER_EMDA_ID}}\",\n    \"client_id\": \"{{CLIENT_ID}}\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/s/{{SITE}}/dw/shop/{{OCAPI_VERSION}}/customers/auth/trustedsystem",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"s",
										"{{SITE}}",
										"dw",
										"shop",
										"{{OCAPI_VERSION}}",
										"customers",
										"auth",
										"trustedsystem"
									]
								}
							},
							"response": []
						},
						{
							"name": "LOGOUT_SFCC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200 || pm.response.code === 204) {",
											"    pm.environment.set(\"JWT_TOKEN\", '');",
											"    // clear cookies",
											"    const jar = pm.cookies.jar();",
											"    if (jar) {",
											"        jar.clear(pm.request.url, function (error) {",
											"            console.log(error);",
											"        });",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{JWT_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/s/{{SITE}}/dw/shop/{{OCAPI_VERSION}}/customers/auth",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"s",
										"{{SITE}}",
										"dw",
										"shop",
										"{{OCAPI_VERSION}}",
										"customers",
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_JWT_guest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"JWT_TOKEN\", postman.getResponseHeader(\"Authorization\"));\r",
											"console.log(postman.getResponseHeader(\"Authorization\"))"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-dw-client-id",
										"value": "{{CLIENT_ID}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"type\": \"guest\"\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/customers/auth",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"s",
										"Sites-{{SITE}}-Site",
										"dw",
										"shop",
										"{{OCAPI_VERSION}}",
										"customers",
										"auth"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "SESSION_BRIDGE",
					"item": [
						{
							"name": "JWT_TO_SESSION",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200 || pm.response.code === 204) {\r",
											"    var res = pm.response;\r",
											"    console.log(res)\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{JWT_TOKEN}}",
										"type": "text"
									},
									{
										"key": "x-dw-client-id",
										"value": "{{CLIENT_ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST}}/s/{{SITE}}/dw/shop/{{OCAPI_VERSION}}/sessions",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"s",
										"{{SITE}}",
										"dw",
										"shop",
										"{{OCAPI_VERSION}}",
										"sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "SESSION_TO_JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {\r",
											"    var res = pm.response.json();\r",
											"    pm.environment.set(\"JWT_TOKEN\", postman.getResponseHeader(\"Authorization\"));\r",
											"    pm.environment.set('CUSTOMER_ID', res['customer_id']);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "x-dw-client-id",
										"value": "{{CLIENT_ID}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"type\": \"session\"\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/customers/auth",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"s",
										"Sites-{{SITE}}-Site",
										"dw",
										"shop",
										"{{OCAPI_VERSION}}",
										"customers",
										"auth"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET_CUSTOMER",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/customers/{{CUSTOMER_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"customers",
								"{{CUSTOMER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE_CUSTOMER",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"phone_mobile\": \"+31205643128\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/customers/{{CUSTOMER_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"customers",
								"{{CUSTOMER_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CATEGORIES",
			"item": [
				{
					"name": "GET_CATEGORY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "{{REQ_ORIGIN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/categories/{{CATEGORY_ID_1}}?levels={{CATEGORY_NESTED_LEVEL}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"categories",
								"{{CATEGORY_ID_1}}"
							],
							"query": [
								{
									"key": "levels",
									"value": "{{CATEGORY_NESTED_LEVEL}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_CATEGORIES",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "{{REQ_ORIGIN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/categories/({{CATEGORY_ID_1}},{{CATEGORY_ID_2}},{{CATEGORY_ID_3}})?levels={{CATEGORY_NESTED_LEVEL}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"categories",
								"({{CATEGORY_ID_1}},{{CATEGORY_ID_2}},{{CATEGORY_ID_3}})"
							],
							"query": [
								{
									"key": "levels",
									"value": "{{CATEGORY_NESTED_LEVEL}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PRODUCTS",
			"item": [
				{
					"name": "GET_PRODUCT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Product ID is correct', () => {",
									"    const responseJson = pm.response.json();",
									"    const variationProductId = pm.environment.get('PRODUCT_ID');",
									"    pm.expect(responseJson.id).to.eql(variationProductId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "{{REQ_ORIGIN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"products",
								"{{PRODUCT_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_PRODUCTS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "{{REQ_ORIGIN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/({{PRODUCT_ID_1}},{{PRODUCT_ID_2}},{{PRODUCT_ID_3}})",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"products",
								"({{PRODUCT_ID_1}},{{PRODUCT_ID_2}},{{PRODUCT_ID_3}})"
							]
						}
					},
					"response": []
				},
				{
					"name": "SEARCH_PRODUCTS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('\"count\" attribute is not equal to 0', () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.count).to.not.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "{{REQ_ORIGIN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/product_search?q={{PRODUCTS_SEARCH_QUERY}}&refine_1={{REFINE1}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"product_search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{PRODUCTS_SEARCH_QUERY}}"
								},
								{
									"key": "refine_1",
									"value": "{{REFINE1}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "BASKET",
			"item": [
				{
					"name": "CREATE_BASKET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200 || pm.response.code === 201) {\r",
									"    pm.environment.set('BASKET_ID', jsonData.basket_id);\r",
									"}\r",
									"\r",
									"if (pm.response.code === 400 && jsonData.fault && jsonData.fault.arguments.basketIds) {\r",
									"    pm.environment.set('BASKET_ID', jsonData.fault.arguments.basketIds);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"baskets"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_EXISTING_BASKET",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "{{REQ_ORIGIN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"baskets",
								"{{BASKET_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "REMOVE_BASKET",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"baskets",
								"{{BASKET_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD_PRODUCT_ITEM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200 || pm.response.code === 201) {\r",
									"    const item_id = jsonData.product_items \r",
									"        && jsonData.product_items.length\r",
									"        && jsonData.product_items[0].item_id;\r",
									"\r",
									"    if (item_id) {\r",
									"        pm.environment.set('ITEM_ID', item_id);\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							},
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\r\n    \"product_id\" : \"{{PRODUCT_ID}}\",\r\n    \"quantity\" : 1.00\r\n}]"
						},
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/items",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"baskets",
								"{{BASKET_ID}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE_PRODUCT_ITEM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							},
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"product_id\" : \"{{PRODUCT_ID}}\",\r\n  \"quantity\" : 3.00\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/items/{{ITEM_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"baskets",
								"{{BASKET_ID}}",
								"items",
								"{{ITEM_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "REMOVE_PRODUCT_ITEM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							},
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "{{REQ_ORIGIN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/items/{{ITEM_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"baskets",
								"{{BASKET_ID}}",
								"items",
								"{{ITEM_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD_SHIPMENT_BILLING",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							},
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"shipping_method\":\r\n  {\r\n    \"id\":\"standard\"\r\n  },\r\n  \"shipping_address\" :\r\n  {\r\n    \"first_name\":\"Oleg\",\r\n    \"last_name\":\"Oleg\",\r\n    \"address1\": \"Test\",\r\n    \"city\":\"Utrecht\",\r\n    \"postal_code\": \"3553BH\",\r\n    \"country_code\":\"NL\",\r\n    \"phone\": \"+31206400000\",\r\n    \"c_houseNr\": \"14\",\r\n    \"c_houseNrAdditional\": \"A\"\r\n   },\r\n  \"c_email\": \"{{CUSTOMER_EMAIL}}\"\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/shipments/me",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"baskets",
								"{{BASKET_ID}}",
								"shipments",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD_PAYMENT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							},
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"amount\": 30,\r\n  \"payment_method_id\" : \"Adyen\",\r\n  \"c_selected_issuer_id\" : \"1121_ideal\"\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/payment_instruments",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"baskets",
								"{{BASKET_ID}}",
								"payment_instruments"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD_SHIPMENT_BILLING_LONGTAIL",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "default"
							},
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "default"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"shipping_method\":\r\n  {\r\n    \"id\":\"longtail-pickup-in-store\"\r\n  },\r\n  \"shipping_address\" :\r\n  {\r\n    \"first_name\":\"Oleg\",\r\n    \"last_name\":\"Oleg\",\r\n    \"address1\": \"Test\",\r\n    \"city\":\"Utrecht\",\r\n    \"postal_code\": \"3553BH\",\r\n    \"country_code\":\"NL\",\r\n    \"phone\": \"+31206400000\",\r\n    \"c_houseNr\": \"14\",\r\n    \"c_houseNrAdditional\": \"A\"\r\n   },\r\n  \"c_email\": \"{{CUSTOMER_EMAIL}}\"\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/shipments/me",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"baskets",
								"{{BASKET_ID}}",
								"shipments",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD_PAYMENT_LONGTAIL",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "default"
							},
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "default"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"amount\": 30,\r\n  \"payment_method_id\" : \"FRAINV\"\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/payment_instruments",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"baskets",
								"{{BASKET_ID}}",
								"payment_instruments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ORDER",
			"item": [
				{
					"name": "CREATE_ORDER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200 || pm.response.code === 201) {\r",
									"    const order_no = jsonData.order_no;\r",
									"\r",
									"    if (order_no) {\r",
									"        pm.environment.set('ORDER_NO', order_no);\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test('Response object should have c_source property', () => {\r",
									"    pm.expect(jsonData).to.have.nested.property('c_source');\r",
									"});\r",
									"\r",
									"pm.test('c_source property of response should be equal \"appOCAPI\" or \"ocapiLongtail\"', () => {\r",
									"    const isLongtail = !!jsonData.c_isLongtailOrder;\r",
									"    const source = isLongtail ? 'ocapiLongtail' : 'appOCAPI';\r",
									"    pm.expect(jsonData.c_source).to.equal(source);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							},
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"basket_id\": \"{{BASKET_ID}}\"\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/orders",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_ORDER",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							},
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/orders/{{ORDER_NO}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"orders",
								"{{ORDER_NO}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_CUSTOMER_ORDERS",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/customers/{{CUSTOMER_ID}}/orders?start={{ORDER_START}}&count={{ORDER_COUNT}}&from={{ORDER_FROM}}&until={{ORDER_UNTIL}}&status={{ORDER_STATUS}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"customers",
								"{{CUSTOMER_ID}}",
								"orders"
							],
							"query": [
								{
									"key": "start",
									"value": "{{ORDER_START}}"
								},
								{
									"key": "count",
									"value": "{{ORDER_COUNT}}"
								},
								{
									"key": "from",
									"value": "{{ORDER_FROM}}"
								},
								{
									"key": "until",
									"value": "{{ORDER_UNTIL}}"
								},
								{
									"key": "status",
									"value": "{{ORDER_STATUS}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TESTS",
			"item": [
				{
					"name": "TEST_SCENARIOS",
					"item": [
						{
							"name": "LOGIN_AND_LOGOUT",
							"item": [
								{
									"name": "LOGIN_MYETOS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    var respJson = pm.response.json();",
													"    pm.environment.set('LOGIN_JWT', respJson['token_type'] + ' ' + respJson['access_token']);",
													"    pm.environment.set('LOGIN_REFRESH_JWT', respJson['refresh_token']);",
													"};",
													"",
													"pm.test(\"'access_token' attribute exist\", () => {",
													"    pm.expect(respJson.access_token).exist;",
													"});",
													"",
													"pm.test(\"'token_type' attribute exist\", () => {",
													"    pm.expect(respJson.token_type).exist",
													"});",
													"",
													"pm.test(\"'refresh_token' attribute exist\", () => {",
													"    pm.expect(respJson.refresh_token).exist;",
													"});",
													"",
													"pm.test(\"'expires_in' attribute exist\", () => {",
													"    pm.expect(respJson.expires_in).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{LOGIN_SERVICE_CLIENT_ID}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{LOGIN_SERVICE_CLIENT_SECRET}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{CUSTOMER_EMAIL}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{CUSTOMER_PASSWORD}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://beta-api.ah.nl/secure/oauth/token",
											"protocol": "https",
											"host": [
												"beta-api",
												"ah",
												"nl"
											],
											"path": [
												"secure",
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_EXTERNAL_CUSTOMER_ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {\r",
													"    var respJson = pm.response.json();\r",
													"    pm.environment.set('CUSTOMER_EMDA_ID', respJson.id);\r",
													"};\r",
													"\r",
													"pm.test(\"'id' attribute is Customer's id\", () => {\r",
													"    pm.expect((respJson.id).toString()).to.eql(environment.CUSTOMER_EXTERNAL_ID);\r",
													"});\r",
													"\r",
													"pm.test(\"'emailAddress' attribute is Customer's email\", () => {\r",
													"    pm.expect(respJson.emailAddress).to.eql(environment.CUSTOMER_EMAIL);\r",
													"});\r",
													"\r",
													"pm.test(\"'externalId' attribute exist\", () => {\r",
													"    pm.expect(respJson._embedded.externalids._embedded.items[0].externalId).exist;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{LOGIN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "https://beta-api.ah.nl/member-service/v1/members",
											"protocol": "https",
											"host": [
												"beta-api",
												"ah",
												"nl"
											],
											"path": [
												"member-service",
												"v1",
												"members"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_TOKEN_SFCC",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    var respJson = pm.response.json();",
													"    pm.environment.set('BM_ACCESS_JWT', respJson['token_type'] + ' ' + respJson['access_token']);",
													"};",
													"",
													"pm.test(\"'access_token' attribute exist\", () => {",
													"    pm.expect(respJson.access_token).exist;",
													"});",
													"",
													"pm.test(\"'token_type' attribute is Bearer\", () => {",
													"    pm.expect(respJson.token_type).to.eql(\"Bearer\");",
													"});",
													"",
													"pm.test(\"'expires_in' attribute exist\", () => {",
													"    pm.expect(respJson.expires_in).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{CLIENT_SECRET}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{CLIENT_ID}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://account.demandware.com/dw/oauth2/access_token",
											"protocol": "https",
											"host": [
												"account",
												"demandware",
												"com"
											],
											"path": [
												"dw",
												"oauth2",
												"access_token"
											]
										}
									},
									"response": []
								},
								{
									"name": "LOGIN_SFCC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    var respJson = pm.response.json();",
													"    pm.environment.set(\"JWT_TOKEN\", postman.getResponseHeader(\"Authorization\"));",
													"    pm.environment.set('CUSTOMER_NO', respJson['customer_no']);",
													"    pm.environment.set('CUSTOMER_ID', respJson['customer_id']);",
													"};",
													"",
													"pm.test(\"'customer_id' attribute exist\", () => {",
													"    pm.expect(respJson.customer_id).exist;",
													"});",
													"",
													"pm.test(\"'customer_no' attribute is Customer's number\", () => {",
													"    pm.expect(respJson.customer_no).to.eql(environment.CUSTOMER_NO);",
													"});",
													"",
													"pm.test(\"'email' attribute is Customer's email\", () => {",
													"    pm.expect(respJson.email).to.eql(environment.CUSTOMER_EMAIL);",
													"});",
													"",
													"pm.test(\"'first_name' attribute is Customer's firstname\", () => {",
													"    pm.expect(respJson.first_name).to.eql(environment.CUSTOMER_FIRST_NAME);",
													"});",
													"",
													"pm.test(\"'last_name' attribute is Customer's lastname\", () => {",
													"    pm.expect(respJson.last_name).to.eql(environment.CUSTOMER_LAST_NAME);",
													"});",
													"",
													"pm.test(\"'phone_home' attribute exist\", () => {",
													"    pm.expect(respJson.phone_home).to.exist || pm.expect(respJson.phone_mobile).to.exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{BM_ACCESS_JWT}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"{{CUSTOMER_EMDA_ID}}\",\n    \"client_id\": \"{{CLIENT_ID}}\"\n}"
										},
										"url": {
											"raw": "{{HOST}}/s/{{SITE}}/dw/shop/{{OCAPI_VERSION}}/customers/auth/trustedsystem",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"{{SITE}}",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"customers",
												"auth",
												"trustedsystem"
											]
										}
									},
									"response": []
								},
								{
									"name": "REFRESH_TOKEN_MYETOS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    var respJson = pm.response.json();",
													"    pm.environment.set('LOGIN_JWT', respJson['token_type'] + ' ' + respJson['access_token']);",
													"    pm.environment.set('LOGIN_REFRESH_JWT', respJson['refresh_token']);",
													"};",
													"",
													"pm.test(\"'access_token' attribute exist\", () => {",
													"    pm.expect(respJson.access_token).exist;",
													"});",
													"",
													"pm.test(\"'token_type' attribute exist\", () => {",
													"    pm.expect(respJson.token_type).exist;",
													"});",
													"",
													"pm.test(\"'refresh_token' attribute exist\", () => {",
													"    pm.expect(respJson.refresh_token).exist;",
													"});",
													"",
													"pm.test(\"'expires_in' attribute exist\", () => {",
													"    pm.expect(respJson.expires_in).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{LOGIN_SERVICE_CLIENT_ID}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{LOGIN_SERVICE_CLIENT_SECRET}}",
													"type": "text"
												},
												{
													"key": "refresh_token",
													"value": "{{LOGIN_REFRESH_JWT}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://beta-api.ah.nl/secure/oauth/token",
											"protocol": "https",
											"host": [
												"beta-api",
												"ah",
												"nl"
											],
											"path": [
												"secure",
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "LOGOUT_MYETOS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.environment.set('LOGIN_JWT', '');",
													"    pm.environment.set('LOGIN_REFRESH_JWT', '');",
													"}",
													"",
													"pm.test(\"Logged out from ETOS\", () => {",
													"    pm.expect(pm.response.code).to.eql(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{LOGIN_SERVICE_CLIENT_ID}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{LOGIN_SERVICE_CLIENT_SECRET}}",
													"type": "text"
												},
												{
													"key": "access_token",
													"value": "{{LOGIN_JWT}}",
													"type": "text"
												},
												{
													"key": "refresh_token",
													"value": "{{LOGIN_REFRESH_JWT}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://beta-api.ah.nl/secure/logout",
											"protocol": "https",
											"host": [
												"beta-api",
												"ah",
												"nl"
											],
											"path": [
												"secure",
												"logout"
											]
										}
									},
									"response": []
								},
								{
									"name": "LOGOUT_SFCC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200 || pm.response.code === 204) {",
													"    pm.environment.set(\"JWT_TOKEN\", '');",
													"};",
													"",
													"pm.test(\"Logged out from SFCC\", () => {",
													"    pm.expect(pm.response.code).to.eql(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/s/{{SITE}}/dw/shop/{{OCAPI_VERSION}}/customers/auth",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"{{SITE}}",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"customers",
												"auth"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CREATE_AND_GET_ORDER",
							"item": [
								{
									"name": "LOGIN",
									"item": [
										{
											"name": "LOGIN_MYETOS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {",
															"    var respJson = pm.response.json();",
															"    pm.environment.set('LOGIN_JWT', respJson['token_type'] + ' ' + respJson['access_token']);",
															"    pm.environment.set('LOGIN_REFRESH_JWT', respJson['refresh_token']);",
															"};",
															"",
															"pm.test(\"'access_token' attribute exist\", () => {",
															"    pm.expect(respJson.access_token).exist;",
															"});",
															"",
															"pm.test(\"'token_type' attribute exist\", () => {",
															"    pm.expect(respJson.token_type).exist;",
															"});",
															"",
															"pm.test(\"'refresh_token' attribute exist\", () => {",
															"    pm.expect(respJson.refresh_token).exist;",
															"});",
															"",
															"pm.test(\"'expires_in' attribute exist\", () => {",
															"    pm.expect(respJson.expires_in).exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{LOGIN_SERVICE_CLIENT_ID}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{LOGIN_SERVICE_CLIENT_SECRET}}",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{CUSTOMER_EMAIL}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{CUSTOMER_PASSWORD}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://beta-api.ah.nl/secure/oauth/token",
													"protocol": "https",
													"host": [
														"beta-api",
														"ah",
														"nl"
													],
													"path": [
														"secure",
														"oauth",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET_EXTERNAL_CUSTOMER_ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {\r",
															"    var respJson = pm.response.json();\r",
															"    pm.environment.set('CUSTOMER_EMDA_ID', respJson.id);\r",
															"};\r",
															"\r",
															"pm.test(\"'id' attribute is Customer's id\", () => {\r",
															"    pm.expect((respJson.id).toString()).to.eql(environment.CUSTOMER_EXTERNAL_ID);\r",
															"});\r",
															"\r",
															"pm.test(\"'emailAddress' attribute is Customer's email\", () => {\r",
															"    pm.expect(respJson.emailAddress).to.eql(environment.CUSTOMER_EMAIL);\r",
															"});\r",
															"\r",
															"pm.test(\"'externalId' attribute exist\", () => {\r",
															"    pm.expect(respJson._embedded.externalids._embedded.items[0].externalId).exist;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{LOGIN_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "https://beta-api.ah.nl/member-service/v1/members",
													"protocol": "https",
													"host": [
														"beta-api",
														"ah",
														"nl"
													],
													"path": [
														"member-service",
														"v1",
														"members"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET_TOKEN_SFCC",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {",
															"    var respJson = pm.response.json();",
															"    pm.environment.set('BM_ACCESS_JWT', respJson['token_type'] + ' ' + respJson['access_token']);",
															"};",
															"",
															"pm.test(\"'access_token' attribute exist\", () => {",
															"    pm.expect(respJson.access_token).exist;",
															"});",
															"",
															"pm.test(\"'token_type' attribute is Bearer\", () => {",
															"    pm.expect(respJson.token_type).to.eql(\"Bearer\");",
															"});",
															"",
															"pm.test(\"'expires_in' attribute exist\", () => {",
															"    pm.expect(respJson.expires_in).exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{CLIENT_SECRET}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{CLIENT_ID}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://account.demandware.com/dw/oauth2/access_token",
													"protocol": "https",
													"host": [
														"account",
														"demandware",
														"com"
													],
													"path": [
														"dw",
														"oauth2",
														"access_token"
													]
												}
											},
											"response": []
										},
										{
											"name": "LOGIN_SFCC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {",
															"    var respJson = pm.response.json();",
															"    pm.environment.set(\"JWT_TOKEN\", postman.getResponseHeader(\"Authorization\"));",
															"    pm.environment.set('CUSTOMER_NO', respJson['customer_no']);",
															"    pm.environment.set('CUSTOMER_ID', respJson['customer_id']);",
															"};",
															"",
															"pm.test(\"'customer_id' attribute exist\", () => {",
															"    pm.expect(respJson.customer_id).exist;",
															"});",
															"",
															"pm.test(\"'customer_no' attribute is Customer's number\", () => {",
															"    pm.expect(respJson.customer_no).to.eql(environment.CUSTOMER_NO);",
															"});",
															"",
															"pm.test(\"'email' attribute is Customer's email\", () => {",
															"    pm.expect(respJson.email).to.eql(environment.CUSTOMER_EMAIL);",
															"});",
															"",
															"pm.test(\"'first_name' attribute is Customer's firstname\", () => {",
															"    pm.expect(respJson.first_name).to.eql(environment.CUSTOMER_FIRST_NAME);",
															"});",
															"",
															"pm.test(\"'last_name' attribute is Customer's lastname\", () => {",
															"    pm.expect(respJson.last_name).to.eql(environment.CUSTOMER_LAST_NAME);",
															"});",
															"",
															"pm.test(\"'phone_home' attribute exist\", () => {",
															"    pm.expect(respJson.phone_home).to.exist || pm.expect(respJson.phone_mobile).to.exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{BM_ACCESS_JWT}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"login\": \"{{CUSTOMER_EMDA_ID}}\",\n    \"client_id\": \"{{CLIENT_ID}}\"\n}"
												},
												"url": {
													"raw": "{{HOST}}/s/{{SITE}}/dw/shop/{{OCAPI_VERSION}}/customers/auth/trustedsystem",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"{{SITE}}",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"customers",
														"auth",
														"trustedsystem"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "CREATE_BASKET",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () =>  {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('\"type\" is basket', () => {\r",
													"    pm.expect(responseJson._type).to.eql('basket');\r",
													"});\r",
													"\r",
													"pm.test('\"customer info\" is an object', () => {\r",
													"    pm.expect(responseJson.customer_info).to.be.an(\"object\");\r",
													"})\r",
													"\r",
													"pm.test('\"customer_id\" is correct', () => {\r",
													"    pm.expect(responseJson.customer_info.customer_id).eq(environment.CUSTOMER_ID);\r",
													"})\r",
													"\r",
													"pm.test('\"shipping items\" is an object', () => {\r",
													"    pm.expect(responseJson.shipping_items).to.be.an(\"array\");\r",
													"})\r",
													"\r",
													"pm.test('\"shipping total\" is null', () => {\r",
													"    pm.expect(responseJson.shipping_total).to.be.null;\r",
													"})\r",
													"\r",
													"pm.test('\"order total\" is null', () => {\r",
													"    pm.expect(responseJson.order_total).to.be.null;\r",
													"})\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    pm.environment.set('BASKET_ID', responseJson.basket_id);\r",
													"}\r",
													"\r",
													"if (pm.response.code === 400 && responseJson.fault && responseJson.fault.arguments.basketIds){\r",
													"    pm.environment.set('BASKET_ID', responseJson.fault.arguments.basketIds);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({",
													"    url:`${environment.HOST}/s/Sites-${environment.SITE}-Site/dw/shop/${environment.OCAPI_VERSION}/baskets/${environment.BASKET_ID}`,",
													"    method:'DELETE',",
													"    header: {",
													"        'x-dw-client-id': `${environment.CLIENT_ID}`,",
													"        'Authorization': `${environment.JWT_TOKEN}`,",
													"    }",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets"
											]
										}
									},
									"response": []
								},
								{
									"name": "ADD_PRODUCT_ITEM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () =>  {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('\"customer id\" is correct', () => {\r",
													"    pm.expect(responseJson.customer_info.customer_id).eq(environment.CUSTOMER_ID);\r",
													"})\r",
													"\r",
													"pm.test('\"product id\" is correct', () => {\r",
													"    pm.expect(responseJson.product_items[0].product_id).eq(environment.PRODUCT_ID_3);\r",
													"})\r",
													"\r",
													"pm.test('\"product total\" is not null', () => {\r",
													"    pm.expect(responseJson.product_total).not.to.be.null;\r",
													"});\r",
													"\r",
													"pm.environment.set('PRODUCT_ITEMS_PRICE', responseJson.product_items[0].price);\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    const item_id = responseJson.product_items \r",
													"        && responseJson.product_items.length\r",
													"        && responseJson.product_items[0].item_id;\r",
													"\r",
													"    if (item_id) {\r",
													"        pm.environment.set('ITEM_ID', item_id);\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[{\r\n    \"product_id\" : \"{{PRODUCT_ID_3}}\",\r\n    \"quantity\" : 5.00\r\n}]"
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/items",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets",
												"{{BASKET_ID}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "ADD_SHIPMENT_BILLING",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () =>  {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('\"first_name\" in billing address is correct', () => {",
													"    pm.expect(responseJson.billing_address.first_name).eq(environment.CUSTOMER_FIRST_NAME);",
													"});",
													"",
													"pm.test('\"last_name\" in billing address is correct', () => {",
													"    pm.expect(responseJson.billing_address.last_name).eq(environment.CUSTOMER_LAST_NAME);",
													"});",
													"",
													"pm.test('\"city\" in billing address is correct', () => {",
													"    pm.expect(responseJson.billing_address.city).eq(environment.CUSTOMER_CITY);",
													"});",
													"",
													"pm.test('\"phone\" in billing address is correct', () => {",
													"    pm.expect(responseJson.billing_address.phone).eq(environment.CUSTOMER_PHONE);",
													"});",
													"",
													"pm.test('\"c_houseNr\" in billing address is correct', () => {",
													"    pm.expect(responseJson.billing_address.c_houseNr).eq(environment.CUSTOMER_HOUSE_NR);",
													"});",
													"",
													"pm.test('\"c_email\" in billing address is correct', () => {",
													"    pm.expect(responseJson.customer_info.email).eq(environment.CUSTOMER_EMAIL);",
													"});",
													"",
													"pm.test('\"first_name\" in shipping address is correct', () => {",
													"    pm.expect(responseJson.shipments[0].shipping_address.first_name).eq(environment.CUSTOMER_FIRST_NAME);",
													"});",
													"",
													"pm.test('\"last_name\" in shipping address is correct', () => {",
													"    pm.expect(responseJson.shipments[0].shipping_address.last_name).eq(environment.CUSTOMER_LAST_NAME);",
													"});",
													"",
													"pm.test('\"city\" in shipping address is correct', () => {",
													"    pm.expect(responseJson.shipments[0].shipping_address.city).eq(environment.CUSTOMER_CITY);",
													"});",
													"",
													"pm.test('\"phone\" in shipping address is correct', () => {",
													"    pm.expect(responseJson.shipments[0].shipping_address.phone).eq(environment.CUSTOMER_PHONE);",
													"});",
													"",
													"pm.test('\"c_houseNr\" in shipping address is correct', () => {",
													"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNr).eq(environment.CUSTOMER_HOUSE_NR);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"shipping_method\":\r\n  {\r\n    \"id\":\"standard\"\r\n  },\r\n  \"shipping_address\" :\r\n  {\r\n    \"first_name\":\"{{CUSTOMER_FIRST_NAME}}\",\r\n    \"last_name\":\"{{CUSTOMER_LAST_NAME}}\",\r\n    \"address1\": \"Test\",\r\n    \"city\":\"{{CUSTOMER_CITY}}\",\r\n    \"postal_code\": \"{{POSTAL_CODE}}\",\r\n    \"country_code\":\"{{COUNTRY_CODE}}\",\r\n    \"phone\": \"{{CUSTOMER_PHONE}}\",\r\n    \"c_houseNr\": \"{{CUSTOMER_HOUSE_NR}}\",\r\n    \"c_houseNrAdditional\": \"{{CUSTOMER_HOME_NR_ADDITIONAL}}\"\r\n   },\r\n  \"c_email\": \"{{CUSTOMER_EMAIL}}\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/shipments/me",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets",
												"{{BASKET_ID}}",
												"shipments",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "ADD_PAYMENT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () =>  {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('\"payment_method_id\" is Adyen', () => {",
													"    pm.expect(responseJson.payment_instruments[0].payment_method_id).eq(environment.PAYMENT_METHOD_ADYEN);",
													"})",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"amount\": 30,\r\n  \"payment_method_id\" : \"{{PAYMENT_METHOD_ADYEN}}\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/payment_instruments",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets",
												"{{BASKET_ID}}",
												"payment_instruments"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_EXISTING_BASKET",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () =>  {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"try {",
													"    const DISCOUNT = responseJson.product_items[0].price_adjustments[0].price;",
													"    pm.test('\"order total\" is correct when Treazure is enable', () => {",
													"        pm.expect(responseJson.product_total).eq(environment.PRODUCT_ITEMS_PRICE + DISCOUNT)",
													"    })",
													"} catch(error){",
													"    pm.test('\"order total\" is correct when Treazure is disable', () => {",
													"        pm.expect(responseJson.product_total).eq(environment.PRODUCT_ITEMS_PRICE)",
													"    })",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets",
												"{{BASKET_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CREATE_ORDER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    const order_no = jsonData.order_no;\r",
													"\r",
													"    if (order_no) {\r",
													"        pm.environment.set('ORDER_NO', order_no);\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.test('Response object should have c_source property', () => {\r",
													"    pm.expect(jsonData).to.have.nested.property('c_source');\r",
													"});\r",
													"\r",
													"pm.test('c_source property of response should be equal \"appOCAPI\" or \"ocapiLongtail\"', () => {\r",
													"    const isLongtail = !!jsonData.c_isLongtailOrder;\r",
													"    const source = isLongtail ? 'ocapiLongtail' : 'appOCAPI';\r",
													"    pm.expect(jsonData.c_source).to.equal(source);\r",
													"});\r",
													"\r",
													"pm.test(\"'billing_address' object is returned\", () => {\r",
													"    pm.expect(jsonData.billing_address).to.an(\"object\")\r",
													"})\r",
													"\r",
													"pm.test(\"'confirmation_status' not null\", () => {\r",
													"    pm.expect(jsonData.confirmation_status).not.to.be.null\r",
													"})\r",
													"\r",
													"pm.test(\"'email' is user's email\", () => {\r",
													"    pm.expect(jsonData.customer_info.email).eql(environment.CUSTOMER_EMAIL)\r",
													"})\r",
													"\r",
													"pm.test(\"'order_no' not null\", () => {\r",
													"    pm.expect(jsonData.order_no).not.to.be.null\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"basket_id\": \"{{BASKET_ID}}\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/orders",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_ORDER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'billing_address' object is returned\", () => {",
													"    pm.expect(jsonData.billing_address).to.an(\"object\")",
													"})",
													"",
													"pm.test(\"'confirmation_status' not null\", () => {",
													"    pm.expect(jsonData.confirmation_status).not.to.be.null",
													"})",
													"",
													"pm.test(\"'email' is user's email\", () => {",
													"    pm.expect(jsonData.customer_info.email).eql(environment.CUSTOMER_EMAIL)",
													"})",
													"",
													"pm.test(\"'order_no' is user's order number\", () => {",
													"    pm.expect(jsonData.order_no).eql(environment.ORDER_NO)",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/orders/{{ORDER_NO}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"orders",
												"{{ORDER_NO}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "TREAZURE_BASKET_CALCULATIONS",
							"item": [
								{
									"name": "WHEN >30€ IN THE CART",
									"item": [
										{
											"name": "LOGIN",
											"item": [
												{
													"name": "LOGIN_MYETOS",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"if (pm.response.code === 200) {",
																	"    var respJson = pm.response.json();",
																	"    pm.environment.set('LOGIN_JWT', respJson['token_type'] + ' ' + respJson['access_token']);",
																	"    pm.environment.set('LOGIN_REFRESH_JWT', respJson['refresh_token']);",
																	"};",
																	"",
																	"pm.test(\"'access_token' attribute exist\", () => {",
																	"    pm.expect(respJson.access_token).exist;",
																	"});",
																	"",
																	"pm.test(\"'token_type' attribute exist\", () => {",
																	"    pm.expect(respJson.token_type).exist;",
																	"});",
																	"",
																	"pm.test(\"'refresh_token' attribute exist\", () => {",
																	"    pm.expect(respJson.refresh_token).exist;",
																	"});",
																	"",
																	"pm.test(\"'expires_in' attribute exist\", () => {",
																	"    pm.expect(respJson.expires_in).exist;",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x-www-form-urlencoded",
																"type": "text"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "password",
																	"type": "text"
																},
																{
																	"key": "client_id",
																	"value": "{{LOGIN_SERVICE_CLIENT_ID}}",
																	"type": "text"
																},
																{
																	"key": "client_secret",
																	"value": "{{LOGIN_SERVICE_CLIENT_SECRET}}",
																	"type": "text"
																},
																{
																	"key": "username",
																	"value": "{{CUSTOMER_EMAIL}}",
																	"type": "text"
																},
																{
																	"key": "password",
																	"value": "{{CUSTOMER_PASSWORD}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "https://beta-api.ah.nl/secure/oauth/token",
															"protocol": "https",
															"host": [
																"beta-api",
																"ah",
																"nl"
															],
															"path": [
																"secure",
																"oauth",
																"token"
															]
														}
													},
													"response": []
												},
												{
													"name": "GET_EXTERNAL_CUSTOMER_ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"if (pm.response.code === 200) {\r",
																	"    var respJson = pm.response.json();\r",
																	"    pm.environment.set('CUSTOMER_EMDA_ID', respJson.id);\r",
																	"};\r",
																	"\r",
																	"pm.test(\"'id' attribute is Customer's id\", () => {\r",
																	"    pm.expect((respJson.id).toString()).to.eql(environment.CUSTOMER_EXTERNAL_ID);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"'emailAddress' attribute is Customer's email\", () => {\r",
																	"    pm.expect(respJson.emailAddress).to.eql(environment.CUSTOMER_EMAIL);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"'externalId' attribute exist\", () => {\r",
																	"    pm.expect(respJson._embedded.externalids._embedded.items[0].externalId).exist;\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x-www-form-urlencoded",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "{{LOGIN_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": []
														},
														"url": {
															"raw": "https://beta-api.ah.nl/member-service/v1/members",
															"protocol": "https",
															"host": [
																"beta-api",
																"ah",
																"nl"
															],
															"path": [
																"member-service",
																"v1",
																"members"
															]
														}
													},
													"response": []
												},
												{
													"name": "GET_TOKEN_SFCC",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"if (pm.response.code === 200) {",
																	"    var respJson = pm.response.json();",
																	"    pm.environment.set('BM_ACCESS_JWT', respJson['token_type'] + ' ' + respJson['access_token']);",
																	"};",
																	"",
																	"pm.test(\"'access_token' attribute exist\", () => {",
																	"    pm.expect(respJson.access_token).exist;",
																	"});",
																	"",
																	"pm.test(\"'token_type' attribute is Bearer\", () => {",
																	"    pm.expect(respJson.token_type).to.eql(\"Bearer\");",
																	"});",
																	"",
																	"pm.test(\"'expires_in' attribute exist\", () => {",
																	"    pm.expect(respJson.expires_in).exist;",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "basic",
															"basic": [
																{
																	"key": "password",
																	"value": "{{CLIENT_SECRET}}",
																	"type": "string"
																},
																{
																	"key": "username",
																	"value": "{{CLIENT_ID}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "client_credentials",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "https://account.demandware.com/dw/oauth2/access_token",
															"protocol": "https",
															"host": [
																"account",
																"demandware",
																"com"
															],
															"path": [
																"dw",
																"oauth2",
																"access_token"
															]
														}
													},
													"response": []
												},
												{
													"name": "LOGIN_SFCC",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"if (pm.response.code === 200) {",
																	"    var respJson = pm.response.json();",
																	"    pm.environment.set(\"JWT_TOKEN\", postman.getResponseHeader(\"Authorization\"));",
																	"    pm.environment.set('CUSTOMER_NO', respJson['customer_no']);",
																	"    pm.environment.set('CUSTOMER_ID', respJson['customer_id']);",
																	"};",
																	"",
																	"pm.test(\"'customer_id' attribute exist\", () => {",
																	"    pm.expect(respJson.customer_id).exist;",
																	"});",
																	"",
																	"pm.test(\"'customer_no' attribute is Customer's number\", () => {",
																	"    pm.expect(respJson.customer_no).to.eql(environment.CUSTOMER_NO);",
																	"});",
																	"",
																	"pm.test(\"'email' attribute is Customer's email\", () => {",
																	"    pm.expect(respJson.email).to.eql(environment.CUSTOMER_EMAIL);",
																	"});",
																	"",
																	"pm.test(\"'first_name' attribute is Customer's firstname\", () => {",
																	"    pm.expect(respJson.first_name).to.eql(environment.CUSTOMER_FIRST_NAME);",
																	"});",
																	"",
																	"pm.test(\"'last_name' attribute is Customer's lastname\", () => {",
																	"    pm.expect(respJson.last_name).to.eql(environment.CUSTOMER_LAST_NAME);",
																	"});",
																	"",
																	"pm.test(\"'phone_home' attribute exist\", () => {",
																	"    pm.expect(respJson.phone_home).to.exist || pm.expect(respJson.phone_mobile).to.exist;",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "{{BM_ACCESS_JWT}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"login\": \"{{CUSTOMER_EMDA_ID}}\",\n    \"client_id\": \"{{CLIENT_ID}}\"\n}"
														},
														"url": {
															"raw": "{{HOST}}/s/{{SITE}}/dw/shop/{{OCAPI_VERSION}}/customers/auth/trustedsystem",
															"host": [
																"{{HOST}}"
															],
															"path": [
																"s",
																"{{SITE}}",
																"dw",
																"shop",
																"{{OCAPI_VERSION}}",
																"customers",
																"auth",
																"trustedsystem"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "CREATE_BASKET",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test('Status code is 200', () =>  {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test('\"type\" is basket', () => {\r",
															"    pm.expect(responseJson._type).to.eql('basket');\r",
															"});\r",
															"\r",
															"pm.test('\"customer info\" is an object', () => {\r",
															"    pm.expect(responseJson.customer_info).to.be.an(\"object\");\r",
															"})\r",
															"\r",
															"pm.test('\"customer_id\" is correct', () => {\r",
															"    pm.expect(responseJson.customer_info.customer_id).eq(environment.CUSTOMER_ID);\r",
															"})\r",
															"\r",
															"pm.test('\"shipping items\" is an object', () => {\r",
															"    pm.expect(responseJson.shipping_items).to.be.an(\"array\");\r",
															"})\r",
															"\r",
															"pm.test('\"shipping total\" is null', () => {\r",
															"    pm.expect(responseJson.shipping_total).to.be.null;\r",
															"})\r",
															"\r",
															"pm.test('\"order total\" is null', () => {\r",
															"    pm.expect(responseJson.order_total).to.be.null;\r",
															"})\r",
															"\r",
															"if (pm.response.code === 200 || pm.response.code === 201) {\r",
															"    pm.environment.set('BASKET_ID', responseJson.basket_id);\r",
															"}\r",
															"\r",
															"if (pm.response.code === 400 && responseJson.fault && responseJson.fault.arguments.basketIds){\r",
															"    pm.environment.set('BASKET_ID', responseJson.fault.arguments.basketIds);\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({",
															"    url:`${environment.HOST}/s/Sites-${environment.SITE}-Site/dw/shop/${environment.OCAPI_VERSION}/baskets/${environment.BASKET_ID}`,",
															"    method:'DELETE',",
															"    header: {",
															"        'x-dw-client-id': `${environment.CLIENT_ID}`,",
															"        'Authorization': `${environment.JWT_TOKEN}`,",
															"    }",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "x-dw-client-id",
														"value": "{{CLIENT_ID}}",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "{{JWT_TOKEN}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"Sites-{{SITE}}-Site",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"baskets"
													]
												}
											},
											"response": []
										},
										{
											"name": "ADD_PRODUCT_ITEM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test('Status code is 200', () =>  {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test('\"customer id\" is correct', () => {\r",
															"    pm.expect(responseJson.customer_info.customer_id).eq(environment.CUSTOMER_ID);\r",
															"})\r",
															"\r",
															"pm.test('\"product id\" is correct', () => {\r",
															"    pm.expect(responseJson.product_items[0].product_id).eq(environment.PRODUCT_ID_3);\r",
															"})\r",
															"\r",
															"pm.test('\"product total\" is not null', () => {\r",
															"    pm.expect(responseJson.product_total).not.to.be.null;\r",
															"});\r",
															"\r",
															"pm.environment.set('PRODUCT_ITEMS_PRICE', responseJson.product_items[0].price);\r",
															"\r",
															"if (pm.response.code === 200 || pm.response.code === 201) {\r",
															"    const item_id = responseJson.product_items \r",
															"        && responseJson.product_items.length\r",
															"        && responseJson.product_items[0].item_id;\r",
															"\r",
															"    if (item_id) {\r",
															"        pm.environment.set('ITEM_ID', item_id);\r",
															"    }\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{JWT_TOKEN}}",
														"type": "text"
													},
													{
														"key": "x-dw-client-id",
														"value": "{{CLIENT_ID}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[{\r\n    \"product_id\" : \"{{PRODUCT_ID_3}}\",\r\n    \"quantity\" : 4.00\r\n}]"
												},
												"url": {
													"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/items",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"Sites-{{SITE}}-Site",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"baskets",
														"{{BASKET_ID}}",
														"items"
													]
												}
											},
											"response": []
										},
										{
											"name": "ADD_SHIPMENT_BILLING",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test('Status code is 200', () =>  {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test('\"first_name\" in billing address is correct', () => {",
															"    pm.expect(responseJson.billing_address.first_name).eq(environment.CUSTOMER_FIRST_NAME);",
															"});",
															"",
															"pm.test('\"last_name\" in billing address is correct', () => {",
															"    pm.expect(responseJson.billing_address.last_name).eq(environment.CUSTOMER_LAST_NAME);",
															"});",
															"",
															"pm.test('\"city\" in billing address is correct', () => {",
															"    pm.expect(responseJson.billing_address.city).eq(environment.CUSTOMER_CITY);",
															"});",
															"",
															"pm.test('\"phone\" in billing address is correct', () => {",
															"    pm.expect(responseJson.billing_address.phone).eq(environment.CUSTOMER_PHONE);",
															"});",
															"",
															"pm.test('\"c_houseNr\" in billing address is correct', () => {",
															"    pm.expect(responseJson.billing_address.c_houseNr).eq(environment.CUSTOMER_HOUSE_NR);",
															"});",
															"",
															"pm.test('\"c_email\" in billing address is correct', () => {",
															"    pm.expect(responseJson.customer_info.email).eq(environment.CUSTOMER_EMAIL);",
															"});",
															"",
															"pm.test('\"first_name\" in shipping address is correct', () => {",
															"    pm.expect(responseJson.shipments[0].shipping_address.first_name).eq(environment.CUSTOMER_FIRST_NAME);",
															"});",
															"",
															"pm.test('\"last_name\" in shipping address is correct', () => {",
															"    pm.expect(responseJson.shipments[0].shipping_address.last_name).eq(environment.CUSTOMER_LAST_NAME);",
															"});",
															"",
															"pm.test('\"city\" in shipping address is correct', () => {",
															"    pm.expect(responseJson.shipments[0].shipping_address.city).eq(environment.CUSTOMER_CITY);",
															"});",
															"",
															"pm.test('\"phone\" in shipping address is correct', () => {",
															"    pm.expect(responseJson.shipments[0].shipping_address.phone).eq(environment.CUSTOMER_PHONE);",
															"});",
															"",
															"pm.test('\"c_houseNr\" in shipping address is correct', () => {",
															"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNr).eq(environment.CUSTOMER_HOUSE_NR);",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "{{JWT_TOKEN}}",
														"type": "text"
													},
													{
														"key": "x-dw-client-id",
														"value": "{{CLIENT_ID}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"shipping_method\":\r\n  {\r\n    \"id\":\"standard\"\r\n  },\r\n  \"shipping_address\" :\r\n  {\r\n    \"first_name\":\"{{CUSTOMER_FIRST_NAME}}\",\r\n    \"last_name\":\"{{CUSTOMER_LAST_NAME}}\",\r\n    \"address1\": \"Test\",\r\n    \"city\":\"{{CUSTOMER_CITY}}\",\r\n    \"postal_code\": \"{{POSTAL_CODE}}\",\r\n    \"country_code\":\"{{COUNTRY_CODE}}\",\r\n    \"phone\": \"{{CUSTOMER_PHONE}}\",\r\n    \"c_houseNr\": \"{{CUSTOMER_HOUSE_NR}}\",\r\n    \"c_houseNrAdditional\": \"{{CUSTOMER_HOME_NR_ADDITIONAL}}\"\r\n   },\r\n  \"c_email\": \"{{CUSTOMER_EMAIL}}\"\r\n}"
												},
												"url": {
													"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/shipments/me",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"Sites-{{SITE}}-Site",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"baskets",
														"{{BASKET_ID}}",
														"shipments",
														"me"
													]
												}
											},
											"response": []
										},
										{
											"name": "ADD_PAYMENT",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test('Status code is 200', () =>  {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test('\"payment_method_id\" is Adyen', () => {",
															"    pm.expect(responseJson.payment_instruments[0].payment_method_id).eq(environment.PAYMENT_METHOD_ADYEN);",
															"})",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{JWT_TOKEN}}",
														"type": "text"
													},
													{
														"key": "x-dw-client-id",
														"value": "{{CLIENT_ID}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"amount\": 30,\r\n  \"payment_method_id\" : \"{{PAYMENT_METHOD_ADYEN}}\"\r\n}"
												},
												"url": {
													"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/payment_instruments",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"Sites-{{SITE}}-Site",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"baskets",
														"{{BASKET_ID}}",
														"payment_instruments"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET_EXISTING_BASKET",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test('Status code is 200', () =>  {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"try {",
															"    const DISCOUNT = responseJson.product_items[0].price_adjustments[0].price;",
															"    pm.test('\"order total\" is correct when Treazure is enable', () => {",
															"        pm.expect(responseJson.order_total).eq(environment.PRODUCT_ITEMS_PRICE + DISCOUNT)",
															"    })",
															"} catch(error){",
															"    pm.test('\"order total\" is correct when Treazure is disable', () => {",
															"        pm.expect(responseJson.order_total).eq(environment.PRODUCT_ITEMS_PRICE)",
															"    })",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-dw-client-id",
														"value": "{{CLIENT_ID}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{JWT_TOKEN}}",
														"type": "text"
													},
													{
														"key": "Origin",
														"value": "{{REQ_ORIGIN}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"Sites-{{SITE}}-Site",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"baskets",
														"{{BASKET_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UPDATE_SHIPMENT_BILLING",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test('Status code is 200', () =>  {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test('\"first_name\" in billing address is correct', () => {",
															"    pm.expect(responseJson.billing_address.first_name).eq(\"Test\");",
															"});",
															"",
															"pm.test('\"last_name\" in billing address is correct', () => {",
															"    pm.expect(responseJson.billing_address.last_name).eq(\"Test\");",
															"});",
															"",
															"pm.test('\"city\" in billing address is correct', () => {",
															"    pm.expect(responseJson.billing_address.city).eq(\"Test\");",
															"});",
															"",
															"pm.test('\"postal_code in billing address is correct', () => {",
															"    pm.expect(responseJson.billing_address.postal_code).eq(\"1024DC\");",
															"});",
															"",
															"pm.test('\"phone\" in billing address is correct', () => {",
															"    pm.expect(responseJson.billing_address.phone).eq(\"+31205311111\");",
															"});",
															"",
															"pm.test('\"c_houseNr\" in billing address is correct', () => {",
															"    pm.expect(responseJson.billing_address.c_houseNr).eq(\"1\");",
															"});",
															"",
															"pm.test('\"c_houseNrAdditional\" in billing address is correct', () => {",
															"    pm.expect(responseJson.billing_address.c_houseNrAdditional).eq(\"B\");",
															"});",
															"",
															"pm.test('\"c_email\" in billing address is correct', () => {",
															"    pm.expect(responseJson.customer_info.email).eq(\"test@live.com\");",
															"});",
															"",
															"pm.test('\"first_name\" in shipping address is correct', () => {",
															"    pm.expect(responseJson.shipments[0].shipping_address.first_name).eq(\"Test\");",
															"});",
															"",
															"pm.test('\"last_name\" in shipping address is correct', () => {",
															"    pm.expect(responseJson.shipments[0].shipping_address.last_name).eq(\"Test\");",
															"});",
															"",
															"pm.test('\"city\" in shipping address is correct', () => {",
															"    pm.expect(responseJson.shipments[0].shipping_address.city).eq(\"Test\");",
															"});",
															"",
															"pm.test('\"postal_code in shipping address is correct', () => {",
															"    pm.expect(responseJson.shipments[0].shipping_address.postal_code).eq(\"1024DC\");",
															"});",
															"",
															"pm.test('\"phone\" in shipping address is correct', () => {",
															"    pm.expect(responseJson.shipments[0].shipping_address.phone).eq(\"+31205311111\");",
															"});",
															"",
															"pm.test('\"c_houseNr\" in shipping address is correct', () => {",
															"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNr).eq(\"1\");",
															"});",
															"",
															"pm.test('\"c_houseNrAdditional\" in shipping address is correct', () => {",
															"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNrAdditional).eq(\"B\");",
															"});",
															"",
															"try {",
															"    const DISCOUNT = responseJson.product_items[0].price_adjustments[0].price;",
															"    pm.test('\"order total\" is correct when Treazure is enable', () => {",
															"        pm.expect(responseJson.order_total).eq(environment.PRODUCT_ITEMS_PRICE + DISCOUNT)",
															"    })",
															"} catch(error){",
															"    pm.test('\"order total\" is correct when Treazure is disable', () => {",
															"        pm.expect(responseJson.order_total).eq(environment.PRODUCT_ITEMS_PRICE)",
															"    })",
															"}",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "{{JWT_TOKEN}}",
														"type": "text"
													},
													{
														"key": "x-dw-client-id",
														"value": "{{CLIENT_ID}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"shipping_method\":\r\n  {\r\n    \"id\":\"standard\"\r\n  },\r\n  \"shipping_address\" :\r\n  {\r\n    \"first_name\":\"Test\",\r\n    \"last_name\":\"Test\",\r\n    \"address1\": \"Test\",\r\n    \"city\":\"Test\",\r\n    \"postal_code\": \"1024DC\",\r\n    \"country_code\":\"{{COUNTRY_CODE}}\",\r\n    \"phone\": \"+31205311111\",\r\n    \"c_houseNr\": \"1\",\r\n    \"c_houseNrAdditional\": \"B\"\r\n   },\r\n  \"c_email\": \"test@live.com\"\r\n}"
												},
												"url": {
													"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/shipments/me",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"Sites-{{SITE}}-Site",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"baskets",
														"{{BASKET_ID}}",
														"shipments",
														"me"
													]
												}
											},
											"response": []
										},
										{
											"name": "UPDATE_PAYMENT",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test('Status code is 200', () =>  {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test('\"payment_method_id\" is Adyen', () => {",
															"    pm.expect(responseJson.payment_instruments[0].payment_method_id).eq(environment.PAYMENT_METHOD_ADYEN);",
															"})",
															"",
															"try {",
															"    const DISCOUNT = responseJson.product_items[0].price_adjustments[0].price;",
															"    pm.expect(responseJson.order_total).eq(environment.PRODUCT_ITEMS_PRICE + DISCOUNT)",
															"    pm.test('\"order total\" is correct when Treazure is enable', () => true)",
															"} catch(error){",
															"    pm.test('\"order total\" is correct when Treazure is disable', () => {",
															"        pm.expect(responseJson.order_total).eq(environment.PRODUCT_ITEMS_PRICE)",
															"    })",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{JWT_TOKEN}}",
														"type": "text"
													},
													{
														"key": "x-dw-client-id",
														"value": "{{CLIENT_ID}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"amount\": 30,\r\n  \"payment_method_id\" : \"{{PAYMENT_METHOD_ADYEN}}\"\r\n}"
												},
												"url": {
													"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/payment_instruments",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"Sites-{{SITE}}-Site",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"baskets",
														"{{BASKET_ID}}",
														"payment_instruments"
													]
												}
											},
											"response": []
										},
										{
											"name": "UPDATE_PRODUCT_ITEM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test('Status code is 200', () =>  {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.environment.set('PRODUCT_ITEMS_PRICE_NEW', responseJson.product_items[0].price);",
															"",
															"try {",
															"    const PRODUCT_ITEMS_PRICE_NEW = responseJson.product_items[0].price",
															"    const DISCOUNT = responseJson.product_items[0].price_adjustments[0].price;",
															"    pm.test('\"order total\" is correct when Treazure is enable', () => {",
															"        pm.expect(responseJson.order_total).eq(PRODUCT_ITEMS_PRICE_NEW + DISCOUNT)",
															"        console.log(environment.PRODUCT_ITEMS_PRICE_NEW, DISCOUNT)",
															"    })",
															"} catch(error){",
															"    pm.test('\"order total\" is correct when Treazure is disable', () => {",
															"        pm.expect(responseJson.order_total).eq(PRODUCT_ITEMS_PRICE_NEW)",
															"    })",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "{{JWT_TOKEN}}",
														"type": "text"
													},
													{
														"key": "x-dw-client-id",
														"value": "{{CLIENT_ID}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"product_id\" : \"{{PRODUCT_ID}}\",\r\n  \"quantity\" : 8.00\r\n}"
												},
												"url": {
													"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/items/{{ITEM_ID}}",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"Sites-{{SITE}}-Site",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"baskets",
														"{{BASKET_ID}}",
														"items",
														"{{ITEM_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET_EXISTING_BASKET",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test('Status code is 200', () =>  {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"try {",
															"    const DISCOUNT = responseJson.product_items[0].price_adjustments[0].price;",
															"    pm.test('\"order total\" is correct when Treazure is enable', () => {",
															"        pm.expect(responseJson.order_total).eq(environment.PRODUCT_ITEMS_PRICE_NEW + DISCOUNT)",
															"    })",
															"} catch(error){",
															"    pm.test('\"order total\" is correct when Treazure is disable', () => {",
															"        pm.expect(responseJson.order_total).eq(environment.PRODUCT_ITEMS_PRICE_NEW)",
															"    })",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-dw-client-id",
														"value": "{{CLIENT_ID}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{JWT_TOKEN}}",
														"type": "text"
													},
													{
														"key": "Origin",
														"value": "{{REQ_ORIGIN}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"Sites-{{SITE}}-Site",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"baskets",
														"{{BASKET_ID}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "WHEN TWO PROMOS APPLIED",
									"item": [
										{
											"name": "LOGIN",
											"item": [
												{
													"name": "LOGIN_MYETOS",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"if (pm.response.code === 200) {",
																	"    var respJson = pm.response.json();",
																	"    pm.environment.set('LOGIN_JWT', respJson['token_type'] + ' ' + respJson['access_token']);",
																	"    pm.environment.set('LOGIN_REFRESH_JWT', respJson['refresh_token']);",
																	"};",
																	"",
																	"pm.test(\"'access_token' attribute exist\", () => {",
																	"    pm.expect(respJson.access_token).exist;",
																	"});",
																	"",
																	"pm.test(\"'token_type' attribute exist\", () => {",
																	"    pm.expect(respJson.token_type).exist;",
																	"});",
																	"",
																	"pm.test(\"'refresh_token' attribute exist\", () => {",
																	"    pm.expect(respJson.refresh_token).exist;",
																	"});",
																	"",
																	"pm.test(\"'expires_in' attribute exist\", () => {",
																	"    pm.expect(respJson.expires_in).exist;",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x-www-form-urlencoded",
																"type": "text"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "password",
																	"type": "text"
																},
																{
																	"key": "client_id",
																	"value": "{{LOGIN_SERVICE_CLIENT_ID}}",
																	"type": "text"
																},
																{
																	"key": "client_secret",
																	"value": "{{LOGIN_SERVICE_CLIENT_SECRET}}",
																	"type": "text"
																},
																{
																	"key": "username",
																	"value": "{{CUSTOMER_EMAIL}}",
																	"type": "text"
																},
																{
																	"key": "password",
																	"value": "{{CUSTOMER_PASSWORD}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "https://beta-api.ah.nl/secure/oauth/token",
															"protocol": "https",
															"host": [
																"beta-api",
																"ah",
																"nl"
															],
															"path": [
																"secure",
																"oauth",
																"token"
															]
														}
													},
													"response": []
												},
												{
													"name": "GET_EXTERNAL_CUSTOMER_ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"if (pm.response.code === 200) {\r",
																	"    var respJson = pm.response.json();\r",
																	"    pm.environment.set('CUSTOMER_EMDA_ID', respJson.id);\r",
																	"};\r",
																	"\r",
																	"pm.test(\"'id' attribute is Customer's id\", () => {\r",
																	"    pm.expect((respJson.id).toString()).to.eql(environment.CUSTOMER_EXTERNAL_ID);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"'emailAddress' attribute is Customer's email\", () => {\r",
																	"    pm.expect(respJson.emailAddress).to.eql(environment.CUSTOMER_EMAIL);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"'externalId' attribute exist\", () => {\r",
																	"    pm.expect(respJson._embedded.externalids._embedded.items[0].externalId).exist;\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x-www-form-urlencoded",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "{{LOGIN_JWT}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": []
														},
														"url": {
															"raw": "https://beta-api.ah.nl/member-service/v1/members",
															"protocol": "https",
															"host": [
																"beta-api",
																"ah",
																"nl"
															],
															"path": [
																"member-service",
																"v1",
																"members"
															]
														}
													},
													"response": []
												},
												{
													"name": "GET_TOKEN_SFCC",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"if (pm.response.code === 200) {",
																	"    var respJson = pm.response.json();",
																	"    pm.environment.set('BM_ACCESS_JWT', respJson['token_type'] + ' ' + respJson['access_token']);",
																	"};",
																	"",
																	"pm.test(\"'access_token' attribute exist\", () => {",
																	"    pm.expect(respJson.access_token).exist;",
																	"});",
																	"",
																	"pm.test(\"'token_type' attribute is Bearer\", () => {",
																	"    pm.expect(respJson.token_type).to.eql(\"Bearer\");",
																	"});",
																	"",
																	"pm.test(\"'expires_in' attribute exist\", () => {",
																	"    pm.expect(respJson.expires_in).exist;",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "basic",
															"basic": [
																{
																	"key": "password",
																	"value": "{{CLIENT_SECRET}}",
																	"type": "string"
																},
																{
																	"key": "username",
																	"value": "{{CLIENT_ID}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "client_credentials",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "https://account.demandware.com/dw/oauth2/access_token",
															"protocol": "https",
															"host": [
																"account",
																"demandware",
																"com"
															],
															"path": [
																"dw",
																"oauth2",
																"access_token"
															]
														}
													},
													"response": []
												},
												{
													"name": "LOGIN_SFCC",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"if (pm.response.code === 200) {",
																	"    var respJson = pm.response.json();",
																	"    pm.environment.set(\"JWT_TOKEN\", postman.getResponseHeader(\"Authorization\"));",
																	"    pm.environment.set('CUSTOMER_NO', respJson['customer_no']);",
																	"    pm.environment.set('CUSTOMER_ID', respJson['customer_id']);",
																	"};",
																	"",
																	"pm.test(\"'customer_id' attribute exist\", () => {",
																	"    pm.expect(respJson.customer_id).exist;",
																	"});",
																	"",
																	"pm.test(\"'customer_no' attribute is Customer's number\", () => {",
																	"    pm.expect(respJson.customer_no).to.eql(environment.CUSTOMER_NO);",
																	"});",
																	"",
																	"pm.test(\"'email' attribute is Customer's email\", () => {",
																	"    pm.expect(respJson.email).to.eql(environment.CUSTOMER_EMAIL);",
																	"});",
																	"",
																	"pm.test(\"'first_name' attribute is Customer's firstname\", () => {",
																	"    pm.expect(respJson.first_name).to.eql(environment.CUSTOMER_FIRST_NAME);",
																	"});",
																	"",
																	"pm.test(\"'last_name' attribute is Customer's lastname\", () => {",
																	"    pm.expect(respJson.last_name).to.eql(environment.CUSTOMER_LAST_NAME);",
																	"});",
																	"",
																	"pm.test(\"'phone_home' attribute exist\", () => {",
																	"    pm.expect(respJson.phone_home).to.exist || pm.expect(respJson.phone_mobile).to.exist;",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "{{BM_ACCESS_JWT}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"login\": \"{{CUSTOMER_EMDA_ID}}\",\n    \"client_id\": \"{{CLIENT_ID}}\"\n}"
														},
														"url": {
															"raw": "{{HOST}}/s/{{SITE}}/dw/shop/{{OCAPI_VERSION}}/customers/auth/trustedsystem",
															"host": [
																"{{HOST}}"
															],
															"path": [
																"s",
																"{{SITE}}",
																"dw",
																"shop",
																"{{OCAPI_VERSION}}",
																"customers",
																"auth",
																"trustedsystem"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "CREATE_BASKET",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test('Status code is 200', () =>  {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test('\"type\" is basket', () => {\r",
															"    pm.expect(responseJson._type).to.eql('basket');\r",
															"});\r",
															"\r",
															"pm.test('\"customer info\" is an object', () => {\r",
															"    pm.expect(responseJson.customer_info).to.be.an(\"object\");\r",
															"})\r",
															"\r",
															"pm.test('\"customer_id\" is correct', () => {\r",
															"    pm.expect(responseJson.customer_info.customer_id).eq(environment.CUSTOMER_ID);\r",
															"})\r",
															"\r",
															"pm.test('\"shipping items\" is an object', () => {\r",
															"    pm.expect(responseJson.shipping_items).to.be.an(\"array\");\r",
															"})\r",
															"\r",
															"pm.test('\"shipping total\" is null', () => {\r",
															"    pm.expect(responseJson.shipping_total).to.be.null;\r",
															"})\r",
															"\r",
															"pm.test('\"order total\" is null', () => {\r",
															"    pm.expect(responseJson.order_total).to.be.null;\r",
															"})\r",
															"\r",
															"if (pm.response.code === 200 || pm.response.code === 201) {\r",
															"    pm.environment.set('BASKET_ID', responseJson.basket_id);\r",
															"}\r",
															"\r",
															"if (pm.response.code === 400 && responseJson.fault && responseJson.fault.arguments.basketIds){\r",
															"    pm.environment.set('BASKET_ID', responseJson.fault.arguments.basketIds);\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({",
															"    url:`${environment.HOST}/s/Sites-${environment.SITE}-Site/dw/shop/${environment.OCAPI_VERSION}/baskets/${environment.BASKET_ID}`,",
															"    method:'DELETE',",
															"    header: {",
															"        'x-dw-client-id': `${environment.CLIENT_ID}`,",
															"        'Authorization': `${environment.JWT_TOKEN}`,",
															"    }",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "x-dw-client-id",
														"value": "{{CLIENT_ID}}",
														"type": "text"
													},
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "{{JWT_TOKEN}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"Sites-{{SITE}}-Site",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"baskets"
													]
												}
											},
											"response": []
										},
										{
											"name": "ADD_PRODUCT_ITEM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test('Status code is 200', () =>  {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test('\"customer id\" is correct', () => {\r",
															"    pm.expect(responseJson.customer_info.customer_id).eq(environment.CUSTOMER_ID);\r",
															"})\r",
															"\r",
															"pm.test('\"product id\" is correct', () => {\r",
															"    pm.expect(responseJson.product_items[0].product_id).eq(environment.PRODUCT_ID_25_TREAZURE_DISCOUNT);\r",
															"})\r",
															"\r",
															"pm.test('\"product total\" is not null', () => {\r",
															"    pm.expect(responseJson.product_total).not.to.be.null;\r",
															"});\r",
															"\r",
															"pm.environment.set('PRODUCT_ITEMS_PRICE_FIRST_PRODUCT', responseJson.product_items[0].price);\r",
															"\r",
															"if (pm.response.code === 200 || pm.response.code === 201) {\r",
															"    const item_id = responseJson.product_items \r",
															"        && responseJson.product_items.length\r",
															"        && responseJson.product_items[0].item_id;\r",
															"\r",
															"    if (item_id) {\r",
															"        pm.environment.set('ITEM_ID', item_id);\r",
															"    }\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{JWT_TOKEN}}",
														"type": "text"
													},
													{
														"key": "x-dw-client-id",
														"value": "{{CLIENT_ID}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[{\r\n    \"product_id\" : \"{{PRODUCT_ID_25_TREAZURE_DISCOUNT}}\",\r\n    \"quantity\" : 3.00\r\n}]"
												},
												"url": {
													"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/items",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"Sites-{{SITE}}-Site",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"baskets",
														"{{BASKET_ID}}",
														"items"
													]
												}
											},
											"response": []
										},
										{
											"name": "ADD_PRODUCT_ITEM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();\r",
															"\r",
															"pm.test('Status code is 200', () =>  {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test('\"customer id\" is correct', () => {\r",
															"    pm.expect(responseJson.customer_info.customer_id).eq(environment.CUSTOMER_ID);\r",
															"})\r",
															"\r",
															"pm.test('\"product id\" is correct', () => {\r",
															"    pm.expect(responseJson.product_items[1].product_id).eq(environment.PRODUCT_ID_3);\r",
															"})\r",
															"\r",
															"pm.test('\"product total\" is not null', () => {\r",
															"    pm.expect(responseJson.product_total).not.to.be.null;\r",
															"});\r",
															"\r",
															"pm.environment.set('PRODUCT_ITEMS_PRICE_SECOND_PRODUCT', responseJson.product_items[1].price);\r",
															"\r",
															"if (pm.response.code === 200 || pm.response.code === 201) {\r",
															"    const item_id = responseJson.product_items \r",
															"        && responseJson.product_items.length\r",
															"        && responseJson.product_items[0].item_id;\r",
															"\r",
															"    if (item_id) {\r",
															"        pm.environment.set('ITEM_ID', item_id);\r",
															"    }\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{JWT_TOKEN}}",
														"type": "text"
													},
													{
														"key": "x-dw-client-id",
														"value": "{{CLIENT_ID}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[{\r\n    \"product_id\" : \"{{PRODUCT_ID_3}}\",\r\n    \"quantity\" : 3.00\r\n}]"
												},
												"url": {
													"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/items",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"Sites-{{SITE}}-Site",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"baskets",
														"{{BASKET_ID}}",
														"items"
													]
												}
											},
											"response": []
										},
										{
											"name": "ADD_SHIPMENT_BILLING",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test('Status code is 200', () =>  {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test('\"first_name\" in billing address is correct', () => {",
															"    pm.expect(responseJson.billing_address.first_name).eq(environment.CUSTOMER_FIRST_NAME);",
															"});",
															"",
															"pm.test('\"last_name\" in billing address is correct', () => {",
															"    pm.expect(responseJson.billing_address.last_name).eq(environment.CUSTOMER_LAST_NAME);",
															"});",
															"",
															"pm.test('\"city\" in billing address is correct', () => {",
															"    pm.expect(responseJson.billing_address.city).eq(environment.CUSTOMER_CITY);",
															"});",
															"",
															"pm.test('\"phone\" in billing address is correct', () => {",
															"    pm.expect(responseJson.billing_address.phone).eq(environment.CUSTOMER_PHONE);",
															"});",
															"",
															"pm.test('\"c_houseNr\" in billing address is correct', () => {",
															"    pm.expect(responseJson.billing_address.c_houseNr).eq(environment.CUSTOMER_HOUSE_NR);",
															"});",
															"",
															"pm.test('\"c_email\" in billing address is correct', () => {",
															"    pm.expect(responseJson.customer_info.email).eq(environment.CUSTOMER_EMAIL);",
															"});",
															"",
															"pm.test('\"first_name\" in shipping address is correct', () => {",
															"    pm.expect(responseJson.shipments[0].shipping_address.first_name).eq(environment.CUSTOMER_FIRST_NAME);",
															"});",
															"",
															"pm.test('\"last_name\" in shipping address is correct', () => {",
															"    pm.expect(responseJson.shipments[0].shipping_address.last_name).eq(environment.CUSTOMER_LAST_NAME);",
															"});",
															"",
															"pm.test('\"city\" in shipping address is correct', () => {",
															"    pm.expect(responseJson.shipments[0].shipping_address.city).eq(environment.CUSTOMER_CITY);",
															"});",
															"",
															"pm.test('\"phone\" in shipping address is correct', () => {",
															"    pm.expect(responseJson.shipments[0].shipping_address.phone).eq(environment.CUSTOMER_PHONE);",
															"});",
															"",
															"pm.test('\"c_houseNr\" in shipping address is correct', () => {",
															"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNr).eq(environment.CUSTOMER_HOUSE_NR);",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "{{JWT_TOKEN}}",
														"type": "text"
													},
													{
														"key": "x-dw-client-id",
														"value": "{{CLIENT_ID}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"shipping_method\":\r\n  {\r\n    \"id\":\"standard\"\r\n  },\r\n  \"shipping_address\" :\r\n  {\r\n    \"first_name\":\"{{CUSTOMER_FIRST_NAME}}\",\r\n    \"last_name\":\"{{CUSTOMER_LAST_NAME}}\",\r\n    \"address1\": \"Test\",\r\n    \"city\":\"{{CUSTOMER_CITY}}\",\r\n    \"postal_code\": \"{{POSTAL_CODE}}\",\r\n    \"country_code\":\"{{COUNTRY_CODE}}\",\r\n    \"phone\": \"{{CUSTOMER_PHONE}}\",\r\n    \"c_houseNr\": \"{{CUSTOMER_HOUSE_NR}}\",\r\n    \"c_houseNrAdditional\": \"{{CUSTOMER_HOME_NR_ADDITIONAL}}\"\r\n   },\r\n  \"c_email\": \"{{CUSTOMER_EMAIL}}\"\r\n}"
												},
												"url": {
													"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/shipments/me",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"Sites-{{SITE}}-Site",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"baskets",
														"{{BASKET_ID}}",
														"shipments",
														"me"
													]
												}
											},
											"response": []
										},
										{
											"name": "ADD_PAYMENT",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test('Status code is 200', () =>  {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test('\"payment_method_id\" is Adyen', () => {",
															"    pm.expect(responseJson.payment_instruments[0].payment_method_id).eq(environment.PAYMENT_METHOD_ADYEN);",
															"})",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{JWT_TOKEN}}",
														"type": "text"
													},
													{
														"key": "x-dw-client-id",
														"value": "{{CLIENT_ID}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"amount\": 30,\r\n  \"payment_method_id\" : \"{{PAYMENT_METHOD_ADYEN}}\"\r\n}"
												},
												"url": {
													"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/payment_instruments",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"Sites-{{SITE}}-Site",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"baskets",
														"{{BASKET_ID}}",
														"payment_instruments"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET_EXISTING_BASKET",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test('Status code is 200', () =>  {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"try {",
															"    const DISCOUNT1 = responseJson.product_items[0].price_adjustments[0].price;",
															"    const DISCOUNT2 = responseJson.product_items[0].price_adjustments[1].price;",
															"    const DISCOUNT3 = responseJson.product_items[1].price_adjustments[0].price;",
															"    pm.test('\"order total\" is correct when Treazure is enable', () => {",
															"    pm.expect(responseJson.order_total).eq(environment.PRODUCT_ITEMS_PRICE_FIRST_PRODUCT + environment.PRODUCT_ITEMS_PRICE_SECOND_PRODUCT + DISCOUNT1 + DISCOUNT2 + DISCOUNT3)",
															"    })",
															"} catch(error){",
															"    pm.test('\"order total\" is correct when Treazure is disable', () => {",
															"        pm.expect(responseJson.order_total).eq(environment.PRODUCT_ITEMS_PRICE)",
															"    })",
															"}",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "x-dw-client-id",
														"value": "{{CLIENT_ID}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{JWT_TOKEN}}",
														"type": "text"
													},
													{
														"key": "Origin",
														"value": "{{REQ_ORIGIN}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"Sites-{{SITE}}-Site",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"baskets",
														"{{BASKET_ID}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "BACK_IN_STOCK",
							"item": [
								{
									"name": "LOGIN",
									"item": [
										{
											"name": "LOGIN_MYETOS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {",
															"    var respJson = pm.response.json();",
															"    pm.environment.set('LOGIN_JWT', respJson['token_type'] + ' ' + respJson['access_token']);",
															"    pm.environment.set('LOGIN_REFRESH_JWT', respJson['refresh_token']);",
															"};",
															"",
															"pm.test(\"'access_token' attribute exist\", () => {",
															"    pm.expect(respJson.access_token).exist;",
															"});",
															"",
															"pm.test(\"'token_type' attribute exist\", () => {",
															"    pm.expect(respJson.token_type).exist;",
															"});",
															"",
															"pm.test(\"'refresh_token' attribute exist\", () => {",
															"    pm.expect(respJson.refresh_token).exist;",
															"});",
															"",
															"pm.test(\"'expires_in' attribute exist\", () => {",
															"    pm.expect(respJson.expires_in).exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{LOGIN_SERVICE_CLIENT_ID}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{LOGIN_SERVICE_CLIENT_SECRET}}",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{CUSTOMER_EMAIL}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{CUSTOMER_PASSWORD}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://beta-api.ah.nl/secure/oauth/token",
													"protocol": "https",
													"host": [
														"beta-api",
														"ah",
														"nl"
													],
													"path": [
														"secure",
														"oauth",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET_EXTERNAL_CUSTOMER_ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {\r",
															"    var respJson = pm.response.json();\r",
															"    pm.environment.set('CUSTOMER_EMDA_ID', respJson.id);\r",
															"};\r",
															"\r",
															"pm.test(\"'id' attribute is Customer's id\", () => {\r",
															"    pm.expect((respJson.id).toString()).to.eql(environment.CUSTOMER_EXTERNAL_ID);\r",
															"});\r",
															"\r",
															"pm.test(\"'emailAddress' attribute is Customer's email\", () => {\r",
															"    pm.expect(respJson.emailAddress).to.eql(environment.CUSTOMER_EMAIL);\r",
															"});\r",
															"\r",
															"pm.test(\"'externalId' attribute exist\", () => {\r",
															"    pm.expect(respJson._embedded.externalids._embedded.items[0].externalId).exist;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{LOGIN_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "https://beta-api.ah.nl/member-service/v1/members",
													"protocol": "https",
													"host": [
														"beta-api",
														"ah",
														"nl"
													],
													"path": [
														"member-service",
														"v1",
														"members"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET_TOKEN_SFCC",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {",
															"    var respJson = pm.response.json();",
															"    pm.environment.set('BM_ACCESS_JWT', respJson['token_type'] + ' ' + respJson['access_token']);",
															"};",
															"",
															"pm.test(\"'access_token' attribute exist\", () => {",
															"    pm.expect(respJson.access_token).exist;",
															"});",
															"",
															"pm.test(\"'token_type' attribute is Bearer\", () => {",
															"    pm.expect(respJson.token_type).to.eql(\"Bearer\");",
															"});",
															"",
															"pm.test(\"'expires_in' attribute exist\", () => {",
															"    pm.expect(respJson.expires_in).exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{CLIENT_SECRET}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{CLIENT_ID}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://account.demandware.com/dw/oauth2/access_token",
													"protocol": "https",
													"host": [
														"account",
														"demandware",
														"com"
													],
													"path": [
														"dw",
														"oauth2",
														"access_token"
													]
												}
											},
											"response": []
										},
										{
											"name": "LOGIN_SFCC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {",
															"    var respJson = pm.response.json();",
															"    pm.environment.set(\"JWT_TOKEN\", postman.getResponseHeader(\"Authorization\"));",
															"    pm.environment.set('CUSTOMER_NO', respJson['customer_no']);",
															"    pm.environment.set('CUSTOMER_ID', respJson['customer_id']);",
															"};",
															"",
															"pm.test(\"'customer_id' attribute exist\", () => {",
															"    pm.expect(respJson.customer_id).exist;",
															"});",
															"",
															"pm.test(\"'customer_no' attribute is Customer's number\", () => {",
															"    pm.expect(respJson.customer_no).to.eql(environment.CUSTOMER_NO);",
															"});",
															"",
															"pm.test(\"'email' attribute is Customer's email\", () => {",
															"    pm.expect(respJson.email).to.eql(environment.CUSTOMER_EMAIL);",
															"});",
															"",
															"pm.test(\"'first_name' attribute is Customer's firstname\", () => {",
															"    pm.expect(respJson.first_name).to.eql(environment.CUSTOMER_FIRST_NAME);",
															"});",
															"",
															"pm.test(\"'last_name' attribute is Customer's lastname\", () => {",
															"    pm.expect(respJson.last_name).to.eql(environment.CUSTOMER_LAST_NAME);",
															"});",
															"",
															"pm.test(\"'phone_home' attribute exist\", () => {",
															"    pm.expect(respJson.phone_home).to.exist || pm.expect(respJson.phone_mobile).to.exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{BM_ACCESS_JWT}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"login\": \"{{CUSTOMER_EMDA_ID}}\",\n    \"client_id\": \"{{CLIENT_ID}}\"\n}"
												},
												"url": {
													"raw": "{{HOST}}/s/{{SITE}}/dw/shop/{{OCAPI_VERSION}}/customers/auth/trustedsystem",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"{{SITE}}",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"customers",
														"auth",
														"trustedsystem"
													]
												}
											},
											"response": []
										},
										{
											"name": "CSRF-Generate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {\r",
															"    var res = pm.response.json();\r",
															"    var csrf_token = res.csrf && res.csrf.token\r",
															"    pm.environment.set('CSRF_TOKEN', csrf_token);\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "Etos2020",
															"type": "string"
														},
														{
															"key": "username",
															"value": "Storefront",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{JWT_TOKEN}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/CSRF-Generate",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"on",
														"demandware.store",
														"Sites-{{SITE}}-Site",
														"{{LOCALE}}",
														"CSRF-Generate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "BackInStock-Register",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const  jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Success message is displayed\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"Gelukt! Als dit product er weer is sturen we je een e-mail.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "Etos2020",
													"type": "string"
												},
												{
													"key": "username",
													"value": "Storefront",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "{{CUSTOMER_EMAIL}}",
													"type": "text"
												},
												{
													"key": "productId",
													"value": "{{PRODUCT_ID}}",
													"type": "text"
												},
												{
													"key": "csrf_token",
													"value": "{{CSRF_TOKEN}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/BackInStock-Register",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"on",
												"demandware.store",
												"Sites-{{SITE}}-Site",
												"{{LOCALE}}",
												"BackInStock-Register"
											]
										}
									},
									"response": []
								},
								{
									"name": "BackInStock-Register_missing_product",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const  jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is displayed\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"Helaas er ging iets mis, probeer het nogmaals.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "Etos2020",
													"type": "string"
												},
												{
													"key": "username",
													"value": "Storefront",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "{{CUSTOMER_EMAIL}}",
													"type": "text"
												},
												{
													"key": "productId",
													"value": "",
													"type": "text"
												},
												{
													"key": "csrf_token",
													"value": "{{CSRF_TOKEN}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/BackInStock-Register",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"on",
												"demandware.store",
												"Sites-{{SITE}}-Site",
												"{{LOCALE}}",
												"BackInStock-Register"
											]
										}
									},
									"response": []
								},
								{
									"name": "BackInStock-Register_missing_email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const  jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is displayed\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"Helaas er ging iets mis, probeer het nogmaals.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "Etos2020",
													"type": "string"
												},
												{
													"key": "username",
													"value": "Storefront",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "",
													"type": "text"
												},
												{
													"key": "productId",
													"value": "{{PRODUCT_ID}}",
													"type": "text"
												},
												{
													"key": "csrf_token",
													"value": "{{CSRF_TOKEN}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/BackInStock-Register",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"on",
												"demandware.store",
												"Sites-{{SITE}}-Site",
												"{{LOCALE}}",
												"BackInStock-Register"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "TEST_CASES",
					"item": [
						{
							"name": "PRODUCT_REQUESTS",
							"item": [
								{
									"name": "GET_MISSING_PRODUCT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 404', () => {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test('\"ProductNotFoundException\" exception is raised', () => {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.fault.type).to.eql('ProductNotFoundException');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID}}_missing_product",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID}}_missing_product"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_VARIATION_PRODUCT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Product ID is correct', () => {",
													"    const responseJson = pm.response.json();",
													"    const variationProductId = pm.environment.get('VARIATION_PRODUCT_ID');",
													"    pm.expect(responseJson.id).to.eql(variationProductId);",
													"});",
													"",
													"pm.test('\"c_productVariants\" attribute is valid', () => {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson).to.have.nested.property('c_productVariants[0].variationAttrId');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{VARIATION_PRODUCT_ID}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{VARIATION_PRODUCT_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEARCH_PRODUCTS_NO_RESULTS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('\"count\" attribute is equal to 0', () => {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.count).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/product_search?q=QWERTY123",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"product_search"
											],
											"query": [
												{
													"key": "q",
													"value": "QWERTY123"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Product ID is correct', () => {",
													"    pm.expect(responseJson.id).to.eql(environment.PRODUCT_ID_4);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_4}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_4}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_110322369",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_medicineConsumerSalesCondition' exists\", () => {",
													"    pm.expect(responseJson.c_medicineConsumerSalesCondition).exist;",
													"});",
													"",
													"pm.test(\"'c_medicineRegistrationCode' attribute exist\", () => {",
													"    pm.expect(responseJson.c_medicineRegistrationCode).exist;",
													"});",
													"",
													"pm.test(\"'c_productLegalNaming' exist\", () => {",
													"    pm.expect(responseJson.c_productLegalNaming).exist;",
													"});",
													"",
													"pm.test(\"'c_compulsoryAdditiveLabelInformation' exist\", () => {",
													"    pm.expect(responseJson.c_compulsoryAdditiveLabelInformation).exist;",
													"});",
													"",
													"pm.test(\"'c_indication' exist\", () => {",
													"    pm.expect(responseJson.c_indication).exist;",
													"});",
													"",
													"pm.test(\"'c_packageContents' exist\", () => {",
													"    pm.expect(responseJson.c_packageContents).exist;",
													"});",
													"",
													"pm.test(\"'c_nonFoodIngredientStatement' exist\", () => {",
													"    pm.expect(responseJson.c_nonFoodIngredientStatement).exist;",
													"});",
													"",
													"pm.test(\"'c_productDosage' exist\", () => {",
													"    pm.expect(responseJson.c_productDosage).exist;",
													"});",
													"",
													"pm.test(\"'c_usageAgeIndication' exist\", () => {",
													"    pm.expect(responseJson.c_usageAgeIndication).exist;",
													"});",
													"",
													"pm.test(\"'c_usageDuringBreastfeeding' exist\", () => {",
													"    pm.expect(responseJson.c_usageDuringBreastfeeding).exist;",
													"});",
													"",
													"pm.test(\"'c_preparationInstructions' exist\", () => {",
													"    pm.expect(responseJson.c_preparationInstructions).exist;",
													"});",
													"",
													"pm.test(\"'c_consumerUsageStorageInstructionsBySupplier' exist\", () => {",
													"    pm.expect(responseJson.c_consumerUsageStorageInstructionsBySupplier).exist;",
													"});",
													"",
													"pm.test(\"'c_drugSideEffectsAndWarnings' exist\", () => {",
													"    pm.expect(responseJson.c_drugSideEffectsAndWarnings).exist;",
													"});",
													"",
													"pm.test(\"'c_visitDoctorWhen' exist\", () => {",
													"    pm.expect(responseJson.c_visitDoctorWhen).exist;",
													"});",
													"",
													"pm.test(\"'c_usageDuringPregnancy' exist\", () => {",
													"    pm.expect(responseJson.c_usageDuringPregnancy).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_8}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_8}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120580011",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_productContactName' exist\", () => {",
													"    pm.expect(responseJson.c_productContactName).exist;",
													"});",
													"",
													"pm.test(\"'c_productContactAddress' exist\", () => {",
													"    pm.expect(responseJson.c_productContactAddress).exist;",
													"});",
													"",
													"pm.test(\"'c_productContactPhone' exist\", () => {",
													"    pm.expect(responseJson.c_productContactPhone).exist;",
													"});",
													"",
													"pm.test(\"'c_productContactWebsite' exist\", () => {",
													"    pm.expect(responseJson.c_productContactWebsite).exist;",
													"});",
													"",
													"pm.test(\"'c_productContactEmail' exist\", () => {",
													"    pm.expect(responseJson.c_productContactEmail).exist;",
													"});",
													"",
													"pm.test(\"'c_compulsoryAdditiveLabelInformation' exist\", () => {",
													"    pm.expect(responseJson.c_compulsoryAdditiveLabelInformation).exist;",
													"});",
													"",
													"pm.test(\"'c_productIngredients' exist\", () => {",
													"    pm.expect(responseJson.c_productIngredients).exist;",
													"});",
													"",
													"pm.test(\"'c_compulsoryAdditiveLabelInformation' exist\", () => {",
													"    pm.expect(responseJson.c_compulsoryAdditiveLabelInformation).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_9}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_9}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_111198806",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('\"c_productImages\" exists', () => {",
													"    pm.expect(responseJson.c_productImages).exist;",
													"});",
													"",
													"pm.test(\"'ean' exist\", () => {",
													"    pm.expect(responseJson.ean).exist;",
													"});",
													"",
													"pm.test(\"'name' exist\", () => {",
													"    pm.expect(responseJson.name).exist;",
													"});",
													"",
													"pm.test(\"'c_packageContents' exist\", () => {",
													"    pm.expect(responseJson.c_packageContents).exist;",
													"});",
													"",
													"pm.test(\"'c_maxOrderQuantity' exist\", () => {",
													"    pm.expect(responseJson.c_maxOrderQuantity).exist;",
													"});",
													"",
													"pm.test(\"'c_maxLimitMessage' exist\", () => {",
													"    pm.expect(responseJson.c_maxLimitMessage).exist;",
													"});",
													"",
													"pm.test(\"'c_readyToOrder' exist\", () => {",
													"    pm.expect(responseJson.c_readyToOrder).exist;",
													"});",
													"",
													"pm.test(\"'c_productSubstance' exist\", () => {",
													"    pm.expect(responseJson.c_productSubstance).exist;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_9}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_9}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120522436",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_extraLabelContentAssetID' exist\", () => {",
													"    pm.expect(responseJson.c_extraLabelContentAssetID).exist;",
													"});",
													"pm.test(\"'c_available' attribute exist\", () => {",
													"    pm.expect(responseJson.c_available).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_12}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_12}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120564054",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_advicePrice' exist\", () => {",
													"    pm.expect(responseJson.c_advicePrice).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_13}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_13}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120336289",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_batteryWeight' exist\", () => {",
													"    pm.expect(responseJson.c_batteryWeight).exist;",
													"});",
													"",
													"pm.test(\"'c_areBatteriesIncluded' exist\", () => {",
													"    pm.expect(responseJson.c_areBatteriesIncluded).exist;",
													"});",
													"",
													"pm.test(\"'c_quantityOfBatteriesRequired' exist\", () => {",
													"    pm.expect(responseJson.c_quantityOfBatteriesRequired).exist;",
													"});",
													"",
													"pm.test(\"'c_batteryTypeCode'exist\", () => {",
													"    pm.expect(responseJson.c_batteryTypeCode).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_14}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_14}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_112132438",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_allergenContains' exist\", () => {",
													"    pm.expect(responseJson.c_allergenContains).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_15}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_15}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120370701",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_allergenFreeFrom' exist\", () => {",
													"    pm.expect(responseJson.c_allergenFreeFrom).exist;",
													"});",
													"",
													"pm.test(\"'c_nutrientInfo' exist\", () => {",
													"    pm.expect(responseJson.c_nutrientInfo).exist;",
													"});",
													"",
													"pm.test(\"'c_longDescription' exist\", () => {",
													"     pm.expect(responseJson.c_longDescription).exist;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_16}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_16}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120066557",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_productSubstanceApplForm' attribute exist\", () => {",
													"    pm.expect(responseJson.c_productSubstanceApplForm).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_19}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_19}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120587230",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_howToUse' attribute exist\", () => {",
													"    pm.expect(responseJson.c_howToUse).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_20}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_20}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120575028",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_areBatteriesRequired' exist\", () => {",
													"    pm.expect(responseJson.c_areBatteriesRequired).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_21}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_21}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120545144",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_gHSSignalWordsCodeName' attribute exist\", () => {",
													"    pm.expect(responseJson.c_gHSSignalWordsCodeName).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_22}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_22}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_110300012",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_hazardStatementsCodeName' exist\", () => {",
													"    pm.expect(responseJson.c_hazardStatementsCodeName).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_23}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_23}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120561507",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_precautionaryStatementsCodeName' exist\", () => {",
													"    pm.expect(responseJson.c_precautionaryStatementsCodeName).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_24}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_24}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_WITH_NONPROMOBADGE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"const nonPromoBadgeName = \"Dermacare\";",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Product ID is correct', () => {",
													"    pm.expect(responseJson.id).to.eql(environment.PRODUCT_ID_5);",
													"});",
													"",
													"pm.test(\"'packageContents' attribute exist\", () => {",
													"    pm.expect(responseJson.c_packageContents).exist;",
													"});",
													"",
													"pm.test(\"'productSubstance' attribute exist\", () => {",
													"    pm.expect(responseJson.c_productSubstance).exist;",
													"});",
													"",
													"pm.test(\"'price' attribute exist\", () => {",
													"    pm.expect(responseJson.c_price.sales.value).exist;",
													"});",
													"",
													"pm.test(\"'nonPromoBadge' attribute exist\", () => {",
													"    pm.expect(responseJson.c_nonPromoBadge).exist;",
													"});",
													"",
													"pm.test(\"'nonPromoBadge' attribute is Dermacare\", () => {",
													"    pm.expect(responseJson.c_nonPromoBadge).is.eql(nonPromoBadgeName);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_5}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_5}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SEARCH_SUGGESTION",
							"item": [
								{
									"name": "GET_SEARCH_SUGGESTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Search suggestions returned successfully\", () => {\r",
													"    pm.expect(responseJson.query).to.eql(environment.SEARCH_SUGGESTION_QUERY_CUSTOM);\r",
													"});\r",
													"\r",
													"pm.test(\"Brand suggestion exists\", () => {\r",
													"    pm.expect(responseJson.brand_suggestions).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Brand suggestion has values returned\", () => {\r",
													"    pm.expect((responseJson.brand_suggestions.brands).length).is.not.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Category suggestion exists\", () => {\r",
													"    pm.expect(responseJson.category_suggestions).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Category suggestion has values returned\", () => {\r",
													"    pm.expect((responseJson.category_suggestions.categories).length).is.not.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Content suggestion exists\", () => {\r",
													"    pm.expect(responseJson.content_suggestions).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Content suggestion has values returned\", () => {\r",
													"    pm.expect((responseJson.content_suggestions.content).length).is.not.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Custom suggestion exists\", () => {\r",
													"    pm.expect(responseJson.custom_suggestions).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Custom suggestion has values returned\", () => {\r",
													"    pm.expect((responseJson.custom_suggestions.custom_suggestions).length).is.not.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Product suggestion exists\", () => {\r",
													"    pm.expect(responseJson.product_suggestions).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Product suggestion has values returned\", () => {\r",
													"    pm.expect((responseJson.product_suggestions.products).length).is.not.null;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/search_suggestion?q={{SEARCH_SUGGESTION_QUERY_CUSTOM}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"search_suggestion"
											],
											"query": [
												{
													"key": "q",
													"value": "{{SEARCH_SUGGESTION_QUERY_CUSTOM}}",
													"description": "man/Luislashlui"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_SEARCH_SUGGESTION_CHARS<3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 400', () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Search character size violation\", () => {\r",
													"    pm.expect(pm.response.text()).to.include(\"StringConstraintViolationException\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/search_suggestion?q={{SEARCH_SUGGESTION_QUERY_<3CHARS}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"search_suggestion"
											],
											"query": [
												{
													"key": "q",
													"value": "{{SEARCH_SUGGESTION_QUERY_<3CHARS}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_SEARCH_SUGGESTION_CHARS>50",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 400', () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Search character size violation\", () => {\r",
													"    pm.expect(pm.response.text()).to.include(\"StringConstraintViolationException\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/search_suggestion?q={{SEARCH_SUGGESTION_QUERY_>50CHARS}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"search_suggestion"
											],
											"query": [
												{
													"key": "q",
													"value": "{{SEARCH_SUGGESTION_QUERY_>50CHARS}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_SEARCH_SUGGESTION_PRODUCT_ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Product suggestion exists\", () => {\r",
													"    pm.expect(responseJson.product_suggestions).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Product suggestion has values returned\", () => {\r",
													"    pm.expect((responseJson.product_suggestions.products).length).is.not.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Suggestion returned for the ProductId\", () => {\r",
													"    pm.expect(responseJson.product_suggestions.products[0].product_id).to.eql(environment.SEARCH_SUGGESTION_QUERY_PRODUCT_ID)\r",
													"});\r",
													"\r",
													"pm.test(\"Product link returned in suggestion\", () => {\r",
													"    pm.expect(responseJson.product_suggestions.products.link).to.eql(environment.SEARCH_SUGGESTION_QUERY_PRODUCT_LINK)\r",
													"});\r",
													"\r",
													"pm.test(\"Product name returned in suggestion\", () => {\r",
													"    pm.expect(responseJson.product_suggestions.products.product_name).to.eql(environment.SEARCH_SUGGESTION_QUERY_PRODUCT_NAME)\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/search_suggestion?q={{SEARCH_SUGGESTION_QUERY_PRODUCT_ID}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"search_suggestion"
											],
											"query": [
												{
													"key": "q",
													"value": "{{SEARCH_SUGGESTION_QUERY_PRODUCT_ID}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SEARCH_PRODUCTS",
							"item": [
								{
									"name": "PRODUCTS_SEARCH_QUERY_1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('\"count\" property is more than 0', () => {\r",
													"    pm.expect(responseJson.count).to.not.eql(0);\r",
													"});\r",
													"\r",
													"pm.test('\"product_name\" property exists for each hit', () => {\r",
													"    const hitWithoutName = responseJson.hits.find(hit => !hit.product_name);\r",
													"    pm.expect(hitWithoutName).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test('\"c_productImages\" property exists for each hit', () => {\r",
													"    const hitWithImages = responseJson.hits.find(hit => hit.c_productImages === undefined);\r",
													"    pm.expect(hitWithImages).to.be.an('undefined', 'Could not find the property');\r",
													"});\r",
													"\r",
													"pm.test('\"c_packageContents\" property exists for hit', () => {\r",
													"    const hitWithPackageContent = responseJson.hits.find(hit => hit.c_packageContents !== undefined);\r",
													"    pm.expect(hitWithPackageContent).to.be.an('object', 'Could not find the property');\r",
													"});\r",
													"\r",
													"pm.test('\"c_applicablePromos\" property exists for hit', () => {\r",
													"    const hitWithPromos = responseJson.hits.find(hit => hit.c_applicablePromos !== undefined);\r",
													"    pm.expect(hitWithPromos).to.be.an('object', 'Could not find the property');\r",
													"});\r",
													"\r",
													"pm.test('\"c_promoBadgeFontColor\" property exists for hit', () => {\r",
													"    const hitWithPromoBadgeFontColor = responseJson.hits.find(hit => hit.c_promoBadgeFontColor !== undefined);\r",
													"    pm.expect(hitWithPromoBadgeFontColor).to.be.an('object', 'Could not find the property');\r",
													"});\r",
													"\r",
													"pm.test('\"c_promoBadgeColor\" and \"c_applicablePromos\" properties are occured the same number of time for hits', () => {\r",
													"    const hitWithMismatchProperties = responseJson.hits.find(\r",
													"        hit => hit.c_promoBadgeColor !== undefined && hit.c_applicablePromos === undefined\r",
													"        || !hit.c_promoBadgeColor === undefined && hit.c_applicablePromos !== undefined\r",
													"    );\r",
													"    pm.expect(hitWithMismatchProperties).to.be.an('undefined', 'Mismatch has been found');\r",
													"});\r",
													"\r",
													"pm.test('\"c_maxOrderQuantity\" property exists for each hit', () => {\r",
													"    const hitWithMaxOrderQuantity = responseJson.hits.find(hit => hit.c_maxOrderQuantity === undefined);\r",
													"    pm.expect(hitWithMaxOrderQuantity).to.be.an('undefined', 'Could not find the property');\r",
													"});\r",
													"\r",
													"pm.test('\"c_maxLimitMessage\" property exists for each hit', () => {\r",
													"    const hitWithMaxLimitMessage = responseJson.hits.find(hit => hit.c_maxLimitMessage === undefined);\r",
													"    pm.expect(hitWithMaxLimitMessage).to.be.an('undefined', 'Could not find the property');\r",
													"});\r",
													"pm.test('\"c_readyToOrder\" property exists for each hit', () => {\r",
													"    const hitWithReadyToOrder = responseJson.hits.find(hit => hit.c_readyToOrder === undefined);\r",
													"    pm.expect(hitWithReadyToOrder).to.be.an('undefined', 'Could not find the property');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/product_search?q=Etos",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"product_search"
											],
											"query": [
												{
													"key": "q",
													"value": "Etos"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PRODUCTS_SEARCH_QUERY_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"'count' property is more than 0\", () => {\r",
													"    pm.expect(responseJson.count).to.not.eql(0);\r",
													"});\r",
													"\r",
													"pm.test('\"product_name\" property exists for each hit', () => {\r",
													"    const hitWithoutName = responseJson.hits.find(hit => !hit.product_name);\r",
													"    pm.expect(hitWithoutName).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test('\"c_extraLabelContentAssetID\" property exists for hit', () => {\r",
													"    const hitWithExtraLabelContentAsset = responseJson.hits.find(\r",
													"        hit => hit.c_productVariants\r",
													"        && hit.c_productVariants[0]\r",
													"        && hit.c_productVariants[0].productVariants\r",
													"        && hit.c_productVariants[0].productVariants[0]\r",
													"        && hit.c_productVariants[0].productVariants[0].c_extraLabelContentAssetID !== undefined\r",
													"    );\r",
													"    pm.expect(hitWithExtraLabelContentAsset).to.be.an('object', 'Could not find the property');\r",
													"});\r",
													"\r",
													"pm.test('\"c_productSubstance\" property exists for each hit', () => {\r",
													"    const hitWithSubstance = responseJson.hits.find(hit => hit.c_productSubstance === undefined);\r",
													"    pm.expect(hitWithSubstance).to.be.an('undefined', 'Could not find the property');\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/product_search?q=Bioderma",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"product_search"
											],
											"query": [
												{
													"key": "q",
													"value": "Bioderma"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PRODUCTS_SEARCH_QUERY_3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('\"count\" property is more than 0', () => {\r",
													"    pm.expect(responseJson.count).to.not.eql(0);\r",
													"});\r",
													"\r",
													"pm.test('\"product_name\" property exists for each hit', () => {\r",
													"    const hitWithoutName = responseJson.hits.find(hit => !hit.product_name);\r",
													"    pm.expect(hitWithoutName).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test('\"c_badges\" property exists for each hit', () => {\r",
													"    const hitWithBadges = responseJson.hits.find(hit => hit.c_badges === undefined);\r",
													"    pm.expect(hitWithBadges).to.be.an('undefined', 'Could not find the property');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/product_search?q=La Roche-Posay Cicaplast Balsem",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"product_search"
											],
											"query": [
												{
													"key": "q",
													"value": "La Roche-Posay Cicaplast Balsem"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PLP_CATEGORY",
							"item": [
								{
									"name": "GET_CATEGORY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('\"categories\" length is not 0', () => {",
													"    pm.expect(responseJson.categories.length).to.not.eql(0);",
													"});",
													"",
													"pm.test('categories name is \"Beauty\"', () => {",
													"    pm.expect(responseJson.name).equal('Beauty');",
													"});",
													"",
													"pm.test('\"c_tileIcon\" contains the ulr', () => {",
													"    pm.expect(responseJson.c_tileIcon).contain('https:')",
													"});",
													"",
													"pm.test('\"image\" contains the ulr', () => {",
													"    pm.expect(responseJson.image).contain('https:')",
													"});",
													"",
													"pm.test('\"page_description\" not empty', () => {",
													"    pm.expect(responseJson.page_description).not.empty",
													"});",
													"",
													"pm.test('\"page_title\" not empty', () => {",
													"    pm.expect(responseJson.page_title).not.empty",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/categories/{{CATEGORY_ID_1}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"categories",
												"{{CATEGORY_ID_1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_CATEGORY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('\"categories\" length is not 0', () => {",
													"    pm.expect(responseJson.categories.length).to.not.eql(0);",
													"});",
													"",
													"pm.test('categories name is \"Verzorging\"', () => {",
													"    pm.expect(responseJson.name).equal('Verzorging');",
													"});",
													"",
													"pm.test('\"image\" contains the ulr', () => {",
													"    pm.expect(responseJson.image).contain('https:')",
													"});",
													"",
													"pm.test('\"page_description\" not empty', () => {",
													"    pm.expect(responseJson.page_description).not.empty",
													"});",
													"",
													"pm.test('\"page_title\" not empty', () => {",
													"    pm.expect(responseJson.page_title).not.empty",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/categories/{{CATEGORY_ID_2}}?levels={{CATEGORY_NESTED_LEVEL_2}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"categories",
												"{{CATEGORY_ID_2}}"
											],
											"query": [
												{
													"key": "levels",
													"value": "{{CATEGORY_NESTED_LEVEL_2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_CATEGORY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('categories name is \"Gezondheid oud\"', () => {",
													"    pm.expect(responseJson.name).equal('Gezondheid oud');",
													"});",
													"",
													"pm.test('\"image\" contains the ulr', () => {",
													"    pm.expect(responseJson.image).contain('https:')",
													"});",
													"",
													"pm.test('\"page_description\" not empty', () => {",
													"    pm.expect(responseJson.page_description).not.empty",
													"});",
													"",
													"pm.test('\"page_title\" not empty', () => {",
													"    pm.expect(responseJson.page_title).not.empty",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/categories/{{CATEGORY_ID_3}}?levels={{CATEGORY_NESTED_LEVEL_3}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"categories",
												"{{CATEGORY_ID_3}}"
											],
											"query": [
												{
													"key": "levels",
													"value": "{{CATEGORY_NESTED_LEVEL_3}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_CATEGORY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 404', () => {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test('\"type\" is \"ResourcePathNotFoundException\"', () => {",
													"    pm.expect(responseJson.fault.type).equal('ResourcePathNotFoundException');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/categories/",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"categories",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_CATEGORIES",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('\"count\" is 2', () => {",
													"    pm.expect(responseJson.count).equal(2);",
													"});",
													"",
													"pm.test('\"total\" is 2', () => {",
													"    pm.expect(responseJson.total).equal(2);",
													"});",
													"",
													"pm.test('\"data\" length is not 0', () => {",
													"    pm.expect(responseJson.data.length).to.not.eql(0);",
													"});",
													"",
													"pm.test('categories name is \"Beauty\"', () => {",
													"    pm.expect(responseJson.data[0].name).equal('Beauty');",
													"});",
													"",
													"pm.test('categories name is \"Verzorging\"', () => {",
													"    pm.expect(responseJson.data[1].name).equal('Verzorging');",
													"});",
													"",
													"pm.test('\"c_tileIcon\" contains the ulr', () => {",
													"    pm.expect(responseJson.data[0].c_tileIcon).contain('https:')",
													"});",
													"",
													"pm.test('\"image\" contains the ulr', () => {",
													"    pm.expect(responseJson.data[0].image).contain('https:')",
													"});",
													"",
													"pm.test('\"image\" contains the ulr', () => {",
													"    pm.expect(responseJson.data[1].image).contain('https:')",
													"});",
													"",
													"pm.test('\"page_description\" not empty', () => {",
													"    pm.expect(responseJson.data[0].page_description).not.empty",
													"});",
													"",
													"pm.test('\"page_description\" not empty', () => {",
													"    pm.expect(responseJson.data[1].page_description).not.empty",
													"});",
													"",
													"pm.test('\"page_title\" not empty', () => {",
													"    pm.expect(responseJson.data[0].page_title).not.empty",
													"});",
													"",
													"pm.test('\"page_title\" not empty', () => {",
													"    pm.expect(responseJson.data[1].page_title).not.empty",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/categories/({{CATEGORY_ID_1}},{{CATEGORY_ID_2}})",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"categories",
												"({{CATEGORY_ID_1}},{{CATEGORY_ID_2}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_CATEGORIES",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('\"count\" is 2', () => {",
													"    pm.expect(responseJson.count).equal(3);",
													"});",
													"",
													"pm.test('\"total\" is 2', () => {",
													"    pm.expect(responseJson.total).equal(3);",
													"});",
													"",
													"pm.test('\"data\" length is not 0', () => {",
													"    pm.expect(responseJson.data.length).to.not.eql(0);",
													"});",
													"",
													"pm.test('categories name is \"Beauty\"', () => {",
													"    pm.expect(responseJson.data[0].name).equal('Beauty');",
													"});",
													"",
													"pm.test('categories name is \"Verzorging\"', () => {",
													"    pm.expect(responseJson.data[1].name).equal('Verzorging');",
													"});",
													"",
													"pm.test('categories name is \"Gezondheid oud\"', () => {",
													"    pm.expect(responseJson.data[2].name).equal('Gezondheid oud');",
													"});",
													"",
													"",
													"pm.test('\"c_tileIcon\" contains the ulr', () => {",
													"    pm.expect(responseJson.data[0].c_tileIcon).contain('https:')",
													"});",
													"",
													"pm.test('\"image\" contains the ulr', () => {",
													"    pm.expect(responseJson.data[0].image).contain('https:')",
													"});",
													"",
													"pm.test('\"image\" contains the ulr', () => {",
													"    pm.expect(responseJson.data[1].image).contain('https:')",
													"});",
													"",
													"pm.test('\"image\" contains the ulr', () => {",
													"    pm.expect(responseJson.data[2].image).contain('https:')",
													"});",
													"",
													"",
													"pm.test('\"page_description\" not empty', () => {",
													"    pm.expect(responseJson.data[0].page_description).not.empty",
													"});",
													"",
													"pm.test('\"page_description\" not empty', () => {",
													"    pm.expect(responseJson.data[1].page_description).not.empty",
													"});",
													"",
													"pm.test('\"page_description\" not empty', () => {",
													"    pm.expect(responseJson.data[2].page_description).not.empty",
													"});",
													"",
													"pm.test('\"page_title\" not empty', () => {",
													"    pm.expect(responseJson.data[0].page_title).not.empty",
													"});",
													"",
													"pm.test('\"page_title\" not empty', () => {",
													"    pm.expect(responseJson.data[1].page_title).not.empty",
													"});",
													"",
													"pm.test('\"page_title\" not empty', () => {",
													"    pm.expect(responseJson.data[2].page_title).not.empty",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/categories/({{CATEGORY_ID_1}},{{CATEGORY_ID_2}},{{CATEGORY_ID_3}})",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"categories",
												"({{CATEGORY_ID_1}},{{CATEGORY_ID_2}},{{CATEGORY_ID_3}})"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "CONTENTS",
			"item": [
				{
					"name": "GET_CONTENT",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "default"
							},
							{
								"key": "Origin",
								"value": "{{REQ_ORIGIN}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/content/{{CONTENT_ID_1}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"content",
								"{{CONTENT_ID_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_CONTENTS",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "default"
							},
							{
								"key": "Origin",
								"value": "{{REQ_ORIGIN}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/content/({{CONTENT_ID_1}},{{CONTENT_ID_2}},{{CONTENT_ID_3}})",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"content",
								"({{CONTENT_ID_1}},{{CONTENT_ID_2}},{{CONTENT_ID_3}})"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SEARCH_SUGGESTION",
			"item": [
				{
					"name": "GET_SEARCH_SUGGESTION",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "{{REQ_ORIGIN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/search_suggestion?q={{SEARCH_SUGGESTION_QUERY}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"search_suggestion"
							],
							"query": [
								{
									"key": "q",
									"value": "{{SEARCH_SUGGESTION_QUERY}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SFCC_CONTROLLERS",
			"item": [
				{
					"name": "CSRF-Generate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {\r",
									"    var res = pm.response.json();\r",
									"    var csrf_token = res.csrf && res.csrf.token\r",
									"    pm.environment.set('CSRF_TOKEN', csrf_token);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "Etos2020",
									"type": "string"
								},
								{
									"key": "username",
									"value": "Storefront",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/CSRF-Generate",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"on",
								"demandware.store",
								"Sites-{{SITE}}-Site",
								"{{LOCALE}}",
								"CSRF-Generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "ConsentTracking-SetSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {\r",
									"    var res = pm.response.json();\r",
									"    console.log(res)\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "{{REQ_ORIGIN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/on/demandware.store//Sites-{{SITE}}-Site/{{LOCALE}}/ConsentTracking-SetSession?consent=true",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"on",
								"demandware.store",
								"",
								"Sites-{{SITE}}-Site",
								"{{LOCALE}}",
								"ConsentTracking-SetSession"
							],
							"query": [
								{
									"key": "consent",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BackInStock-Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {\r",
									"    var res = pm.response.json();\r",
									"    console.log(res)\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "Etos2020",
									"type": "string"
								},
								{
									"key": "username",
									"value": "Storefront",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "{{CUSTOMER_EMAIL}}",
									"type": "text"
								},
								{
									"key": "productId",
									"value": "{{PRODUCT_ID}}",
									"type": "text"
								},
								{
									"key": "csrf_token",
									"value": "{{CSRF_TOKEN}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/BackInStock-Register",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"on",
								"demandware.store",
								"Sites-{{SITE}}-Site",
								"{{LOCALE}}",
								"BackInStock-Register"
							]
						}
					},
					"response": []
				},
				{
					"name": "ContentSlot-GetById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {\r",
									"    var res = pm.response.json();\r",
									"    console.log(res)\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/ContentSlot-GetById?contentSlotId=slotName",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"on",
								"demandware.store",
								"Sites-{{SITE}}-Site",
								"{{LOCALE}}",
								"ContentSlot-GetById"
							],
							"query": [
								{
									"key": "contentSlotId",
									"value": "slotName"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PreviouslyBought-GetAll",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{STOREFRONT_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{STOREFRONT_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/PreviouslyBought-GetAll",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"on",
								"demandware.store",
								"Sites-{{SITE}}-Site",
								"{{LOCALE}}",
								"PreviouslyBought-GetAll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wishlist-GetListJson",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{STOREFRONT_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{STOREFRONT_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/Wishlist-GetListJson?mobileApp=true",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"on",
								"demandware.store",
								"Sites-{{SITE}}-Site",
								"{{LOCALE}}",
								"Wishlist-GetListJson"
							],
							"query": [
								{
									"key": "mobileApp",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Wishlist-AddProduct",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{STOREFRONT_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{STOREFRONT_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "pid",
									"value": "{{PRODUCT_ID}}",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/Wishlist-AddProduct?mobileApp=true",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"on",
								"demandware.store",
								"Sites-{{SITE}}-Site",
								"{{LOCALE}}",
								"Wishlist-AddProduct"
							],
							"query": [
								{
									"key": "mobileApp",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Wishlist-RemoveProduct",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{STOREFRONT_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{STOREFRONT_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "pid",
									"value": "{{PRODUCT_ID}}",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/Wishlist-RemoveProduct?mobileApp=true",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"on",
								"demandware.store",
								"Sites-{{SITE}}-Site",
								"{{LOCALE}}",
								"Wishlist-RemoveProduct"
							],
							"query": [
								{
									"key": "mobileApp",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "STORES",
			"item": [
				{
					"name": "GET_STORE",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/stores/{{STORE_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"stores",
								"{{STORE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_MULPTIPLE_STORES",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/stores/({{STORE_ID1}},{{STORE_ID2}},{{STORE_ID3}})",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"stores",
								"({{STORE_ID1}},{{STORE_ID2}},{{STORE_ID3}})"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_STORES",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/stores?latitude={{STORE_LATITUDE}}&longitude={{STORE_LONGITUDE}}&country_code={{COUNTRY_CODE}}&postal_code={{POSTAL_CODE}}&distance_unit={{DISTANCE_UNIT}}&max_distance={{MAX_DISTANCE}}&start={{START}}&count={{COUNT}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"stores"
							],
							"query": [
								{
									"key": "latitude",
									"value": "{{STORE_LATITUDE}}"
								},
								{
									"key": "longitude",
									"value": "{{STORE_LONGITUDE}}"
								},
								{
									"key": "country_code",
									"value": "{{COUNTRY_CODE}}"
								},
								{
									"key": "postal_code",
									"value": "{{POSTAL_CODE}}"
								},
								{
									"key": "distance_unit",
									"value": "{{DISTANCE_UNIT}}"
								},
								{
									"key": "max_distance",
									"value": "{{MAX_DISTANCE}}"
								},
								{
									"key": "start",
									"value": "{{START}}"
								},
								{
									"key": "count",
									"value": "{{COUNT}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}