{
	"info": {
		"_postman_id": "726fd479-2f64-4223-b105-c1cc44edd32a",
		"name": "ETOS_APP_OCAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12819193"
	},
	"item": [
		{
			"name": "CUSTOMER",
			"item": [
				{
					"name": "MY_ETOS_AUTH",
					"item": [
						{
							"name": "LOGIN_MYETOS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {",
											"    const res = pm.response.json();",
											"    pm.environment.set('LOGIN_JWT', res['token_type'] + ' ' + res['access_token']);",
											"    pm.environment.set('AUTH_ACCESS_TOKEN', res['access_token']);",
											"    pm.environment.set('LOGIN_REFRESH_JWT', res['refresh_token']);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{LOGIN_SERVICE_CLIENT_ID}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{LOGIN_SERVICE_CLIENT_SECRET}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{CUSTOMER_EMAIL}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{CUSTOMER_PASSWORD}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://beta-api.ah.nl/secure/oauth/token",
									"protocol": "https",
									"host": [
										"beta-api",
										"ah",
										"nl"
									],
									"path": [
										"secure",
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "REFRESH_TOKEN_MYETOS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {",
											"    const res = pm.response.json();",
											"    pm.environment.set('LOGIN_JWT', res['token_type'] + ' ' + res['access_token']);",
											"    pm.environment.set('LOGIN_REFRESH_JWT', res['refresh_token']);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{LOGIN_SERVICE_CLIENT_ID}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{LOGIN_SERVICE_CLIENT_SECRET}}",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{LOGIN_REFRESH_JWT}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://beta-api.ah.nl/secure/oauth/token",
									"protocol": "https",
									"host": [
										"beta-api",
										"ah",
										"nl"
									],
									"path": [
										"secure",
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_EXTERNAL_CUSTOMER_ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {\r",
											"    const res = pm.response.json();\r",
											"    pm.environment.set('CUSTOMER_EMDA_ID', res.id);\r",
											"    pm.environment.set('CUSTOMER_EMAIL', res.emailAddress);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{LOGIN_JWT}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://beta-api.ah.nl/member-service/v1/members",
									"protocol": "https",
									"host": [
										"beta-api",
										"ah",
										"nl"
									],
									"path": [
										"member-service",
										"v1",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "LOGOUT_MYETOS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {",
											"    pm.environment.set('LOGIN_JWT', '');",
											"    pm.environment.set('LOGIN_REFRESH_JWT', '');",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{LOGIN_SERVICE_CLIENT_ID}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{LOGIN_SERVICE_CLIENT_SECRET}}",
											"type": "text"
										},
										{
											"key": "access_token",
											"value": "{{LOGIN_JWT}}",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{LOGIN_REFRESH_JWT}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://beta-api.ah.nl/secure/logout",
									"protocol": "https",
									"host": [
										"beta-api",
										"ah",
										"nl"
									],
									"path": [
										"secure",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "SFCC_AUTH",
					"item": [
						{
							"name": "GET_TOKEN_SFCC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {",
											"    const res = pm.response.json();",
											"    pm.environment.set('BM_ACCESS_JWT', res['token_type'] + ' ' + res['access_token']);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{CLIENT_SECRET}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{CLIENT_ID}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://account.demandware.com/dw/oauth2/access_token",
									"protocol": "https",
									"host": [
										"account",
										"demandware",
										"com"
									],
									"path": [
										"dw",
										"oauth2",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "LOGIN_SFCC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {",
											"    const res = pm.response.json();",
											"    pm.environment.set(\"JWT_TOKEN\", postman.getResponseHeader(\"Authorization\"));",
											"    pm.environment.set('CUSTOMER_NO', res['customer_no']);",
											"    pm.environment.set('CUSTOMER_ID', res['customer_id']);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{BM_ACCESS_JWT}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{CUSTOMER_EMDA_ID}}\",\n    \"client_id\": \"{{CLIENT_ID}}\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/s/{{SITE}}/dw/shop/{{OCAPI_VERSION}}/customers/auth/trustedsystem",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"s",
										"{{SITE}}",
										"dw",
										"shop",
										"{{OCAPI_VERSION}}",
										"customers",
										"auth",
										"trustedsystem"
									]
								}
							},
							"response": []
						},
						{
							"name": "LOGOUT_SFCC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200 || pm.response.code === 204) {",
											"    pm.environment.set(\"JWT_TOKEN\", '');",
											"    // clear cookies",
											"    const jar = pm.cookies.jar();",
											"    if (jar) {",
											"        jar.clear(pm.request.url, function (error) {",
											"            console.log(error);",
											"        });",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{JWT_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST}}/s/{{SITE}}/dw/shop/{{OCAPI_VERSION}}/customers/auth",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"s",
										"{{SITE}}",
										"dw",
										"shop",
										"{{OCAPI_VERSION}}",
										"customers",
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_JWT_guest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"JWT_TOKEN\", postman.getResponseHeader(\"Authorization\"));\r",
											"console.log(postman.getResponseHeader(\"Authorization\"))"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-dw-client-id",
										"value": "{{CLIENT_ID}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"type\": \"guest\"\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/customers/auth",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"s",
										"Sites-{{SITE}}-Site",
										"dw",
										"shop",
										"{{OCAPI_VERSION}}",
										"customers",
										"auth"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "SESSION_BRIDGE",
					"item": [
						{
							"name": "JWT_TO_SESSION",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200 || pm.response.code === 204) {\r",
											"    const res = pm.response;\r",
											"    console.log(res)\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{JWT_TOKEN}}",
										"type": "text"
									},
									{
										"key": "x-dw-client-id",
										"value": "{{CLIENT_ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST}}/s/{{SITE}}/dw/shop/{{OCAPI_VERSION}}/sessions",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"s",
										"{{SITE}}",
										"dw",
										"shop",
										"{{OCAPI_VERSION}}",
										"sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "SESSION_TO_JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {\r",
											"    const res = pm.response.json();\r",
											"    pm.environment.set(\"JWT_TOKEN\", postman.getResponseHeader(\"Authorization\"));\r",
											"    pm.environment.set('CUSTOMER_ID', res['customer_id']);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "x-dw-client-id",
										"value": "{{CLIENT_ID}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"type\": \"session\"\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/customers/auth",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"s",
										"Sites-{{SITE}}-Site",
										"dw",
										"shop",
										"{{OCAPI_VERSION}}",
										"customers",
										"auth"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ADDRESSES",
					"item": [
						{
							"name": "CREATE_ADDRESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"if (pm.response.code === 200) {\r",
											"    pm.environment.set('ADDRESS_NAME', jsonData.address_id);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{JWT_TOKEN}}",
										"type": "default"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address_id\": \"{{NEW_ADDRESS_NAME}}\",\r\n    \"address1\": \"Address 1\",\r\n    \"address2\": \"Address 2\",\r\n    \"city\":\"Utrecht\",\r\n    \"country_code\":\"NL\",\r\n    \"first_name\":\"Name\",\r\n    \"last_name\":\"Last_Name\",\r\n    \"phone\": \"+31206400000\",\r\n    \"postal_code\": \"3553BH\",\r\n    \"c_houseNr\": \"14\",\r\n    \"c_houseNrAdditional\": \"A\"\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/customers/{{CUSTOMER_ID}}/addresses",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"s",
										"Sites-{{SITE}}-Site",
										"dw",
										"shop",
										"{{OCAPI_VERSION}}",
										"customers",
										"{{CUSTOMER_ID}}",
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_ADDRESS",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{JWT_TOKEN}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/customers/{{CUSTOMER_ID}}/addresses",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"s",
										"Sites-{{SITE}}-Site",
										"dw",
										"shop",
										"{{OCAPI_VERSION}}",
										"customers",
										"{{CUSTOMER_ID}}",
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_ADDRESS_BY_NAME",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{JWT_TOKEN}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/customers/{{CUSTOMER_ID}}/addresses/{{ADDRESS_NAME}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"s",
										"Sites-{{SITE}}-Site",
										"dw",
										"shop",
										"{{OCAPI_VERSION}}",
										"customers",
										"{{CUSTOMER_ID}}",
										"addresses",
										"{{ADDRESS_NAME}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "EDIT_ADDRESS",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{JWT_TOKEN}}",
										"type": "default"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address1\": \"Address 1\",\r\n    \"address2\": \"Address 2\",\r\n    \"city\":\"Utrecht\",\r\n    \"country_code\":\"NL\",\r\n    \"first_name\":\"Name\",\r\n    \"last_name\":\"Last_Name\",\r\n    \"phone\": \"+31206400000\",\r\n    \"postal_code\": \"3553BH\",\r\n    \"c_houseNr\": \"14\",\r\n    \"c_houseNrAdditional\": \"B\"\r\n}"
								},
								"url": {
									"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/customers/{{CUSTOMER_ID}}/addresses/{{ADDRESS_NAME}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"s",
										"Sites-{{SITE}}-Site",
										"dw",
										"shop",
										"{{OCAPI_VERSION}}",
										"customers",
										"{{CUSTOMER_ID}}",
										"addresses",
										"{{ADDRESS_NAME}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE_ADDRESS",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{JWT_TOKEN}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/customers/{{CUSTOMER_ID}}/addresses/{{ADDRESS_NAME}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"s",
										"Sites-{{SITE}}-Site",
										"dw",
										"shop",
										"{{OCAPI_VERSION}}",
										"customers",
										"{{CUSTOMER_ID}}",
										"addresses",
										"{{ADDRESS_NAME}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET_CUSTOMER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.environment.set('BASKET_ID', jsonData.c_basketId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/customers/{{CUSTOMER_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"customers",
								"{{CUSTOMER_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE_CUSTOMER",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"c_newsletters\": [{\n\t\t\t\"type\": \"ET_WEEKLY\",\n\t\t\t\"checked\": true\n\t\t},\n\t\t{\n\t\t\t\"type\": \"ET_THEME\",\n\t\t\t\"checked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"PersonalTipsAndRecommendation__c\",\n\t\t\t\"checked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"PersonalTipsAndRecommendation__c\",\n\t\t\t\"checked\": false\n\t\t}\n\t],\n\t\"c_selectedFavoriteBrands\": [\n\t\t\"Colgate\",\n\t\t\"TePe\",\n\t\t\"Parodontax\"\n\t],\n\t\"c_personalisedInterests\": [\n        \"0\",\n\t\t\"1\",\n\t\t\"2\",\n\t\t\"3\"\n\t],\n\t\"c_children\": [{\n\t\t\"name\": {\n\t\t\t\"firstName\": \"Childname\"\n\t\t},\n\t\t\"dateOfBirth\": \"01-01-2020\"\n\t}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/customers/{{CUSTOMER_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"customers",
								"{{CUSTOMER_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CATEGORIES",
			"item": [
				{
					"name": "GET_CATEGORY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "{{REQ_ORIGIN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/categories/{{CATEGORY_ID_1}}?levels={{CATEGORY_NESTED_LEVEL_1}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"categories",
								"{{CATEGORY_ID_1}}"
							],
							"query": [
								{
									"key": "levels",
									"value": "{{CATEGORY_NESTED_LEVEL_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_CATEGORIES",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "{{REQ_ORIGIN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/categories/({{CATEGORY_ID_1}},{{CATEGORY_ID_2}},{{CATEGORY_ID_3}})?levels={{CATEGORY_NESTED_LEVEL_2}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"categories",
								"({{CATEGORY_ID_1}},{{CATEGORY_ID_2}},{{CATEGORY_ID_3}})"
							],
							"query": [
								{
									"key": "levels",
									"value": "{{CATEGORY_NESTED_LEVEL_2}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PRODUCTS",
			"item": [
				{
					"name": "GET_PRODUCT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Product ID is correct', () => {",
									"    const responseJson = pm.response.json();",
									"    const variationProductId = pm.environment.get('PRODUCT_ID');",
									"    pm.expect(responseJson.id).to.eql(variationProductId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "{{REQ_ORIGIN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"products",
								"{{PRODUCT_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_PRODUCTS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "{{REQ_ORIGIN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/({{PRODUCT_ID_1}},{{PRODUCT_ID_2}},{{PRODUCT_ID_3}})",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"products",
								"({{PRODUCT_ID_1}},{{PRODUCT_ID_2}},{{PRODUCT_ID_3}})"
							]
						}
					},
					"response": []
				},
				{
					"name": "SEARCH_PRODUCTS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('\"count\" attribute is not equal to 0', () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.count).to.not.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "{{REQ_ORIGIN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/product_search?q={{PRODUCTS_SEARCH_QUERY}}&refine_1={{REFINE1}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"product_search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{PRODUCTS_SEARCH_QUERY}}"
								},
								{
									"key": "refine_1",
									"value": "{{REFINE1}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "BASKET",
			"item": [
				{
					"name": "CREATE_BASKET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200 || pm.response.code === 201) {\r",
									"    pm.environment.set('BASKET_ID', jsonData.basket_id);\r",
									"}\r",
									"\r",
									"if (pm.response.code === 400 && jsonData.fault && jsonData.fault.arguments.basketIds) {\r",
									"    pm.environment.set('BASKET_ID', jsonData.fault.arguments.basketIds);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"baskets"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_EXISTING_BASKET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200 || pm.response.code === 201) {\r",
									"    pm.environment.set('ORDER_TOTAL', jsonData.order_total);\r",
									"\r",
									"    if (jsonData.payment_instruments && jsonData.payment_instruments[0]) {\r",
									"        pm.environment.set('PAYMENT_INSTRUMENT_ID', jsonData.payment_instruments[0].payment_instrument_id);\r",
									"        pm.environment.set('PAYMENT_METHOD_ID', jsonData.payment_instruments[0].payment_method_id);\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "{{REQ_ORIGIN}}",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{AUTH_ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"baskets",
								"{{BASKET_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "REMOVE_BASKET",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"baskets",
								"{{BASKET_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD_PRODUCT_ITEM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200 || pm.response.code === 201) {\r",
									"    const item_id = jsonData.product_items \r",
									"        && jsonData.product_items.length\r",
									"        && jsonData.product_items[0].item_id;\r",
									"\r",
									"    if (item_id) {\r",
									"        pm.environment.set('ITEM_ID', item_id);\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							},
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\r\n    \"product_id\": \"{{PRODUCT_ID}}\",\r\n    \"quantity\": 1.00\r\n}]"
						},
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/items",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"baskets",
								"{{BASKET_ID}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE_PRODUCT_ITEM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							},
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product_id\": \"{{PRODUCT_ID}}\",\r\n    \"quantity\": 3.00\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/items/{{ITEM_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"baskets",
								"{{BASKET_ID}}",
								"items",
								"{{ITEM_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "REMOVE_PRODUCT_ITEM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							},
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/items/{{ITEM_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"baskets",
								"{{BASKET_ID}}",
								"items",
								"{{ITEM_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD_SHIPMENT_BILLING",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200 || pm.response.code === 201) {\r",
									"    pm.environment.set('ORDER_TOTAL', jsonData.order_total);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							},
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{AUTH_ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"shipping_method\": {\r\n        \"id\": \"standard\"\r\n    },\r\n    \"shipping_address\": {\r\n        \"first_name\": \"John\",\r\n        \"last_name\": \"Smith\",\r\n        \"address1\": \"Test\",\r\n        \"city\":\" Utrecht\",\r\n        \"postal_code\": \"3553BH\",\r\n        \"country_code\":\"NL\",\r\n        \"phone\": \"+31206400000\",\r\n        \"c_houseNr\": \"14\",\r\n        \"c_houseNrAdditional\": \"A\"\r\n    },\r\n    \"c_email\": \"{{CUSTOMER_EMAIL}}\"\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/shipments/me",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"baskets",
								"{{BASKET_ID}}",
								"shipments",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD_SHIPMENT_BILLING_LONGTAIL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200 || pm.response.code === 201) {\r",
									"    pm.environment.set('ORDER_TOTAL', jsonData.order_total);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "default"
							},
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "default"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"shipping_method\": {\r\n        \"id\": \"longtail-pickup-in-store\"\r\n    },\r\n    \"shipping_address\": {\r\n        \"first_name\": \"John\",\r\n        \"last_name\": \"Smith\",\r\n        \"address1\": \"Test\",\r\n        \"city\": \"Utrecht\",\r\n        \"postal_code\": \"3553BH\",\r\n        \"country_code\": \"NL\",\r\n        \"phone\": \"+31206400000\",\r\n        \"c_houseNr\": \"14\",\r\n        \"c_houseNrAdditional\": \"A\"\r\n    },\r\n    \"c_email\": \"{{CUSTOMER_EMAIL}}\"\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/shipments/me",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"baskets",
								"{{BASKET_ID}}",
								"shipments",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD_PAYMENT_CREDIT_CARD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200 || pm.response.code === 201) {\r",
									"    pm.environment.set('ORDER_TOTAL', jsonData.order_total);\r",
									"\r",
									"    if (jsonData.payment_instruments && jsonData.payment_instruments[0]) {\r",
									"        pm.environment.set('PAYMENT_INSTRUMENT_ID', jsonData.payment_instruments[0].payment_instrument_id);\r",
									"        pm.environment.set('PAYMENT_METHOD_ID', jsonData.payment_instruments[0].payment_method_id);\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							},
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{AUTH_ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": {{ORDER_TOTAL}},\r\n    \"payment_method_id\": \"{{PAYMENT_METHOD_ADYEN}}\",\r\n    \"c_selected_issuer_id\": \"{{ADYEN_CREDIT_CARD_PAYMENT_NAME}}\"\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/payment_instruments",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"baskets",
								"{{BASKET_ID}}",
								"payment_instruments"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD_PAYMENT_IDEAL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200 || pm.response.code === 201) {\r",
									"    pm.environment.set('ORDER_TOTAL', jsonData.order_total);\r",
									"\r",
									"    if (jsonData.payment_instruments && jsonData.payment_instruments[0]) {\r",
									"        pm.environment.set('PAYMENT_INSTRUMENT_ID', jsonData.payment_instruments[0].payment_instrument_id);\r",
									"        pm.environment.set('PAYMENT_METHOD_ID', jsonData.payment_instruments[0].payment_method_id);\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							},
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{AUTH_ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": {{ORDER_TOTAL}},\r\n    \"payment_method_id\": \"{{PAYMENT_METHOD_ADYEN}}\",\r\n    \"c_selected_issuer_id\": \"{{ADYEN_IDEAL_PAYMENT_ISSUER}}_{{ADYEN_IDEAL_PAYMENT_NAME}}\"\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/payment_instruments",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"baskets",
								"{{BASKET_ID}}",
								"payment_instruments"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD_PAYMENT_LONGTAIL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200 || pm.response.code === 201) {\r",
									"    pm.environment.set('ORDER_TOTAL', jsonData.order_total);\r",
									"\r",
									"    if (jsonData.payment_instruments && jsonData.payment_instruments[0]) {\r",
									"        pm.environment.set('PAYMENT_INSTRUMENT_ID', jsonData.payment_instruments[0].payment_instrument_id);\r",
									"        pm.environment.set('PAYMENT_METHOD_ID', jsonData.payment_instruments[0].payment_method_id);\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "default"
							},
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "default"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							},
							{
								"key": "access-token",
								"value": "{{AUTH_ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": {{ORDER_TOTAL}},\r\n    \"payment_method_id\": \"FRAINV\"\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/payment_instruments",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"baskets",
								"{{BASKET_ID}}",
								"payment_instruments"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE_PAYMENT",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "default"
							},
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "default"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							},
							{
								"key": "access-token",
								"value": "{{AUTH_ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": {{ORDER_TOTAL}},\r\n    \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\"\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/payment_instruments/{{PAYMENT_INSTRUMENT_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"baskets",
								"{{BASKET_ID}}",
								"payment_instruments",
								"{{PAYMENT_INSTRUMENT_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ORDER",
			"item": [
				{
					"name": "CREATE_ORDER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200 || pm.response.code === 201) {\r",
									"    const order_no = jsonData.order_no;\r",
									"\r",
									"    if (order_no) {\r",
									"        pm.environment.set('ORDER_NO', order_no);\r",
									"    }\r",
									"\r",
									"    const order_token = jsonData.order_token;\r",
									"\r",
									"    if (order_token) {\r",
									"        pm.environment.set('ORDER_TOKEN', order_token);\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							},
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "access-token",
								"value": "{{AUTH_ACCESS_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"basket_id\": \"{{BASKET_ID}}\"\r\n}"
						},
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/orders",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_ORDER",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							},
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/orders/{{ORDER_NO}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"orders",
								"{{ORDER_NO}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_CUSTOMER_ORDERS",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/customers/{{CUSTOMER_ID}}/orders?start={{ORDER_START}}&count={{ORDER_COUNT}}&from={{ORDER_FROM}}&until={{ORDER_UNTIL}}&status={{ORDER_STATUS}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"customers",
								"{{CUSTOMER_ID}}",
								"orders"
							],
							"query": [
								{
									"key": "start",
									"value": "{{ORDER_START}}"
								},
								{
									"key": "count",
									"value": "{{ORDER_COUNT}}"
								},
								{
									"key": "from",
									"value": "{{ORDER_FROM}}"
								},
								{
									"key": "until",
									"value": "{{ORDER_UNTIL}}"
								},
								{
									"key": "status",
									"value": "{{ORDER_STATUS}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ADYEN",
			"item": [
				{
					"name": "GET_PAYMENT_METHODS",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{ADYEN_X_API_KEY}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantAccount\": \"{{ADYEN_MERCHANT_ACCOUNT}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ADYEN_API_BASE_URL}}/paymentMethods",
							"host": [
								"{{ADYEN_API_BASE_URL}}"
							],
							"path": [
								"paymentMethods"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREDIT_CARD_PAYMENT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const orderTotal = pm.environment.get('ORDER_TOTAL');",
									"const adyenOrderTotal = parseFloat(orderTotal) * 100;",
									"pm.environment.set('ADYEN_ORDER_TOTAL', adyenOrderTotal);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test('receive 200 status code', () => {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"",
									"pm.test('payment is authorised', () => {",
									"    pm.expect(jsonData.resultCode).to.be.eq('Authorised');",
									"});",
									"",
									"pm.test('order total is correct', () => {",
									"    const adyenOrderTotal = pm.environment.get('ADYEN_ORDER_TOTAL');",
									"    pm.expect(jsonData.amount.value).to.be.eq(adyenOrderTotal);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "default"
							},
							{
								"key": "X-API-Key",
								"value": "{{ADYEN_X_API_KEY}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": {\n        \"currency\": \"EUR\",\n        \"value\": {{ADYEN_ORDER_TOTAL}}\n    },\n    \"reference\": \"{{ORDER_NO}}\",\n    \"paymentMethod\": {\n        \"type\": \"scheme\",\n        \"encryptedCardNumber\": \"test_4111111111111111\",\n        \"encryptedExpiryMonth\": \"test_03\",\n        \"encryptedExpiryYear\": \"test_2030\",\n        \"encryptedSecurityCode\": \"test_737\"\n    },\n    \"merchantAccount\": \"{{ADYEN_MERCHANT_ACCOUNT}}\"\n}"
						},
						"url": {
							"raw": "{{ADYEN_API_BASE_URL}}/payments",
							"host": [
								"{{ADYEN_API_BASE_URL}}"
							],
							"path": [
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREDIT_CARD_3DS_PAYMENT_STEP_1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const orderTotal = pm.environment.get('ORDER_TOTAL');",
									"const adyenOrderTotal = parseFloat(orderTotal) * 100;",
									"pm.environment.set('ADYEN_ORDER_TOTAL', adyenOrderTotal);",
									"",
									"const hostUrl = pm.environment.get('HOST');",
									"const orderNo = pm.environment.get('ORDER_NO');",
									"const orderToken = pm.environment.get('ORDER_TOKEN');",
									"const adyenRedirectUrl = `${hostUrl}/mobile-app/order-confirm?ID=${orderNo}&token=${orderToken}`;",
									"pm.environment.set('ADYEN_REDIRECT_URL', adyenRedirectUrl);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test('receive 200 status code', () => {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"",
									"pm.test('3ds process is initiated', () => {",
									"    pm.expect(jsonData.resultCode).to.be.eq('RedirectShopper');",
									"});",
									"",
									"pm.environment.set(",
									"    'ADYEN_CREDIT_CARD_3DS_REDIRECT_URL',",
									"    jsonData.action.url",
									");",
									"",
									"pm.test('redirect urls is provided', () => {",
									"    const redirectUrl = pm.environment.get('ADYEN_CREDIT_CARD_3DS_REDIRECT_URL');",
									"    pm.expect(redirectUrl).to.be.string;",
									"});",
									"",
									"pm.environment.set(",
									"    'ADYEN_CREDIT_CARD_3DS_REDIRECT_MD',",
									"    jsonData.action.data.MD",
									");",
									"pm.environment.set(",
									"    'ADYEN_CREDIT_CARD_3DS_REDIRECT_PAREQ',",
									"    jsonData.action.data.PaReq",
									");",
									"",
									"pm.test('redirect payload is provided', () => {",
									"    const md = pm.environment.get(' ');",
									"    pm.expect(md).to.be.string;",
									"",
									"    const paReq = pm.environment.get('ADYEN_CREDIT_CARD_3DS_REDIRECT_PAREQ');",
									"    pm.expect(paReq).to.be.string;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "default"
							},
							{
								"key": "X-API-Key",
								"value": "{{ADYEN_X_API_KEY}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": {\n        \"currency\": \"EUR\",\n        \"value\": {{ADYEN_ORDER_TOTAL}}\n    },\n    \"reference\": \"{{ORDER_NO}}\",\n    \"paymentMethod\": {\n        \"type\": \"scheme\",\n        \"encryptedCardNumber\": \"test_4917610000000000\",\n        \"encryptedExpiryMonth\": \"test_03\",\n        \"encryptedExpiryYear\": \"test_2030\",\n        \"encryptedSecurityCode\": \"test_737\"\n    },\n    \"browserInfo\": {\n        \"userAgent\": \"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9) Gecko/2008052912 Firefox/3.0\",\n        \"acceptHeader\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n        \"javaEnabled\": true,\n        \"colorDepth\": 10,\n        \"screenHeight\": 2000,\n        \"screenWidth\": 3000,\n        \"timeZoneOffset\": 5,\n        \"language\": \"en\"\n    },\n    \"returnUrl\": \"{{ADYEN_REDIRECT_URL}}\",\n    \"merchantAccount\": \"{{ADYEN_MERCHANT_ACCOUNT}}\"\n}"
						},
						"url": {
							"raw": "{{ADYEN_API_BASE_URL}}/payments",
							"host": [
								"{{ADYEN_API_BASE_URL}}"
							],
							"path": [
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREDIT_CARD_3DS_PAYMENT_STEP_2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "md",
									"value": "{{ADYEN_CREDIT_CARD_3DS_REDIRECT_MD}}",
									"type": "default"
								},
								{
									"key": "pareq",
									"value": "{{ADYEN_CREDIT_CARD_3DS_REDIRECT_PAREQ}}",
									"type": "default"
								},
								{
									"key": "url",
									"value": "{{ADYEN_CREDIT_CARD_3DS_REDIRECT_URL}}",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{POSTMAN_WEB_APP_URL}}/adyen/credit_card_3ds_redirect",
							"host": [
								"{{POSTMAN_WEB_APP_URL}}"
							],
							"path": [
								"adyen",
								"credit_card_3ds_redirect"
							]
						}
					},
					"response": []
				},
				{
					"name": "IDEAL_PAYMENT_STEP_1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const orderTotal = pm.environment.get('ORDER_TOTAL');",
									"const adyenOrderTotal = parseFloat(orderTotal) * 100;",
									"pm.environment.set('ADYEN_ORDER_TOTAL', adyenOrderTotal);",
									"",
									"const hostUrl = pm.environment.get('HOST');",
									"const orderNo = pm.environment.get('ORDER_NO');",
									"const orderToken = pm.environment.get('ORDER_TOKEN');",
									"const adyenRedirectUrl = `${hostUrl}/mobile-app/order-confirm?ID=${orderNo}&token=${orderToken}`;",
									"pm.environment.set('ADYEN_REDIRECT_URL', adyenRedirectUrl);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test('receive 200 status code', () => {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"",
									"pm.environment.set('ADYEN_IDEAL_3DS_REDIRECT_URL', jsonData.action.url);",
									"",
									"pm.test('redirect url exist', () => {",
									"    const redirectUrl = pm.environment.get('ADYEN_IDEAL_3DS_REDIRECT_URL');",
									"    pm.expect(redirectUrl).to.be.string;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "default"
							},
							{
								"key": "X-API-Key",
								"value": "{{ADYEN_X_API_KEY}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": {\n        \"currency\": \"EUR\",\n        \"value\": {{ADYEN_ORDER_TOTAL}}\n    },\n    \"reference\": \"{{ORDER_NO}}\",\n    \"paymentMethod\": {\n        \"type\": \"{{ADYEN_IDEAL_PAYMENT_NAME}}\",\n        \"issuer\": \"{{ADYEN_IDEAL_PAYMENT_ISSUER}}\"\n    },\n    \"returnUrl\": \"{{ADYEN_REDIRECT_URL}}\",\n    \"merchantAccount\": \"{{ADYEN_MERCHANT_ACCOUNT}}\"\n}"
						},
						"url": {
							"raw": "{{ADYEN_API_BASE_URL}}/payments",
							"host": [
								"{{ADYEN_API_BASE_URL}}"
							],
							"path": [
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "IDEAL_PAYMENT_STEP_2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "url",
									"value": "{{ADYEN_IDEAL_3DS_REDIRECT_URL}}",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{POSTMAN_WEB_APP_URL}}/adyen/ideal_3ds_redirect",
							"host": [
								"{{POSTMAN_WEB_APP_URL}}"
							],
							"path": [
								"adyen",
								"ideal_3ds_redirect"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TESTS",
			"item": [
				{
					"name": "TEST_SCENARIOS",
					"item": [
						{
							"name": "LOGIN_AND_LOGOUT",
							"item": [
								{
									"name": "LOGIN_MYETOS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    const res = pm.response.json();",
													"    pm.environment.set('LOGIN_JWT', res['token_type'] + ' ' + res['access_token']);",
													"    pm.environment.set('AUTH_ACCESS_TOKEN', res['access_token']);",
													"    pm.environment.set('LOGIN_REFRESH_JWT', res['refresh_token']);",
													"}",
													"",
													"const responseJson = pm.response.json();",
													"",
													"pm.test(\"'access_token' attribute exist\", () => {",
													"    pm.expect(responseJson.access_token).exist;",
													"});",
													"",
													"pm.test(\"'token_type' attribute exist\", () => {",
													"    pm.expect(responseJson.token_type).exist",
													"});",
													"",
													"pm.test(\"'refresh_token' attribute exist\", () => {",
													"    pm.expect(responseJson.refresh_token).exist;",
													"});",
													"",
													"pm.test(\"'expires_in' attribute exist\", () => {",
													"    pm.expect(responseJson.expires_in).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{LOGIN_SERVICE_CLIENT_ID}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{LOGIN_SERVICE_CLIENT_SECRET}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{CUSTOMER_EMAIL}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{CUSTOMER_PASSWORD}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://beta-api.ah.nl/secure/oauth/token",
											"protocol": "https",
											"host": [
												"beta-api",
												"ah",
												"nl"
											],
											"path": [
												"secure",
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_EXTERNAL_CUSTOMER_ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"if (pm.response.code === 200) {\r",
													"    pm.environment.set('CUSTOMER_EMDA_ID', responseJson.id);\r",
													"};\r",
													"\r",
													"pm.test(\"'id' attribute is Customer's id\", () => {\r",
													"    pm.expect((responseJson.id).toString()).to.eql(environment.CUSTOMER_EXTERNAL_ID);\r",
													"});\r",
													"\r",
													"pm.test(\"'emailAddress' attribute is Customer's email\", () => {\r",
													"    pm.expect(responseJson.emailAddress).to.eql(environment.CUSTOMER_EMAIL);\r",
													"});\r",
													"\r",
													"pm.test(\"'externalId' attribute exist\", () => {\r",
													"    pm.expect(responseJson._embedded.externalids._embedded.items[0].externalId).exist;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{LOGIN_JWT}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "https://beta-api.ah.nl/member-service/v1/members",
											"protocol": "https",
											"host": [
												"beta-api",
												"ah",
												"nl"
											],
											"path": [
												"member-service",
												"v1",
												"members"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_TOKEN_SFCC",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"if (pm.response.code === 200) {",
													"    pm.environment.set('BM_ACCESS_JWT', respJson['token_type'] + ' ' + respJson['access_token']);",
													"};",
													"",
													"pm.test(\"'access_token' attribute exist\", () => {",
													"    pm.expect(respJson.access_token).exist;",
													"});",
													"",
													"pm.test(\"'token_type' attribute is Bearer\", () => {",
													"    pm.expect(respJson.token_type).to.eql(\"Bearer\");",
													"});",
													"",
													"pm.test(\"'expires_in' attribute exist\", () => {",
													"    pm.expect(respJson.expires_in).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{CLIENT_SECRET}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{CLIENT_ID}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://account.demandware.com/dw/oauth2/access_token",
											"protocol": "https",
											"host": [
												"account",
												"demandware",
												"com"
											],
											"path": [
												"dw",
												"oauth2",
												"access_token"
											]
										}
									},
									"response": []
								},
								{
									"name": "LOGIN_SFCC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const respJson = pm.response.json();",
													"",
													"if (pm.response.code === 200) {",
													"    pm.environment.set(\"JWT_TOKEN\", postman.getResponseHeader(\"Authorization\"));",
													"    pm.environment.set('CUSTOMER_NO', respJson['customer_no']);",
													"    pm.environment.set('CUSTOMER_ID', respJson['customer_id']);",
													"};",
													"",
													"pm.test(\"'customer_id' attribute exist\", () => {",
													"    pm.expect(respJson.customer_id).exist;",
													"});",
													"",
													"pm.test(\"'customer_no' attribute is Customer's number\", () => {",
													"    pm.expect(respJson.customer_no).to.eql(environment.CUSTOMER_NO);",
													"});",
													"",
													"pm.test(\"'email' attribute is Customer's email\", () => {",
													"    pm.expect(respJson.email).to.eql(environment.CUSTOMER_EMAIL);",
													"});",
													"",
													"pm.test(\"'first_name' attribute is Customer's firstname\", () => {",
													"    pm.expect(respJson.first_name).to.eql(environment.CUSTOMER_FIRST_NAME);",
													"});",
													"",
													"pm.test(\"'last_name' attribute is Customer's lastname\", () => {",
													"    pm.expect(respJson.last_name).to.eql(environment.CUSTOMER_LAST_NAME);",
													"});",
													"",
													"pm.test(\"'phone_home' attribute exist\", () => {",
													"    pm.expect(respJson.phone_home).to.exist || pm.expect(respJson.phone_mobile).to.exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{BM_ACCESS_JWT}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"{{CUSTOMER_EMDA_ID}}\",\n    \"client_id\": \"{{CLIENT_ID}}\"\n}"
										},
										"url": {
											"raw": "{{HOST}}/s/{{SITE}}/dw/shop/{{OCAPI_VERSION}}/customers/auth/trustedsystem",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"{{SITE}}",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"customers",
												"auth",
												"trustedsystem"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_CUSTOMER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code === 200) {\r",
													"    pm.environment.set('BASKET_ID', jsonData.c_basketId);\r",
													"};"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/customers/{{CUSTOMER_ID}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"customers",
												"{{CUSTOMER_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "UPDATE_CUSTOMER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () =>  {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'birthday' attribute value is date\", () => {",
													"    pm.expect(responseJson.birthday).to.match(/^\\d{4}-\\d{2}-\\d{2}/);",
													"});",
													"",
													"pm.test(\"'first_name' attribute value is string\", () => {",
													"    pm.expect(responseJson.first_name).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'gender' attribute value is number\", () => {",
													"    pm.expect(responseJson.gender).to.be.a(\"number\");",
													"});",
													"",
													"pm.test(\"'last_name' attribute value is string\", () => {",
													"    pm.expect(responseJson.last_name).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_lastNamePrefix' attribute value is string\", () => {",
													"    pm.expect(responseJson.c_lastNamePrefix).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'phone_home' attribute value is string\", () => {",
													"    pm.expect(responseJson.phone_home).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'phone_mobile' attribute value is string\", () => {",
													"    pm.expect(responseJson.phone_mobile).to.be.a(\"string\");",
													"});",
													"",
													"const children = JSON.parse(responseJson.c_children);",
													"pm.test(\"'c_children' attribute value is array\", () => {",
													"    pm.expect(children).to.be.an(\"array\");",
													"});",
													"",
													"const selectedFavoriteBrands = JSON.parse(responseJson.c_selectedFavoriteBrands);",
													"pm.test(\"'c_selectedFavoriteBrands' attribute value is array\", () => {",
													"    pm.expect(selectedFavoriteBrands).to.be.an(\"array\");",
													"});",
													"",
													"pm.test(\"'c_birthdayOfferSubscription' attribute value is boolean\", () => {",
													"    pm.expect(responseJson.c_birthdayOfferSubscription).to.be.a(\"boolean\");",
													"});",
													"",
													"const personalisedInterests = JSON.parse(responseJson.c_personalisedInterests);",
													"pm.test(\"'c_personalisedInterests' attribute value is array\", () => {",
													"    pm.expect(personalisedInterests).to.be.an(\"array\");",
													"});",
													"",
													"pm.test(\"'c_favouriteStore' attribute value is string\", () => {",
													"    pm.expect(responseJson.c_favouriteStore).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_pregnancyDueDate' attribute value is date\", () => {",
													"    pm.expect(responseJson.c_pregnancyDueDate).to.match(/^\\d{4}-\\d{2}-\\d{2}/);",
													"});",
													"",
													"const newsletters = JSON.parse(responseJson.c_newsletters);",
													"pm.test(\"'c_newsletters' attribute value is object\", () => {",
													"    pm.expect(newsletters).to.be.an(\"object\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"birthday\": \"1970-01-01\",\n    \"first_name\": \"Postman\",\n    \"gender\": 3,\n    \"last_name\": \"Ocapi\",\n    \"c_lastNamePrefix\": \"Etos\",\n    \"phone_home\": \"+31205555555\",\n    \"phone_mobile\": \"+31205555555\",\n    \"c_children\": [\n        {\n            \"name\": {\n                \"firstName\": \"ChildOne\"\n            },\n            \"dateOfBirth\": \"01-01-2019\"\n        }\n    ],\n    \"c_selectedFavoriteBrands\": [\n        \"Etos\"\n    ],\n    \"c_birthdayOfferSubscription\": true,\n    \"c_personalisedInterests\": [\n        \"2\"\n    ],\n    \"c_favouriteStore\": \"6035\",\n    \"c_pregnancyDueDate\": \"2023-12-12\",\n    \"c_newsletters\": [\n        {\n            \"type\": \"ET_WEEKLY\",\n            \"checked\": true\n        },\n        {\n            \"type\": \"ET_THEME\",\n            \"checked\": false\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/customers/{{CUSTOMER_ID}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"customers",
												"{{CUSTOMER_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "REFRESH_TOKEN_MYETOS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    const jsonData = pm.response.json(); respJson = pm.response.json();",
													"    pm.environment.set('LOGIN_JWT', respJson['token_type'] + ' ' + respJson['access_token']);",
													"    pm.environment.set('LOGIN_REFRESH_JWT', respJson['refresh_token']);",
													"};",
													"",
													"pm.test(\"'access_token' attribute exist\", () => {",
													"    pm.expect(respJson.access_token).exist;",
													"});",
													"",
													"pm.test(\"'token_type' attribute exist\", () => {",
													"    pm.expect(respJson.token_type).exist;",
													"});",
													"",
													"pm.test(\"'refresh_token' attribute exist\", () => {",
													"    pm.expect(respJson.refresh_token).exist;",
													"});",
													"",
													"pm.test(\"'expires_in' attribute exist\", () => {",
													"    pm.expect(respJson.expires_in).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{LOGIN_SERVICE_CLIENT_ID}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{LOGIN_SERVICE_CLIENT_SECRET}}",
													"type": "text"
												},
												{
													"key": "refresh_token",
													"value": "{{LOGIN_REFRESH_JWT}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://beta-api.ah.nl/secure/oauth/token",
											"protocol": "https",
											"host": [
												"beta-api",
												"ah",
												"nl"
											],
											"path": [
												"secure",
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "LOGOUT_MYETOS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.environment.set('LOGIN_JWT', '');",
													"    pm.environment.set('LOGIN_REFRESH_JWT', '');",
													"}",
													"",
													"pm.test(\"Logged out from ETOS\", () => {",
													"    pm.expect(pm.response.code).to.eql(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{LOGIN_SERVICE_CLIENT_ID}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{LOGIN_SERVICE_CLIENT_SECRET}}",
													"type": "text"
												},
												{
													"key": "access_token",
													"value": "{{LOGIN_JWT}}",
													"type": "text"
												},
												{
													"key": "refresh_token",
													"value": "{{LOGIN_REFRESH_JWT}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://beta-api.ah.nl/secure/logout",
											"protocol": "https",
											"host": [
												"beta-api",
												"ah",
												"nl"
											],
											"path": [
												"secure",
												"logout"
											]
										}
									},
									"response": []
								},
								{
									"name": "LOGOUT_SFCC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200 || pm.response.code === 204) {",
													"    pm.environment.set(\"JWT_TOKEN\", '');",
													"};",
													"",
													"pm.test(\"Logged out from SFCC\", () => {",
													"    pm.expect(pm.response.code).to.eql(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/s/{{SITE}}/dw/shop/{{OCAPI_VERSION}}/customers/auth",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"{{SITE}}",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"customers",
												"auth"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CREATE_ORDER_WITH_CREDIT_CARD_AND_GET_ORDER",
							"item": [
								{
									"name": "LOGIN",
									"item": [
										{
											"name": "LOGIN_MYETOS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {",
															"    const res = pm.response.json();",
															"    pm.environment.set('LOGIN_JWT', res['token_type'] + ' ' + res['access_token']);",
															"    pm.environment.set('AUTH_ACCESS_TOKEN', res['access_token']);",
															"    pm.environment.set('LOGIN_REFRESH_JWT', res['refresh_token']);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{LOGIN_SERVICE_CLIENT_ID}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{LOGIN_SERVICE_CLIENT_SECRET}}",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{CUSTOMER_EMAIL}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{CUSTOMER_PASSWORD}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://beta-api.ah.nl/secure/oauth/token",
													"protocol": "https",
													"host": [
														"beta-api",
														"ah",
														"nl"
													],
													"path": [
														"secure",
														"oauth",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET_EXTERNAL_CUSTOMER_ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {\r",
															"    const respJson = pm.response.json();\r",
															"    pm.environment.set('CUSTOMER_EMDA_ID', respJson.id);\r",
															"};"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{LOGIN_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "https://beta-api.ah.nl/member-service/v1/members",
													"protocol": "https",
													"host": [
														"beta-api",
														"ah",
														"nl"
													],
													"path": [
														"member-service",
														"v1",
														"members"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET_TOKEN_SFCC",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {",
															"    const respJson = pm.response.json();",
															"    pm.environment.set('BM_ACCESS_JWT', respJson['token_type'] + ' ' + respJson['access_token']);",
															"};"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{CLIENT_SECRET}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{CLIENT_ID}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://account.demandware.com/dw/oauth2/access_token",
													"protocol": "https",
													"host": [
														"account",
														"demandware",
														"com"
													],
													"path": [
														"dw",
														"oauth2",
														"access_token"
													]
												}
											},
											"response": []
										},
										{
											"name": "LOGIN_SFCC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {",
															"    const respJson = pm.response.json();",
															"    pm.environment.set(\"JWT_TOKEN\", postman.getResponseHeader(\"Authorization\"));",
															"    pm.environment.set('CUSTOMER_NO', respJson['customer_no']);",
															"    pm.environment.set('CUSTOMER_ID', respJson['customer_id']);",
															"};"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{BM_ACCESS_JWT}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"login\": \"{{CUSTOMER_EMDA_ID}}\",\n    \"client_id\": \"{{CLIENT_ID}}\"\n}"
												},
												"url": {
													"raw": "{{HOST}}/s/{{SITE}}/dw/shop/{{OCAPI_VERSION}}/customers/auth/trustedsystem",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"{{SITE}}",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"customers",
														"auth",
														"trustedsystem"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "CREATE_BASKET",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () =>  {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNr' in shipping attribute value is string\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNr).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNrAdditional' in shipping attribute value is string\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNrAdditional).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNr' in shipping attribute value is string\", () => {\r",
													"    pm.expect(responseJson.billing_address.c_houseNr).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNrAdditional' in shipping attribute value is string\", () => {\r",
													"    pm.expect(responseJson.billing_address.c_houseNrAdditional).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_paymentMethods' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.c_paymentMethods).to.be.a(\"array\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_savedPaymentData' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.c_savedPaymentData).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_savedIssuerId' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.c_savedIssuerId).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    pm.environment.set('BASKET_ID', responseJson.basket_id);\r",
													"}\r",
													"\r",
													"if (pm.response.code === 400 && responseJson.fault && responseJson.fault.arguments.basketIds){\r",
													"    pm.environment.set('BASKET_ID', responseJson.fault.arguments.basketIds);\r",
													"}\r",
													"\r",
													" pm.environment.unset('ORDER_NO');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({",
													"    url:`${environment.HOST}/s/Sites-${environment.SITE}-Site/dw/shop/${environment.OCAPI_VERSION}/baskets/${environment.BASKET_ID}`,",
													"    method:'DELETE',",
													"    header: {",
													"        'x-dw-client-id': `${environment.CLIENT_ID}`,",
													"        'Authorization': `${environment.JWT_TOKEN}`,",
													"    }",
													"})",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets"
											]
										}
									},
									"response": []
								},
								{
									"name": "ADD_PRODUCT_ITEM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () =>  {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    const item_id = responseJson.product_items \r",
													"        && responseJson.product_items.length\r",
													"        && responseJson.product_items[0].item_id;\r",
													"\r",
													"    if (item_id) {\r",
													"        pm.environment.set('ITEM_ID', item_id);\r",
													"    }\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"'c_houseNr' in shipping attribute value is string\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNr).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNrAdditional' in shipping attribute value is string\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNrAdditional).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNr' in shipping attribute value is string\", () => {\r",
													"    pm.expect(responseJson.billing_address.c_houseNr).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNrAdditional' in shipping attribute value is string\", () => {\r",
													"    pm.expect(responseJson.billing_address.c_houseNrAdditional).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.environment.set('PRODUCT_ITEMS_PRICE', responseJson.product_items[0].price);\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    const item_id = responseJson.product_items \r",
													"        && responseJson.product_items.length\r",
													"        && responseJson.product_items[0].item_id;\r",
													"\r",
													"    if (item_id) {\r",
													"        pm.environment.set('ITEM_ID', item_id);\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[{\r\n    \"product_id\" : \"{{PRODUCT_ID_3}}\",\r\n    \"quantity\" : 2.00\r\n}]"
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/items",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets",
												"{{BASKET_ID}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "ADD_SHIPMENT_BILLING",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () =>  {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"'shipments[].shipping_address' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"'shipments[].shipping_address' attribute is not empty\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address).not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"'shipments[].shipping_method' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_method).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"'shipments[].shipping_method' attribute is not empty\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_method).not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"'billing_address' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.billing_address).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"'billing_address' attribute is not empty\", () => {\r",
													"    pm.expect(responseJson.billing_address).not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"'first_name' in billing address is correct\", () => {\r",
													"    pm.expect(responseJson.billing_address.first_name).eq(environment.CUSTOMER_FIRST_NAME);\r",
													"});\r",
													"\r",
													"pm.test(\"'last_name' in billing address is correct\", () => {\r",
													"    pm.expect(responseJson.billing_address.last_name).eq(environment.CUSTOMER_LAST_NAME);\r",
													"});\r",
													"\r",
													"pm.test(\"'city' in billing address is correct\", () => {\r",
													"    pm.expect(responseJson.billing_address.city).eq(environment.CUSTOMER_CITY);\r",
													"});\r",
													"\r",
													"pm.test('\"phone\" in billing address is correct', () => {\r",
													"    pm.expect(responseJson.billing_address.phone).eq(environment.CUSTOMER_PHONE);\r",
													"});\r",
													"\r",
													"pm.test('\"c_houseNr\" in billing address is correct', () => {\r",
													"    pm.expect(responseJson.billing_address.c_houseNr).eq(environment.CUSTOMER_HOUSE_NR);\r",
													"});\r",
													"\r",
													"pm.test(\"'c_email' in billing address is correct\", () => {\r",
													"    pm.expect(responseJson.customer_info.email).eq(environment.CUSTOMER_EMAIL);\r",
													"});\r",
													"\r",
													"pm.test(\"'first_name' in shipping address is correct\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.first_name).eq(environment.CUSTOMER_FIRST_NAME);\r",
													"});\r",
													"\r",
													"pm.test(\"'last_name' in shipping address is correct\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.last_name).eq(environment.CUSTOMER_LAST_NAME);\r",
													"});\r",
													"\r",
													"pm.test(\"'city' in shipping address is correct\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.city).eq(environment.CUSTOMER_CITY);\r",
													"});\r",
													"\r",
													"pm.test('\"phone\" in shipping address is correct', () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.phone).eq(environment.CUSTOMER_PHONE);\r",
													"});\r",
													"\r",
													"pm.test('\"c_houseNr\" in shipping address is correct', () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNr).eq(environment.CUSTOMER_HOUSE_NR);\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNr' attribute value is string\", () => {\r",
													"    pm.expect(responseJson.billing_address.c_houseNr).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNrAdditional' attribute value in billing_address is string\", () => {\r",
													"    pm.expect(responseJson.billing_address.c_houseNrAdditional).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNr' attribute value in shipping_address is string\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNr).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNrAdditional' attribute value in shipping_address is string\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNrAdditional).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"shipping_method\":\r\n  {\r\n    \"id\":\"standard\"\r\n  },\r\n  \"shipping_address\" :\r\n  {\r\n    \"first_name\":\"{{CUSTOMER_FIRST_NAME}}\",\r\n    \"last_name\":\"{{CUSTOMER_LAST_NAME}}\",\r\n    \"address1\": \"Test\",\r\n    \"city\":\"{{CUSTOMER_CITY}}\",\r\n    \"postal_code\": \"{{POSTAL_CODE}}\",\r\n    \"country_code\":\"{{COUNTRY_CODE}}\",\r\n    \"phone\": \"{{CUSTOMER_PHONE}}\",\r\n    \"c_houseNr\": \"{{CUSTOMER_HOUSE_NR}}\",\r\n    \"c_houseNrAdditional\": \"{{CUSTOMER_HOME_NR_ADDITIONAL}}\"\r\n   },\r\n  \"c_email\": \"{{CUSTOMER_EMAIL}}\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/shipments/me",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets",
												"{{BASKET_ID}}",
												"shipments",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "ADD_PAYMENT_CREDIT_CARD",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    pm.environment.set('ORDER_TOTAL', responseJson.order_total.toFixed(2));\r",
													"\r",
													"    if (responseJson.payment_instruments && responseJson.payment_instruments[0]) {\r",
													"        pm.environment.set('PAYMENT_INSTRUMENT_ID', responseJson.payment_instruments[0].payment_instrument_id);\r",
													"        pm.environment.set('PAYMENT_METHOD_ID', responseJson.payment_instruments[0].payment_method_id);\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.test('Status code is 200 or 201: ' + pm.response.code, () =>  {\r",
													"    // pm.response.to.have.status(200);\r",
													"    pm.expect([200, 201]).to.include(pm.response.code);\r",
													"});\r",
													"\r",
													"pm.test('\"payment_method_id\" is Adyen', () => {\r",
													"    pm.expect(responseJson.payment_instruments[0].payment_method_id).eq(environment.PAYMENT_METHOD_ADYEN);\r",
													"});\r",
													"\r",
													"pm.test('\"shipments[].shipping_address\" attribute value is object', () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test('\"shipments[].shipping_address\" is not empty', () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address).not.empty;\r",
													"});\r",
													"\r",
													"pm.test('\"shipments[].shipping_method\" attribute value is object', () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_method).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test('\"shipments[].shipping_method\"  attribute is not empty', () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_method).not.empty;\r",
													"});\r",
													"\r",
													"pm.test('\"billing_address\" attribute value is object', () => {\r",
													"    pm.expect(responseJson.billing_address).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test('\"billing_address\" attribute is not empty', () => {\r",
													"    pm.expect(responseJson.billing_address).not.empty;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"amount\": {{ORDER_TOTAL}},\r\n    \"payment_method_id\": \"{{PAYMENT_METHOD_ADYEN}}\",\r\n    \"c_selected_issuer_id\": \"{{ADYEN_CREDIT_CARD_PAYMENT_NAME}}\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/payment_instruments",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets",
												"{{BASKET_ID}}",
												"payment_instruments"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_EXISTING_BASKET",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    pm.environment.set('ORDER_TOTAL', responseJson.order_total);\r",
													"\r",
													"    if (responseJson.payment_instruments && responseJson.payment_instruments[0]) {\r",
													"        pm.environment.set('PAYMENT_INSTRUMENT_ID', responseJson.payment_instruments[0].payment_instrument_id);\r",
													"        pm.environment.set('PAYMENT_METHOD_ID', responseJson.payment_instruments[0].payment_method_id);\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.test('Status code is 200', () =>  {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"'shipments[].shipping_address' attribute is not empty\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address).not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"'shipments[].shipping_address' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"'shipments[].shipping_method' attribute is not empty\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_method).not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"'shipments[].shipping_method' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_method).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"'billing_address' attribute is not empty\", () => {\r",
													"    pm.expect(responseJson.billing_address).not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"'billing_address' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.billing_address).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_airmilesEnabled' attribute value is boolean\", () => {\r",
													"    pm.expect(responseJson.c_airmilesEnabled).to.be.a(\"boolean\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_airmilesComponent' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.c_airmilesComponent).to.be.a(\"object\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{AUTH_ACCESS_TOKEN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets",
												"{{BASKET_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CREATE_ORDER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    const order_no = jsonData.order_no;\r",
													"\r",
													"    if (order_no) {\r",
													"        pm.environment.set('ORDER_NO', order_no);\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response object should have c_source property', () => {\r",
													"    pm.expect(jsonData).to.have.nested.property('c_source');\r",
													"});\r",
													"\r",
													"pm.test('c_source property of response should be equal \"appOCAPI\" or \"ocapiLongtail\"', () => {\r",
													"    const isLongtail = !!jsonData.c_isLongtailOrder;\r",
													"    const source = isLongtail ? 'ocapiLongtail' : 'appOCAPI';\r",
													"    pm.expect(jsonData.c_source).to.equal(source);\r",
													"});\r",
													"\r",
													"pm.test(\"'billing_address' object is returned\", () => {\r",
													"    pm.expect(jsonData.billing_address).to.an(\"object\")\r",
													"})\r",
													"\r",
													"pm.test(\"'email' is user's email\", () => {\r",
													"    pm.expect(jsonData.customer_info.email).eql(environment.CUSTOMER_EMAIL)\r",
													"})\r",
													"\r",
													"pm.test(\"'c_source' attribute exist\", () => {\r",
													"    pm.expect(pm.response.text()).to.include(\"c_source\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"basket_id\": \"{{BASKET_ID}}\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/orders",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "CREDIT_CARD_PAYMENT",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const orderTotal = pm.environment.get('ORDER_TOTAL');",
													"const adyenOrderTotal = parseFloat(orderTotal) * 100;",
													"pm.environment.set('ADYEN_ORDER_TOTAL', adyenOrderTotal);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test('receive 200 status code', () => {",
													"    pm.expect(pm.response.code).to.be.eq(200);",
													"});",
													"",
													"pm.test('payment is authorised', () => {",
													"    pm.expect(jsonData.resultCode).to.be.eq('Authorised');",
													"});",
													"",
													"pm.test('order total is correct', () => {",
													"    const adyenOrderTotal = pm.environment.get('ADYEN_ORDER_TOTAL');",
													"    pm.expect(jsonData.amount.value).to.be.eq(adyenOrderTotal);",
													"});",
													"",
													"pm.test('\"pspReference\" is string', () => {",
													"    pm.expect(jsonData.pspReference).to.be.a(\"string\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "default"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "default"
											},
											{
												"key": "X-API-Key",
												"value": "{{ADYEN_X_API_KEY}}",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": {\n        \"currency\": \"EUR\",\n        \"value\": {{ADYEN_ORDER_TOTAL}}\n    },\n    \"reference\": \"{{ORDER_NO}}\",\n    \"paymentMethod\": {\n        \"type\": \"scheme\",\n        \"encryptedCardNumber\": \"test_4111111111111111\",\n        \"encryptedExpiryMonth\": \"test_03\",\n        \"encryptedExpiryYear\": \"test_2030\",\n        \"encryptedSecurityCode\": \"test_737\"\n    },\n    \"merchantAccount\": \"{{ADYEN_MERCHANT_ACCOUNT}}\"\n}"
										},
										"url": {
											"raw": "{{ADYEN_API_BASE_URL}}/payments",
											"host": [
												"{{ADYEN_API_BASE_URL}}"
											],
											"path": [
												"payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_ORDER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'billing_address' object is returned\", () => {",
													"    pm.expect(jsonData.billing_address).to.an(\"object\")",
													"})",
													"",
													"pm.test(\"'confirmation_status' not undefined\", () => {",
													"    pm.expect(jsonData.confirmation_status).not.to.be.undefined",
													"})",
													"",
													"pm.test(\"'email' is user's email\", () => {",
													"    pm.expect(jsonData.customer_info.email).eql(environment.CUSTOMER_EMAIL)",
													"})",
													"",
													"pm.test(\"'order source' is appOCAPI\", () => {",
													"    pm.expect(jsonData.c_source).eql('appOCAPI')",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/orders/{{ORDER_NO}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"orders",
												"{{ORDER_NO}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CREATE_ORDER_WITH_CREDIT_CARD_3DS_AND_GET_ORDER",
							"item": [
								{
									"name": "LOGIN",
									"item": [
										{
											"name": "LOGIN_MYETOS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {",
															"    const res = pm.response.json();",
															"    pm.environment.set('LOGIN_JWT', res['token_type'] + ' ' + res['access_token']);",
															"    pm.environment.set('AUTH_ACCESS_TOKEN', res['access_token']);",
															"    pm.environment.set('LOGIN_REFRESH_JWT', res['refresh_token']);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{LOGIN_SERVICE_CLIENT_ID}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{LOGIN_SERVICE_CLIENT_SECRET}}",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{CUSTOMER_EMAIL}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{CUSTOMER_PASSWORD}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://beta-api.ah.nl/secure/oauth/token",
													"protocol": "https",
													"host": [
														"beta-api",
														"ah",
														"nl"
													],
													"path": [
														"secure",
														"oauth",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET_EXTERNAL_CUSTOMER_ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {\r",
															"    const respJson = pm.response.json();\r",
															"    pm.environment.set('CUSTOMER_EMDA_ID', respJson.id);\r",
															"};"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{LOGIN_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "https://beta-api.ah.nl/member-service/v1/members",
													"protocol": "https",
													"host": [
														"beta-api",
														"ah",
														"nl"
													],
													"path": [
														"member-service",
														"v1",
														"members"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET_TOKEN_SFCC",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {",
															"    const respJson = pm.response.json();",
															"    pm.environment.set('BM_ACCESS_JWT', respJson['token_type'] + ' ' + respJson['access_token']);",
															"};"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{CLIENT_SECRET}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{CLIENT_ID}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://account.demandware.com/dw/oauth2/access_token",
													"protocol": "https",
													"host": [
														"account",
														"demandware",
														"com"
													],
													"path": [
														"dw",
														"oauth2",
														"access_token"
													]
												}
											},
											"response": []
										},
										{
											"name": "LOGIN_SFCC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {",
															"    const respJson = pm.response.json();",
															"    pm.environment.set(\"JWT_TOKEN\", postman.getResponseHeader(\"Authorization\"));",
															"    pm.environment.set('CUSTOMER_NO', respJson['customer_no']);",
															"    pm.environment.set('CUSTOMER_ID', respJson['customer_id']);",
															"};"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{BM_ACCESS_JWT}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"login\": \"{{CUSTOMER_EMDA_ID}}\",\n    \"client_id\": \"{{CLIENT_ID}}\"\n}"
												},
												"url": {
													"raw": "{{HOST}}/s/{{SITE}}/dw/shop/{{OCAPI_VERSION}}/customers/auth/trustedsystem",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"{{SITE}}",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"customers",
														"auth",
														"trustedsystem"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "CREATE_BASKET",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () =>  {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNr' in shipping attribute value is string\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNr).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNrAdditional' in shipping attribute value is string\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNrAdditional).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNr' in shipping attribute value is string\", () => {\r",
													"    pm.expect(responseJson.billing_address.c_houseNr).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNrAdditional' in shipping attribute value is string\", () => {\r",
													"    pm.expect(responseJson.billing_address.c_houseNrAdditional).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_paymentMethods' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.c_paymentMethods).to.be.a(\"array\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_savedPaymentData' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.c_savedPaymentData).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_savedIssuerId' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.c_savedIssuerId).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    pm.environment.set('BASKET_ID', responseJson.basket_id);\r",
													"}\r",
													"\r",
													"if (pm.response.code === 400 && responseJson.fault && responseJson.fault.arguments.basketIds){\r",
													"    pm.environment.set('BASKET_ID', responseJson.fault.arguments.basketIds);\r",
													"}\r",
													"\r",
													" pm.environment.unset('ORDER_NO');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({",
													"    url:`${environment.HOST}/s/Sites-${environment.SITE}-Site/dw/shop/${environment.OCAPI_VERSION}/baskets/${environment.BASKET_ID}`,",
													"    method:'DELETE',",
													"    header: {",
													"        'x-dw-client-id': `${environment.CLIENT_ID}`,",
													"        'Authorization': `${environment.JWT_TOKEN}`,",
													"    }",
													"})",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets"
											]
										}
									},
									"response": []
								},
								{
									"name": "ADD_PRODUCT_ITEM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () =>  {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    const item_id = responseJson.product_items \r",
													"        && responseJson.product_items.length\r",
													"        && responseJson.product_items[0].item_id;\r",
													"\r",
													"    if (item_id) {\r",
													"        pm.environment.set('ITEM_ID', item_id);\r",
													"    }\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"'c_houseNr' in shipping attribute value is string\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNr).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNrAdditional' in shipping attribute value is string\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNrAdditional).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNr' in shipping attribute value is string\", () => {\r",
													"    pm.expect(responseJson.billing_address.c_houseNr).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNrAdditional' in shipping attribute value is string\", () => {\r",
													"    pm.expect(responseJson.billing_address.c_houseNrAdditional).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.environment.set('PRODUCT_ITEMS_PRICE', responseJson.product_items[0].price);\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    const item_id = responseJson.product_items \r",
													"        && responseJson.product_items.length\r",
													"        && responseJson.product_items[0].item_id;\r",
													"\r",
													"    if (item_id) {\r",
													"        pm.environment.set('ITEM_ID', item_id);\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[{\r\n    \"product_id\" : \"{{PRODUCT_ID_3}}\",\r\n    \"quantity\" : 2.00\r\n}]"
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/items",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets",
												"{{BASKET_ID}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "ADD_SHIPMENT_BILLING",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () =>  {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"'shipments[].shipping_address' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"'shipments[].shipping_address' attribute is not empty\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address).not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"'shipments[].shipping_method' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_method).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"'shipments[].shipping_method' attribute is not empty\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_method).not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"'billing_address' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.billing_address).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"'billing_address' attribute is not empty\", () => {\r",
													"    pm.expect(responseJson.billing_address).not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"'first_name' in billing address is correct\", () => {\r",
													"    pm.expect(responseJson.billing_address.first_name).eq(environment.CUSTOMER_FIRST_NAME);\r",
													"});\r",
													"\r",
													"pm.test(\"'last_name' in billing address is correct\", () => {\r",
													"    pm.expect(responseJson.billing_address.last_name).eq(environment.CUSTOMER_LAST_NAME);\r",
													"});\r",
													"\r",
													"pm.test(\"'city' in billing address is correct\", () => {\r",
													"    pm.expect(responseJson.billing_address.city).eq(environment.CUSTOMER_CITY);\r",
													"});\r",
													"\r",
													"pm.test('\"phone\" in billing address is correct', () => {\r",
													"    pm.expect(responseJson.billing_address.phone).eq(environment.CUSTOMER_PHONE);\r",
													"});\r",
													"\r",
													"pm.test('\"c_houseNr\" in billing address is correct', () => {\r",
													"    pm.expect(responseJson.billing_address.c_houseNr).eq(environment.CUSTOMER_HOUSE_NR);\r",
													"});\r",
													"\r",
													"pm.test(\"'c_email' in billing address is correct\", () => {\r",
													"    pm.expect(responseJson.customer_info.email).eq(environment.CUSTOMER_EMAIL);\r",
													"});\r",
													"\r",
													"pm.test(\"'first_name' in shipping address is correct\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.first_name).eq(environment.CUSTOMER_FIRST_NAME);\r",
													"});\r",
													"\r",
													"pm.test(\"'last_name' in shipping address is correct\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.last_name).eq(environment.CUSTOMER_LAST_NAME);\r",
													"});\r",
													"\r",
													"pm.test(\"'city' in shipping address is correct\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.city).eq(environment.CUSTOMER_CITY);\r",
													"});\r",
													"\r",
													"pm.test('\"phone\" in shipping address is correct', () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.phone).eq(environment.CUSTOMER_PHONE);\r",
													"});\r",
													"\r",
													"pm.test('\"c_houseNr\" in shipping address is correct', () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNr).eq(environment.CUSTOMER_HOUSE_NR);\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNr' attribute value is string\", () => {\r",
													"    pm.expect(responseJson.billing_address.c_houseNr).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNrAdditional' attribute value in billing_address is string\", () => {\r",
													"    pm.expect(responseJson.billing_address.c_houseNrAdditional).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNr' attribute value in shipping_address is string\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNr).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNrAdditional' attribute value in shipping_address is string\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNrAdditional).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"shipping_method\":\r\n  {\r\n    \"id\":\"standard\"\r\n  },\r\n  \"shipping_address\" :\r\n  {\r\n    \"first_name\":\"{{CUSTOMER_FIRST_NAME}}\",\r\n    \"last_name\":\"{{CUSTOMER_LAST_NAME}}\",\r\n    \"address1\": \"Test\",\r\n    \"city\":\"{{CUSTOMER_CITY}}\",\r\n    \"postal_code\": \"{{POSTAL_CODE}}\",\r\n    \"country_code\":\"{{COUNTRY_CODE}}\",\r\n    \"phone\": \"{{CUSTOMER_PHONE}}\",\r\n    \"c_houseNr\": \"{{CUSTOMER_HOUSE_NR}}\",\r\n    \"c_houseNrAdditional\": \"{{CUSTOMER_HOME_NR_ADDITIONAL}}\"\r\n   },\r\n  \"c_email\": \"{{CUSTOMER_EMAIL}}\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/shipments/me",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets",
												"{{BASKET_ID}}",
												"shipments",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "REMOVE_PRODUCT_ITEM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () =>  {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//CustomAddress Shipments",
													"pm.test(\"'c_houseNr' in shipping attribute value is string\", () => {",
													"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNr).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_houseNrAdditional' in shipping attribute value is string\", () => {",
													"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNrAdditional).to.be.a(\"string\");",
													"});",
													"",
													"//CustomShippingMethod",
													"pm.test(\"'c_shippingMinThreshold' attribute value is number\", () => {",
													"    pm.expect(responseJson.shipments[0].shipping_method.c_shippingMinThreshold).to.be.a(\"number\");",
													"});",
													"",
													"pm.test(\"'c_shippingThreshold' attribute value is number\", () => {",
													"    pm.expect(responseJson.shipments[0].shipping_method.c_shippingThreshold).to.be.a(\"number\");",
													"});",
													"",
													"pm.test(\"'c_sorRestricted' attribute value is boolean\", () => {",
													"    pm.expect(responseJson.shipments[0].shipping_method.c_sorRestricted).to.be.a(\"boolean\");",
													"});",
													"",
													"pm.test(\"'c_storePickupEnabled' attribute value is boolean\", () => {",
													"    pm.expect(responseJson.shipments[0].shipping_method.c_storePickupEnabled).to.be.a(\"boolean\");",
													"});",
													"",
													"//CustomAddress Billing",
													"pm.test(\"'c_houseNr' in shipping attribute value is string\", () => {",
													"    pm.expect(responseJson.billing_address.c_houseNr).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_houseNrAdditional' in shipping attribute value is string\", () => {",
													"    pm.expect(responseJson.billing_address.c_houseNrAdditional).to.be.a(\"string\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/items/{{ITEM_ID}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets",
												"{{BASKET_ID}}",
												"items",
												"{{ITEM_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ADD_PRODUCT_ITEM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () =>  {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    const item_id = responseJson.product_items \r",
													"        && responseJson.product_items.length\r",
													"        && responseJson.product_items[0].item_id;\r",
													"\r",
													"    if (item_id) {\r",
													"        pm.environment.set('ITEM_ID', item_id);\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.test(\"'shipments[].shipping_address' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"'shipments[].shipping_address' attribute is not empty\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address).not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"'billing_address' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.billing_address).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"'billing_address' attribute is not empty\", () => {\r",
													"    pm.expect(responseJson.billing_address).not.empty;\r",
													"});\r",
													"\r",
													"pm.test('\"customer id\" is correct', () => {\r",
													"    pm.expect(responseJson.customer_info.customer_id).eq(environment.CUSTOMER_ID);\r",
													"})\r",
													"\r",
													"pm.test('\"product id\" is correct', () => {\r",
													"    pm.expect(responseJson.product_items[0].product_id).eq(environment.PRODUCT_ID_3);\r",
													"})\r",
													"\r",
													"pm.test('\"product total\" is not null', () => {\r",
													"    pm.expect(responseJson.product_total).not.to.be.null;\r",
													"});\r",
													"\r",
													"pm.environment.set('PRODUCT_ITEMS_PRICE', responseJson.product_items[0].price);\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    const item_id = responseJson.product_items \r",
													"        && responseJson.product_items.length\r",
													"        && responseJson.product_items[0].item_id;\r",
													"\r",
													"    if (item_id) {\r",
													"        pm.environment.set('ITEM_ID', item_id);\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[{\r\n    \"product_id\" : \"{{PRODUCT_ID_3}}\",\r\n    \"quantity\" : 6.00\r\n}]"
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/items",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets",
												"{{BASKET_ID}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "ADD_PAYMENT_CREDIT_CARD",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    pm.environment.set('ORDER_TOTAL', responseJson.order_total.toFixed(2));\r",
													"\r",
													"    if (responseJson.payment_instruments && responseJson.payment_instruments[0]) {\r",
													"        pm.environment.set('PAYMENT_INSTRUMENT_ID', responseJson.payment_instruments[0].payment_instrument_id);\r",
													"        pm.environment.set('PAYMENT_METHOD_ID', responseJson.payment_instruments[0].payment_method_id);\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.test('Status code is 200 or 201: ' + pm.response.code, () =>  {\r",
													"    // pm.response.to.have.status(200);\r",
													"    pm.expect([200, 201]).to.include(pm.response.code);\r",
													"});\r",
													"\r",
													"pm.test('\"payment_method_id\" is Adyen', () => {\r",
													"    pm.expect(responseJson.payment_instruments[0].payment_method_id).eq(environment.PAYMENT_METHOD_ADYEN);\r",
													"});\r",
													"\r",
													"pm.test('\"shipments[].shipping_address\" attribute value is object', () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test('\"shipments[].shipping_address\" is not empty', () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address).not.empty;\r",
													"});\r",
													"\r",
													"pm.test('\"shipments[].shipping_method\" attribute value is object', () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_method).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test('\"shipments[].shipping_method\"  attribute is not empty', () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_method).not.empty;\r",
													"});\r",
													"\r",
													"pm.test('\"billing_address\" attribute value is object', () => {\r",
													"    pm.expect(responseJson.billing_address).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test('\"billing_address\" attribute is not empty', () => {\r",
													"    pm.expect(responseJson.billing_address).not.empty;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"amount\": {{ORDER_TOTAL}},\r\n    \"payment_method_id\": \"{{PAYMENT_METHOD_ADYEN}}\",\r\n    \"c_selected_issuer_id\": \"{{ADYEN_CREDIT_CARD_PAYMENT_NAME}}\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/payment_instruments",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets",
												"{{BASKET_ID}}",
												"payment_instruments"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_EXISTING_BASKET",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    pm.environment.set('ORDER_TOTAL', responseJson.order_total);\r",
													"\r",
													"    if (responseJson.payment_instruments && responseJson.payment_instruments[0]) {\r",
													"        pm.environment.set('PAYMENT_INSTRUMENT_ID', responseJson.payment_instruments[0].payment_instrument_id);\r",
													"        pm.environment.set('PAYMENT_METHOD_ID', responseJson.payment_instruments[0].payment_method_id);\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.test('Status code is 200', () =>  {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"'shipments[].shipping_address' attribute is not empty\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address).not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"'shipments[].shipping_address' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"'shipments[].shipping_method' attribute is not empty\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_method).not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"'shipments[].shipping_method' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_method).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"'billing_address' attribute is not empty\", () => {\r",
													"    pm.expect(responseJson.billing_address).not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"'billing_address' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.billing_address).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_airmilesEnabled' attribute value is boolean\", () => {\r",
													"    pm.expect(responseJson.c_airmilesEnabled).to.be.a(\"boolean\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_airmilesComponent' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.c_airmilesComponent).to.be.a(\"object\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{AUTH_ACCESS_TOKEN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets",
												"{{BASKET_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CREATE_ORDER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    const order_no = jsonData.order_no;\r",
													"\r",
													"    if (order_no) {\r",
													"        pm.environment.set('ORDER_NO', order_no);\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response object should have c_source property', () => {\r",
													"    pm.expect(jsonData).to.have.nested.property('c_source');\r",
													"});\r",
													"\r",
													"pm.test('c_source property of response should be equal \"appOCAPI\" or \"ocapiLongtail\"', () => {\r",
													"    const isLongtail = !!jsonData.c_isLongtailOrder;\r",
													"    const source = isLongtail ? 'ocapiLongtail' : 'appOCAPI';\r",
													"    pm.expect(jsonData.c_source).to.equal(source);\r",
													"});\r",
													"\r",
													"pm.test(\"'billing_address' object is returned\", () => {\r",
													"    pm.expect(jsonData.billing_address).to.an(\"object\")\r",
													"})\r",
													"\r",
													"pm.test(\"'email' is user's email\", () => {\r",
													"    pm.expect(jsonData.customer_info.email).eql(environment.CUSTOMER_EMAIL)\r",
													"})\r",
													"\r",
													"pm.test(\"'c_source' attribute exist\", () => {\r",
													"    pm.expect(pm.response.text()).to.include(\"c_source\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"basket_id\": \"{{BASKET_ID}}\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/orders",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "CREDIT_CARD_3DS_PAYMENT_STEP_1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const orderTotal = pm.environment.get('ORDER_TOTAL');",
													"const adyenOrderTotal = parseFloat(orderTotal) * 100;",
													"pm.environment.set('ADYEN_ORDER_TOTAL', adyenOrderTotal);",
													"",
													"const hostUrl = pm.environment.get('HOST');",
													"const orderNo = pm.environment.get('ORDER_NO');",
													"const orderToken = pm.environment.get('ORDER_TOKEN');",
													"const adyenRedirectUrl = `${hostUrl}/mobile-app/order-confirm?ID=${orderNo}&token=${orderToken}`;",
													"pm.environment.set('ADYEN_REDIRECT_URL', adyenRedirectUrl);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test('receive 200 status code', () => {",
													"    pm.expect(pm.response.code).to.be.eq(200);",
													"});",
													"",
													"pm.test('3ds process is initiated', () => {",
													"    pm.expect(jsonData.resultCode).to.be.eq('RedirectShopper');",
													"});",
													"",
													"pm.environment.set(",
													"    'ADYEN_CREDIT_CARD_3DS_REDIRECT_URL',",
													"    jsonData.action.url",
													");",
													"",
													"pm.test('redirect urls is provided', () => {",
													"    const redirectUrl = pm.environment.get('ADYEN_CREDIT_CARD_3DS_REDIRECT_URL');",
													"    pm.expect(redirectUrl).to.be.string;",
													"});",
													"",
													"pm.environment.set(",
													"    'ADYEN_CREDIT_CARD_3DS_REDIRECT_MD',",
													"    jsonData.action.data.MD",
													");",
													"pm.environment.set(",
													"    'ADYEN_CREDIT_CARD_3DS_REDIRECT_PAREQ',",
													"    jsonData.action.data.PaReq",
													");",
													"",
													"pm.test('redirect payload is provided', () => {",
													"    const md = pm.environment.get('ADYEN_CREDIT_CARD_3DS_REDIRECT_MD');",
													"    pm.expect(md).to.be.string;",
													"",
													"    const paReq = pm.environment.get('ADYEN_CREDIT_CARD_3DS_REDIRECT_PAREQ');",
													"    pm.expect(paReq).to.be.string;",
													"});",
													"",
													"pm.test(\"pspReference header is present\", () => {",
													"  pm.response.to.have.header(\"pspReference\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "default"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "default"
											},
											{
												"key": "X-API-Key",
												"value": "{{ADYEN_X_API_KEY}}",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": {\n        \"currency\": \"EUR\",\n        \"value\": {{ADYEN_ORDER_TOTAL}}\n    },\n    \"reference\": \"{{ORDER_NO}}\",\n    \"paymentMethod\": {\n        \"type\": \"scheme\",\n        \"encryptedCardNumber\": \"test_4917610000000000\",\n        \"encryptedExpiryMonth\": \"test_03\",\n        \"encryptedExpiryYear\": \"test_2030\",\n        \"encryptedSecurityCode\": \"test_737\"\n    },\n    \"browserInfo\": {\n        \"userAgent\": \"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9) Gecko/2008052912 Firefox/3.0\",\n        \"acceptHeader\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n        \"javaEnabled\": true,\n        \"colorDepth\": 10,\n        \"screenHeight\": 2000,\n        \"screenWidth\": 3000,\n        \"timeZoneOffset\": 5,\n        \"language\": \"en\"\n    },\n    \"returnUrl\": \"{{ADYEN_REDIRECT_URL}}\",\n    \"merchantAccount\": \"{{ADYEN_MERCHANT_ACCOUNT}}\"\n}"
										},
										"url": {
											"raw": "{{ADYEN_API_BASE_URL}}/payments",
											"host": [
												"{{ADYEN_API_BASE_URL}}"
											],
											"path": [
												"payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_ORDER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'billing_address' object is returned\", () => {",
													"    pm.expect(jsonData.billing_address).to.an(\"object\")",
													"})",
													"",
													"pm.test(\"'confirmation_status' not undefined\", () => {",
													"    pm.expect(jsonData.confirmation_status).not.to.be.undefined",
													"})",
													"",
													"pm.test(\"'email' is user's email\", () => {",
													"    pm.expect(jsonData.customer_info.email).eql(environment.CUSTOMER_EMAIL)",
													"})",
													"",
													"pm.test(\"'order source' is appOCAPI\", () => {",
													"    pm.expect(jsonData.c_source).eql('appOCAPI')",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/orders/{{ORDER_NO}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"orders",
												"{{ORDER_NO}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CREATE_ORDER_WITH_IDEAL_AND_GET_ORDER",
							"item": [
								{
									"name": "LOGIN",
									"item": [
										{
											"name": "LOGIN_MYETOS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {",
															"    const res = pm.response.json();",
															"    pm.environment.set('LOGIN_JWT', res['token_type'] + ' ' + res['access_token']);",
															"    pm.environment.set('AUTH_ACCESS_TOKEN', res['access_token']);",
															"    pm.environment.set('LOGIN_REFRESH_JWT', res['refresh_token']);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{LOGIN_SERVICE_CLIENT_ID}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{LOGIN_SERVICE_CLIENT_SECRET}}",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{CUSTOMER_EMAIL}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{CUSTOMER_PASSWORD}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://beta-api.ah.nl/secure/oauth/token",
													"protocol": "https",
													"host": [
														"beta-api",
														"ah",
														"nl"
													],
													"path": [
														"secure",
														"oauth",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET_EXTERNAL_CUSTOMER_ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {\r",
															"    const respJson = pm.response.json();\r",
															"    pm.environment.set('CUSTOMER_EMDA_ID', respJson.id);\r",
															"};"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{LOGIN_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "https://beta-api.ah.nl/member-service/v1/members",
													"protocol": "https",
													"host": [
														"beta-api",
														"ah",
														"nl"
													],
													"path": [
														"member-service",
														"v1",
														"members"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET_TOKEN_SFCC",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {",
															"    const respJson = pm.response.json();",
															"    pm.environment.set('BM_ACCESS_JWT', respJson['token_type'] + ' ' + respJson['access_token']);",
															"};"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{CLIENT_SECRET}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{CLIENT_ID}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://account.demandware.com/dw/oauth2/access_token",
													"protocol": "https",
													"host": [
														"account",
														"demandware",
														"com"
													],
													"path": [
														"dw",
														"oauth2",
														"access_token"
													]
												}
											},
											"response": []
										},
										{
											"name": "LOGIN_SFCC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {",
															"    const respJson = pm.response.json();",
															"    pm.environment.set(\"JWT_TOKEN\", postman.getResponseHeader(\"Authorization\"));",
															"    pm.environment.set('CUSTOMER_NO', respJson['customer_no']);",
															"    pm.environment.set('CUSTOMER_ID', respJson['customer_id']);",
															"};"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{BM_ACCESS_JWT}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"login\": \"{{CUSTOMER_EMDA_ID}}\",\n    \"client_id\": \"{{CLIENT_ID}}\"\n}"
												},
												"url": {
													"raw": "{{HOST}}/s/{{SITE}}/dw/shop/{{OCAPI_VERSION}}/customers/auth/trustedsystem",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"{{SITE}}",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"customers",
														"auth",
														"trustedsystem"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "CREATE_BASKET",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () =>  {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNr' in shipping attribute value is string\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNr).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNrAdditional' in shipping attribute value is string\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNrAdditional).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNr' in shipping attribute value is string\", () => {\r",
													"    pm.expect(responseJson.billing_address.c_houseNr).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNrAdditional' in shipping attribute value is string\", () => {\r",
													"    pm.expect(responseJson.billing_address.c_houseNrAdditional).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_paymentMethods' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.c_paymentMethods).to.be.a(\"array\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_savedPaymentData' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.c_savedPaymentData).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_savedIssuerId' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.c_savedIssuerId).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    pm.environment.set('BASKET_ID', responseJson.basket_id);\r",
													"}\r",
													"\r",
													"if (pm.response.code === 400 && responseJson.fault && responseJson.fault.arguments.basketIds){\r",
													"    pm.environment.set('BASKET_ID', responseJson.fault.arguments.basketIds);\r",
													"}\r",
													"\r",
													" pm.environment.unset('ORDER_NO');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({",
													"    url:`${environment.HOST}/s/Sites-${environment.SITE}-Site/dw/shop/${environment.OCAPI_VERSION}/baskets/${environment.BASKET_ID}`,",
													"    method:'DELETE',",
													"    header: {",
													"        'x-dw-client-id': `${environment.CLIENT_ID}`,",
													"        'Authorization': `${environment.JWT_TOKEN}`,",
													"    }",
													"})",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets"
											]
										}
									},
									"response": []
								},
								{
									"name": "ADD_PRODUCT_ITEM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () =>  {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    const item_id = responseJson.product_items \r",
													"        && responseJson.product_items.length\r",
													"        && responseJson.product_items[0].item_id;\r",
													"\r",
													"    if (item_id) {\r",
													"        pm.environment.set('ITEM_ID', item_id);\r",
													"    }\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"'c_houseNr' in shipping attribute value is string\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNr).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNrAdditional' in shipping attribute value is string\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNrAdditional).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNr' in shipping attribute value is string\", () => {\r",
													"    pm.expect(responseJson.billing_address.c_houseNr).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNrAdditional' in shipping attribute value is string\", () => {\r",
													"    pm.expect(responseJson.billing_address.c_houseNrAdditional).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.environment.set('PRODUCT_ITEMS_PRICE', responseJson.product_items[0].price);\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    const item_id = responseJson.product_items \r",
													"        && responseJson.product_items.length\r",
													"        && responseJson.product_items[0].item_id;\r",
													"\r",
													"    if (item_id) {\r",
													"        pm.environment.set('ITEM_ID', item_id);\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[{\r\n    \"product_id\" : \"{{PRODUCT_ID_3}}\",\r\n    \"quantity\" : 2.00\r\n}]"
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/items",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets",
												"{{BASKET_ID}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "ADD_SHIPMENT_BILLING",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () =>  {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"'shipments[].shipping_address' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"'shipments[].shipping_address' attribute is not empty\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address).not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"'shipments[].shipping_method' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_method).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"'shipments[].shipping_method' attribute is not empty\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_method).not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"'billing_address' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.billing_address).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"'billing_address' attribute is not empty\", () => {\r",
													"    pm.expect(responseJson.billing_address).not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"'first_name' in billing address is correct\", () => {\r",
													"    pm.expect(responseJson.billing_address.first_name).eq(environment.CUSTOMER_FIRST_NAME);\r",
													"});\r",
													"\r",
													"pm.test(\"'last_name' in billing address is correct\", () => {\r",
													"    pm.expect(responseJson.billing_address.last_name).eq(environment.CUSTOMER_LAST_NAME);\r",
													"});\r",
													"\r",
													"pm.test(\"'city' in billing address is correct\", () => {\r",
													"    pm.expect(responseJson.billing_address.city).eq(environment.CUSTOMER_CITY);\r",
													"});\r",
													"\r",
													"pm.test('\"phone\" in billing address is correct', () => {\r",
													"    pm.expect(responseJson.billing_address.phone).eq(environment.CUSTOMER_PHONE);\r",
													"});\r",
													"\r",
													"pm.test('\"c_houseNr\" in billing address is correct', () => {\r",
													"    pm.expect(responseJson.billing_address.c_houseNr).eq(environment.CUSTOMER_HOUSE_NR);\r",
													"});\r",
													"\r",
													"pm.test(\"'c_email' in billing address is correct\", () => {\r",
													"    pm.expect(responseJson.customer_info.email).eq(environment.CUSTOMER_EMAIL);\r",
													"});\r",
													"\r",
													"pm.test(\"'first_name' in shipping address is correct\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.first_name).eq(environment.CUSTOMER_FIRST_NAME);\r",
													"});\r",
													"\r",
													"pm.test(\"'last_name' in shipping address is correct\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.last_name).eq(environment.CUSTOMER_LAST_NAME);\r",
													"});\r",
													"\r",
													"pm.test(\"'city' in shipping address is correct\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.city).eq(environment.CUSTOMER_CITY);\r",
													"});\r",
													"\r",
													"pm.test('\"phone\" in shipping address is correct', () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.phone).eq(environment.CUSTOMER_PHONE);\r",
													"});\r",
													"\r",
													"pm.test('\"c_houseNr\" in shipping address is correct', () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNr).eq(environment.CUSTOMER_HOUSE_NR);\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNr' attribute value is string\", () => {\r",
													"    pm.expect(responseJson.billing_address.c_houseNr).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNrAdditional' attribute value in billing_address is string\", () => {\r",
													"    pm.expect(responseJson.billing_address.c_houseNrAdditional).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNr' attribute value in shipping_address is string\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNr).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_houseNrAdditional' attribute value in shipping_address is string\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNrAdditional).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"shipping_method\":\r\n  {\r\n    \"id\":\"standard\"\r\n  },\r\n  \"shipping_address\" :\r\n  {\r\n    \"first_name\":\"{{CUSTOMER_FIRST_NAME}}\",\r\n    \"last_name\":\"{{CUSTOMER_LAST_NAME}}\",\r\n    \"address1\": \"Test\",\r\n    \"city\":\"{{CUSTOMER_CITY}}\",\r\n    \"postal_code\": \"{{POSTAL_CODE}}\",\r\n    \"country_code\":\"{{COUNTRY_CODE}}\",\r\n    \"phone\": \"{{CUSTOMER_PHONE}}\",\r\n    \"c_houseNr\": \"{{CUSTOMER_HOUSE_NR}}\",\r\n    \"c_houseNrAdditional\": \"{{CUSTOMER_HOME_NR_ADDITIONAL}}\"\r\n   },\r\n  \"c_email\": \"{{CUSTOMER_EMAIL}}\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/shipments/me",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets",
												"{{BASKET_ID}}",
												"shipments",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "ADD_PAYMENT_IDEAL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    pm.environment.set('ORDER_TOTAL', jsonData.order_total);\r",
													"\r",
													"    if (jsonData.payment_instruments && jsonData.payment_instruments[0]) {\r",
													"        pm.environment.set('PAYMENT_INSTRUMENT_ID', jsonData.payment_instruments[0].payment_instrument_id);\r",
													"        pm.environment.set('PAYMENT_METHOD_ID', jsonData.payment_instruments[0].payment_method_id);\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"amount\": {{ORDER_TOTAL}},\r\n    \"payment_method_id\": \"{{PAYMENT_METHOD_ADYEN}}\",\r\n    \"c_selected_issuer_id\": \"{{ADYEN_IDEAL_PAYMENT_ISSUER}}_{{ADYEN_IDEAL_PAYMENT_NAME}}\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/payment_instruments",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets",
												"{{BASKET_ID}}",
												"payment_instruments"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_EXISTING_BASKET",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    pm.environment.set('ORDER_TOTAL', responseJson.order_total);\r",
													"\r",
													"    if (responseJson.payment_instruments && responseJson.payment_instruments[0]) {\r",
													"        pm.environment.set('PAYMENT_INSTRUMENT_ID', responseJson.payment_instruments[0].payment_instrument_id);\r",
													"        pm.environment.set('PAYMENT_METHOD_ID', responseJson.payment_instruments[0].payment_method_id);\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.test('Status code is 200', () =>  {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"'shipments[].shipping_address' attribute is not empty\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address).not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"'shipments[].shipping_address' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"'shipments[].shipping_method' attribute is not empty\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_method).not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"'shipments[].shipping_method' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_method).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"'billing_address' attribute is not empty\", () => {\r",
													"    pm.expect(responseJson.billing_address).not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"'billing_address' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.billing_address).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_airmilesEnabled' attribute value is boolean\", () => {\r",
													"    pm.expect(responseJson.c_airmilesEnabled).to.be.a(\"boolean\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_airmilesComponent' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.c_airmilesComponent).to.be.a(\"object\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											},
											{
												"key": "access-token",
												"value": "{{AUTH_ACCESS_TOKEN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets",
												"{{BASKET_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CREATE_ORDER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    const order_no = jsonData.order_no;\r",
													"\r",
													"    if (order_no) {\r",
													"        pm.environment.set('ORDER_NO', order_no);\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response object should have c_source property', () => {\r",
													"    pm.expect(jsonData).to.have.nested.property('c_source');\r",
													"});\r",
													"\r",
													"pm.test('c_source property of response should be equal \"appOCAPI\" or \"ocapiLongtail\"', () => {\r",
													"    const isLongtail = !!jsonData.c_isLongtailOrder;\r",
													"    const source = isLongtail ? 'ocapiLongtail' : 'appOCAPI';\r",
													"    pm.expect(jsonData.c_source).to.equal(source);\r",
													"});\r",
													"\r",
													"pm.test(\"'billing_address' object is returned\", () => {\r",
													"    pm.expect(jsonData.billing_address).to.an(\"object\")\r",
													"})\r",
													"\r",
													"pm.test(\"'email' is user's email\", () => {\r",
													"    pm.expect(jsonData.customer_info.email).eql(environment.CUSTOMER_EMAIL)\r",
													"})\r",
													"\r",
													"pm.test(\"'c_source' attribute exist\", () => {\r",
													"    pm.expect(pm.response.text()).to.include(\"c_source\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"basket_id\": \"{{BASKET_ID}}\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/orders",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "IDEAL_PAYMENT_STEP_1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const orderTotal = pm.environment.get('ORDER_TOTAL');",
													"const adyenOrderTotal = parseFloat(orderTotal) * 100;",
													"pm.environment.set('ADYEN_ORDER_TOTAL', adyenOrderTotal);",
													"",
													"const hostUrl = pm.environment.get('HOST');",
													"const orderNo = pm.environment.get('ORDER_NO');",
													"const orderToken = pm.environment.get('ORDER_TOKEN');",
													"const adyenRedirectUrl = `${hostUrl}/mobile-app/order-confirm?ID=${orderNo}&token=${orderToken}`;",
													"pm.environment.set('ADYEN_REDIRECT_URL', adyenRedirectUrl);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test('receive 200 status code', () => {",
													"    pm.expect(pm.response.code).to.be.eq(200);",
													"});",
													"",
													"pm.environment.set('ADYEN_IDEAL_3DS_REDIRECT_URL', jsonData.action.url);",
													"",
													"pm.test('redirect url exist', () => {",
													"    const redirectUrl = pm.environment.get('ADYEN_IDEAL_3DS_REDIRECT_URL');",
													"    pm.expect(redirectUrl).to.be.string;",
													"});",
													"",
													"pm.test(\"pspReference header is present\", () => {",
													"  pm.response.to.have.header(\"pspReference\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "default"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "default"
											},
											{
												"key": "X-API-Key",
												"value": "{{ADYEN_X_API_KEY}}",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": {\n        \"currency\": \"EUR\",\n        \"value\": {{ADYEN_ORDER_TOTAL}}\n    },\n    \"reference\": \"{{ORDER_NO}}\",\n    \"paymentMethod\": {\n        \"type\": \"{{ADYEN_IDEAL_PAYMENT_NAME}}\",\n        \"issuer\": \"{{ADYEN_IDEAL_PAYMENT_ISSUER}}\"\n    },\n    \"returnUrl\": \"{{ADYEN_REDIRECT_URL}}\",\n    \"merchantAccount\": \"{{ADYEN_MERCHANT_ACCOUNT}}\"\n}"
										},
										"url": {
											"raw": "{{ADYEN_API_BASE_URL}}/payments",
											"host": [
												"{{ADYEN_API_BASE_URL}}"
											],
											"path": [
												"payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_ORDER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'billing_address' object is returned\", () => {",
													"    pm.expect(jsonData.billing_address).to.an(\"object\")",
													"})",
													"",
													"pm.test(\"'confirmation_status' not undefined\", () => {",
													"    pm.expect(jsonData.confirmation_status).not.to.be.undefined",
													"})",
													"",
													"pm.test(\"'email' is user's email\", () => {",
													"    pm.expect(jsonData.customer_info.email).eql(environment.CUSTOMER_EMAIL)",
													"})",
													"",
													"pm.test(\"'order source' is appOCAPI\", () => {",
													"    pm.expect(jsonData.c_source).eql('appOCAPI')",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/orders/{{ORDER_NO}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"orders",
												"{{ORDER_NO}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CREATE_AND_GET_DIGITAL_ORDER",
							"item": [
								{
									"name": "LOGIN",
									"item": [
										{
											"name": "LOGIN_MYETOS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {",
															"    const res = pm.response.json();",
															"    pm.environment.set('LOGIN_JWT', res['token_type'] + ' ' + res['access_token']);",
															"    pm.environment.set('AUTH_ACCESS_TOKEN', res['access_token']);",
															"    pm.environment.set('LOGIN_REFRESH_JWT', res['refresh_token']);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{LOGIN_SERVICE_CLIENT_ID}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{LOGIN_SERVICE_CLIENT_SECRET}}",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{CUSTOMER_EMAIL}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{CUSTOMER_PASSWORD}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://beta-api.ah.nl/secure/oauth/token",
													"protocol": "https",
													"host": [
														"beta-api",
														"ah",
														"nl"
													],
													"path": [
														"secure",
														"oauth",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET_EXTERNAL_CUSTOMER_ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {\r",
															"    const respJson = pm.response.json();\r",
															"    pm.environment.set('CUSTOMER_EMDA_ID', respJson.id);\r",
															"};"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{LOGIN_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "https://beta-api.ah.nl/member-service/v1/members",
													"protocol": "https",
													"host": [
														"beta-api",
														"ah",
														"nl"
													],
													"path": [
														"member-service",
														"v1",
														"members"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET_TOKEN_SFCC",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {",
															"    const respJson = pm.response.json();",
															"    pm.environment.set('BM_ACCESS_JWT', respJson['token_type'] + ' ' + respJson['access_token']);",
															"};"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{CLIENT_SECRET}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{CLIENT_ID}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://account.demandware.com/dw/oauth2/access_token",
													"protocol": "https",
													"host": [
														"account",
														"demandware",
														"com"
													],
													"path": [
														"dw",
														"oauth2",
														"access_token"
													]
												}
											},
											"response": []
										},
										{
											"name": "LOGIN_SFCC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {",
															"    const respJson = pm.response.json();",
															"    pm.environment.set(\"JWT_TOKEN\", postman.getResponseHeader(\"Authorization\"));",
															"    pm.environment.set('CUSTOMER_NO', respJson['customer_no']);",
															"    pm.environment.set('CUSTOMER_ID', respJson['customer_id']);",
															"};"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{BM_ACCESS_JWT}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"login\": \"{{CUSTOMER_EMDA_ID}}\",\n    \"client_id\": \"{{CLIENT_ID}}\"\n}"
												},
												"url": {
													"raw": "{{HOST}}/s/{{SITE}}/dw/shop/{{OCAPI_VERSION}}/customers/auth/trustedsystem",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"{{SITE}}",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"customers",
														"auth",
														"trustedsystem"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "CREATE_BASKET",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () =>  {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    pm.environment.set('BASKET_ID', responseJson.basket_id);\r",
													"}\r",
													"\r",
													"if (pm.response.code === 400 && responseJson.fault && responseJson.fault.arguments.basketIds){\r",
													"    pm.environment.set('BASKET_ID', responseJson.fault.arguments.basketIds);\r",
													"}\r",
													"\r",
													"pm.environment.unset('ORDER_NO');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({",
													"    url:`${environment.HOST}/s/Sites-${environment.SITE}-Site/dw/shop/${environment.OCAPI_VERSION}/baskets/${environment.BASKET_ID}`,",
													"    method:'DELETE',",
													"    header: {",
													"        'x-dw-client-id': `${environment.CLIENT_ID}`,",
													"        'Authorization': `${environment.JWT_TOKEN}`,",
													"    }",
													"})",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets"
											]
										}
									},
									"response": []
								},
								{
									"name": "ADD_DIGITAL_PRODUCT_ITEM_VANAAF",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//adding gist cart with float amount is not available at this moment on app\r",
													"\r",
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test.skip('Status code is 200', () =>  {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test.skip('\"customer id\" is correct', () => {\r",
													"    pm.expect(responseJson.customer_info.customer_id).eq(environment.CUSTOMER_ID);\r",
													"})\r",
													"\r",
													"pm.test.skip('\"product id\" is correct', () => {\r",
													"    pm.expect(responseJson.product_items[0].product_id).eq(environment.PRODUCT_ID_DIGITAL_VANAAF);\r",
													"})\r",
													"\r",
													"pm.test.skip('\"product total\" is not null', () => {\r",
													"    pm.expect(responseJson.product_total).not.to.be.null;\r",
													"});\r",
													"\r",
													"pm.test.skip('\"PRODUCT_ITEMS\" is Array', () => {\r",
													"    pm.expect(responseJson.product_items).to.be.an('array');\r",
													"});\r",
													"\r",
													"pm.test.skip('\"PRODUCT_ITEMS\" has length', () => {\r",
													"    pm.expect(responseJson.product_items).to.not.be.empty;\r",
													"});\r",
													"\r",
													"pm.test.skip('\"PRODUCT_ITEMS_PRICE\" exists', () => {\r",
													"    pm.expect(responseJson.product_items && responseJson.product_items[0]).to.not.be.empty;\r",
													"});\r",
													"\r",
													"if (responseJson.product_items && responseJson.product_items[0]) {\r",
													"    pm.environment.set('PRODUCT_ITEMS_PRICE', responseJson.product_items[0].price);\r",
													"}\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    const item_id = responseJson.product_items \r",
													"        && responseJson.product_items.length\r",
													"        && responseJson.product_items[0].item_id;\r",
													"\r",
													"    if (item_id) {\r",
													"        pm.environment.set('ITEM_ID', item_id);\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const body = JSON.parse(pm.request.body)[0];",
													"",
													"const hasOptions = body.option_items && body.option_items[0];",
													"const hasOptionsValueId = hasOptions && body.option_items[0].option_value_id;",
													"",
													"if (hasOptionsValueId) {",
													"    body.option_items[0].option_value_id = +body.option_items[0].option_value_id - 5 + '';",
													"}",
													"",
													"pm.request.body = JSON.stringify([body]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n    {\r\n        \"product_id\": \"{{PRODUCT_ID_DIGITAL_VANAAF}}\",\r\n        \"option_items\": [\r\n            {\r\n                \"option_id\": \"GiftCardPriceValue\",\r\n                \"option_value_id\": \"15\"\r\n            }\r\n        ],\r\n        \"quantity\": 1.00\r\n    }\r\n]"
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/items",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets",
												"{{BASKET_ID}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "ADD_DIGITAL_PRODUCT_ITEM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () =>  {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('\"customer id\" is correct', () => {\r",
													"    pm.expect(responseJson.customer_info.customer_id).eq(environment.CUSTOMER_ID);\r",
													"})\r",
													"\r",
													"pm.test('\"product total\" is not null', () => {\r",
													"    pm.expect(responseJson.product_total).not.to.be.null;\r",
													"});\r",
													"\r",
													"pm.test('\"PRODUCT_ITEMS\" is Array', () => {\r",
													"    pm.expect(responseJson.product_items).to.be.an('array');\r",
													"});\r",
													"\r",
													"pm.test('\"PRODUCT_ITEMS\" has length', () => {\r",
													"    pm.expect(responseJson.product_items).to.not.be.empty;\r",
													"});\r",
													"\r",
													"pm.test('\"PRODUCT_ITEMS_PRICE\" exists', () => {\r",
													"    pm.expect(responseJson.product_items && responseJson.product_items[0]).to.not.be.empty;\r",
													"});\r",
													"\r",
													"if (responseJson.product_items && responseJson.product_items[0]) {\r",
													"    pm.environment.set('PRODUCT_ITEMS_PRICE', responseJson.product_items[0].price);\r",
													"}\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    const item_id = responseJson.product_items \r",
													"        && responseJson.product_items.length\r",
													"        && responseJson.product_items[0].item_id;\r",
													"\r",
													"    if (item_id) {\r",
													"        pm.environment.set('ITEM_ID', item_id);\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n    {\r\n        \"product_id\": \"{{PRODUCT_ID_DIGITAL}}\",\r\n        \"quantity\": 1.00\r\n    }\r\n]"
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/items",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets",
												"{{BASKET_ID}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "ADD_SHIPMENT_BILLING",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () =>  {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('\"shipping_id\" is equal to \"emailOnly\"', () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_method.id).eq(environment.SHIPPING_METHOD_EMAIL_ONLY);\r",
													"});\r",
													"\r",
													"pm.test('\"shipping_total\" is equal to 0', () => {\r",
													"    pm.expect(responseJson.shipping_total).eq(0);\r",
													"});\r",
													"\r",
													"pm.test('\"first_name\" in billing address is correct', () => {\r",
													"    pm.expect(responseJson.billing_address.first_name).eq(environment.CUSTOMER_FIRST_NAME);\r",
													"});\r",
													"\r",
													"pm.test('\"last_name\" in billing address is correct', () => {\r",
													"    pm.expect(responseJson.billing_address.last_name).eq(environment.CUSTOMER_LAST_NAME);\r",
													"});\r",
													"\r",
													"pm.test('\"city\" in billing address is correct', () => {\r",
													"    pm.expect(responseJson.billing_address.city).eq(environment.CUSTOMER_CITY);\r",
													"});\r",
													"\r",
													"pm.test('\"phone\" in billing address is correct', () => {\r",
													"    pm.expect(responseJson.billing_address.phone).eq(environment.CUSTOMER_PHONE);\r",
													"});\r",
													"\r",
													"pm.test('\"c_houseNr\" in billing address is correct', () => {\r",
													"    pm.expect(responseJson.billing_address.c_houseNr).eq(environment.CUSTOMER_HOUSE_NR);\r",
													"});\r",
													"\r",
													"pm.test('\"c_email\" in billing address is correct', () => {\r",
													"    pm.expect(responseJson.customer_info.email).eq(environment.CUSTOMER_EMAIL);\r",
													"});\r",
													"\r",
													"pm.test('\"first_name\" in shipping address is correct', () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.first_name).eq(environment.CUSTOMER_FIRST_NAME);\r",
													"});\r",
													"\r",
													"pm.test('\"last_name\" in shipping address is correct', () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.last_name).eq(environment.CUSTOMER_LAST_NAME);\r",
													"});\r",
													"\r",
													"pm.test('\"city\" in shipping address is correct', () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.city).eq(environment.CUSTOMER_CITY);\r",
													"});\r",
													"\r",
													"pm.test('\"phone\" in shipping address is correct', () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.phone).eq(environment.CUSTOMER_PHONE);\r",
													"});\r",
													"\r",
													"pm.test('\"c_houseNr\" in shipping address is correct', () => {\r",
													"    pm.expect(responseJson.shipments[0].shipping_address.c_houseNr).eq(environment.CUSTOMER_HOUSE_NR);\r",
													"});\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    pm.environment.set('ORDER_TOTAL', responseJson.order_total);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"shipping_method\":\r\n  {\r\n    \"id\":\"{{SHIPPING_METHOD_EMAIL_ONLY}}\"\r\n  },\r\n  \"shipping_address\" :\r\n  {\r\n    \"first_name\":\"{{CUSTOMER_FIRST_NAME}}\",\r\n    \"last_name\":\"{{CUSTOMER_LAST_NAME}}\",\r\n    \"address1\": \"Test\",\r\n    \"city\":\"{{CUSTOMER_CITY}}\",\r\n    \"postal_code\": \"{{POSTAL_CODE}}\",\r\n    \"country_code\":\"{{COUNTRY_CODE}}\",\r\n    \"phone\": \"{{CUSTOMER_PHONE}}\",\r\n    \"c_houseNr\": \"{{CUSTOMER_HOUSE_NR}}\",\r\n    \"c_houseNrAdditional\": \"{{CUSTOMER_HOME_NR_ADDITIONAL}}\"\r\n   },\r\n  \"c_email\": \"{{CUSTOMER_EMAIL}}\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/shipments/me",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets",
												"{{BASKET_ID}}",
												"shipments",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "ADD_PAYMENT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    pm.environment.set('ORDER_TOTAL', jsonData.order_total);\r",
													"\r",
													"    if (jsonData.payment_instruments && jsonData.payment_instruments[0]) {\r",
													"        pm.environment.set('PAYMENT_INSTRUMENT_ID', jsonData.payment_instruments[0].payment_instrument_id);\r",
													"        pm.environment.set('PAYMENT_METHOD_ID', jsonData.payment_instruments[0].payment_method_id);\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.test('Status code is 200', () =>  {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('\"payment_method_id\" is Adyen', () => {\r",
													"    pm.expect(jsonData.payment_instruments[0].payment_method_id).eq(environment.PAYMENT_METHOD_ADYEN);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"amount\": {{ORDER_TOTAL}},\r\n  \"payment_method_id\" : \"Adyen\",\r\n  \"c_selected_issuer_id\" : \"1121_ideal\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}/payment_instruments",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets",
												"{{BASKET_ID}}",
												"payment_instruments"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_EXISTING_BASKET",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () =>  {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/baskets/{{BASKET_ID}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"baskets",
												"{{BASKET_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CREATE_ORDER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"if (pm.response.code === 200 || pm.response.code === 201) {\r",
													"    const order_no = jsonData.order_no;\r",
													"\r",
													"    if (order_no) {\r",
													"        pm.environment.set('ORDER_NO', order_no);\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response object should have c_source property', () => {\r",
													"    pm.expect(jsonData).to.have.nested.property('c_source');\r",
													"});\r",
													"\r",
													"pm.test('c_source property of response should be equal \"appOCAPI\" or \"ocapiLongtail\"', () => {\r",
													"    const isLongtail = !!jsonData.c_isLongtailOrder;\r",
													"    const source = isLongtail ? 'ocapiLongtail' : 'appOCAPI';\r",
													"    pm.expect(jsonData.c_source).to.equal(source);\r",
													"});\r",
													"\r",
													"pm.test(\"'billing_address' object is returned\", () => {\r",
													"    pm.expect(jsonData.billing_address).to.an(\"object\")\r",
													"})\r",
													"\r",
													"pm.test(\"'confirmation_status' not null\", () => {\r",
													"    pm.expect(jsonData.confirmation_status).not.to.be.null\r",
													"})\r",
													"\r",
													"pm.test(\"'email' is user's email\", () => {\r",
													"    pm.expect(jsonData.customer_info.email).eql(environment.CUSTOMER_EMAIL)\r",
													"})\r",
													"\r",
													"pm.test(\"'order_no' not null\", () => {\r",
													"    pm.expect(jsonData.order_no).not.to.be.null\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"basket_id\": \"{{BASKET_ID}}\"\r\n}"
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/orders",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_ORDER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'billing_address' object is returned\", () => {",
													"    pm.expect(jsonData.billing_address).to.an(\"object\")",
													"})",
													"",
													"pm.test(\"'confirmation_status' not null\", () => {",
													"    pm.expect(jsonData.confirmation_status).not.to.be.null",
													"})",
													"",
													"pm.test(\"'email' is user's email\", () => {",
													"    pm.expect(jsonData.customer_info.email).eql(environment.CUSTOMER_EMAIL)",
													"})",
													"",
													"pm.test(\"'order_no' is user's order number\", () => {",
													"    pm.expect(jsonData.order_no).eql(environment.ORDER_NO)",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											},
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/orders/{{ORDER_NO}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"orders",
												"{{ORDER_NO}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "BACK_IN_STOCK",
							"item": [
								{
									"name": "LOGIN",
									"item": [
										{
											"name": "LOGIN_MYETOS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {",
															"    const res = pm.response.json();",
															"    pm.environment.set('LOGIN_JWT', res['token_type'] + ' ' + res['access_token']);",
															"    pm.environment.set('AUTH_ACCESS_TOKEN', res['access_token']);",
															"    pm.environment.set('LOGIN_REFRESH_JWT', res['refresh_token']);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{LOGIN_SERVICE_CLIENT_ID}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{LOGIN_SERVICE_CLIENT_SECRET}}",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{CUSTOMER_EMAIL}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{CUSTOMER_PASSWORD}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://beta-api.ah.nl/secure/oauth/token",
													"protocol": "https",
													"host": [
														"beta-api",
														"ah",
														"nl"
													],
													"path": [
														"secure",
														"oauth",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET_EXTERNAL_CUSTOMER_ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const respJson = pm.response.json();\r",
															"\r",
															"if (pm.response.code === 200) {\r",
															"    pm.environment.set('CUSTOMER_EMDA_ID', respJson.id);\r",
															"};\r",
															"\r",
															"pm.test(\"'id' attribute is Customer's id\", () => {\r",
															"    pm.expect((respJson.id).toString()).to.eql(environment.CUSTOMER_EXTERNAL_ID);\r",
															"});\r",
															"\r",
															"pm.test(\"'emailAddress' attribute is Customer's email\", () => {\r",
															"    pm.expect(respJson.emailAddress).to.eql(environment.CUSTOMER_EMAIL);\r",
															"});\r",
															"\r",
															"pm.test(\"'externalId' attribute exist\", () => {\r",
															"    pm.expect(respJson._embedded.externalids._embedded.items[0].externalId).exist;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{LOGIN_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "https://beta-api.ah.nl/member-service/v1/members",
													"protocol": "https",
													"host": [
														"beta-api",
														"ah",
														"nl"
													],
													"path": [
														"member-service",
														"v1",
														"members"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET_TOKEN_SFCC",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {",
															"    const respJson = pm.response.json();",
															"    pm.environment.set('BM_ACCESS_JWT', respJson['token_type'] + ' ' + respJson['access_token']);",
															"};",
															"",
															"pm.test(\"'access_token' attribute exist\", () => {",
															"    pm.expect(respJson.access_token).exist;",
															"});",
															"",
															"pm.test(\"'token_type' attribute is Bearer\", () => {",
															"    pm.expect(respJson.token_type).to.eql(\"Bearer\");",
															"});",
															"",
															"pm.test(\"'expires_in' attribute exist\", () => {",
															"    pm.expect(respJson.expires_in).exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{CLIENT_SECRET}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{CLIENT_ID}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://account.demandware.com/dw/oauth2/access_token",
													"protocol": "https",
													"host": [
														"account",
														"demandware",
														"com"
													],
													"path": [
														"dw",
														"oauth2",
														"access_token"
													]
												}
											},
											"response": []
										},
										{
											"name": "LOGIN_SFCC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const respJson = pm.response.json();",
															"",
															"if (pm.response.code === 200) {",
															"    pm.environment.set(\"JWT_TOKEN\", postman.getResponseHeader(\"Authorization\"));",
															"    pm.environment.set('CUSTOMER_NO', respJson['customer_no']);",
															"    pm.environment.set('CUSTOMER_ID', respJson['customer_id']);",
															"};",
															"",
															"pm.test(\"'customer_id' attribute exist\", () => {",
															"    pm.expect(respJson.customer_id).exist;",
															"});",
															"",
															"pm.test(\"'customer_no' attribute is Customer's number\", () => {",
															"    pm.expect(respJson.customer_no).to.eql(environment.CUSTOMER_NO);",
															"});",
															"",
															"pm.test(\"'email' attribute is Customer's email\", () => {",
															"    pm.expect(respJson.email).to.eql(environment.CUSTOMER_EMAIL);",
															"});",
															"",
															"pm.test(\"'first_name' attribute is Customer's firstname\", () => {",
															"    pm.expect(respJson.first_name).to.eql(environment.CUSTOMER_FIRST_NAME);",
															"});",
															"",
															"pm.test(\"'last_name' attribute is Customer's lastname\", () => {",
															"    pm.expect(respJson.last_name).to.eql(environment.CUSTOMER_LAST_NAME);",
															"});",
															"",
															"pm.test(\"'phone_home' attribute exist\", () => {",
															"    pm.expect(respJson.phone_home).to.exist || pm.expect(respJson.phone_mobile).to.exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{BM_ACCESS_JWT}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"login\": \"{{CUSTOMER_EMDA_ID}}\",\n    \"client_id\": \"{{CLIENT_ID}}\"\n}"
												},
												"url": {
													"raw": "{{HOST}}/s/{{SITE}}/dw/shop/{{OCAPI_VERSION}}/customers/auth/trustedsystem",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"{{SITE}}",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"customers",
														"auth",
														"trustedsystem"
													]
												}
											},
											"response": []
										},
										{
											"name": "JWT_TO_SESSION",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200 || pm.response.code === 204) {\r",
															"    const res = pm.response;\r",
															"    console.log(res)\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{JWT_TOKEN}}",
														"type": "text"
													},
													{
														"key": "x-dw-client-id",
														"value": "{{CLIENT_ID}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST}}/s/{{SITE}}/dw/shop/{{OCAPI_VERSION}}/sessions",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"{{SITE}}",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"sessions"
													]
												}
											},
											"response": []
										},
										{
											"name": "CSRF-Generate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {\r",
															"    const res = pm.response.json();\r",
															"    const csrf_token = res.csrf && res.csrf.token\r",
															"    pm.environment.set('CSRF_TOKEN', csrf_token);\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "Etos2020",
															"type": "string"
														},
														{
															"key": "username",
															"value": "Storefront",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{JWT_TOKEN}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/CSRF-Generate",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"on",
														"demandware.store",
														"Sites-{{SITE}}-Site",
														"{{LOCALE}}",
														"CSRF-Generate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "BackInStock-Register",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const  jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Success message is displayed\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"Gelukt! Als dit product er weer is sturen we je een e-mail.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "Etos2020",
													"type": "string"
												},
												{
													"key": "username",
													"value": "Storefront",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "{{CUSTOMER_EMAIL}}",
													"type": "text"
												},
												{
													"key": "productId",
													"value": "{{PRODUCT_ID_25_OUOFST}}",
													"type": "text"
												},
												{
													"key": "csrf_token",
													"value": "{{CSRF_TOKEN}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/BackInStock-Register",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"on",
												"demandware.store",
												"Sites-{{SITE}}-Site",
												"{{LOCALE}}",
												"BackInStock-Register"
											]
										}
									},
									"response": []
								},
								{
									"name": "BackInStock-Register_missing_product",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const  jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is displayed\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"Helaas er ging iets mis, probeer het nogmaals.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "Etos2020",
													"type": "string"
												},
												{
													"key": "username",
													"value": "Storefront",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "{{CUSTOMER_EMAIL}}",
													"type": "text"
												},
												{
													"key": "productId",
													"value": "",
													"type": "text"
												},
												{
													"key": "csrf_token",
													"value": "{{CSRF_TOKEN}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/BackInStock-Register",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"on",
												"demandware.store",
												"Sites-{{SITE}}-Site",
												"{{LOCALE}}",
												"BackInStock-Register"
											]
										}
									},
									"response": []
								},
								{
									"name": "BackInStock-Register_missing_email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const  jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is displayed\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"Helaas er ging iets mis, probeer het nogmaals.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "Etos2020",
													"type": "string"
												},
												{
													"key": "username",
													"value": "Storefront",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{JWT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "",
													"type": "text"
												},
												{
													"key": "productId",
													"value": "{{PRODUCT_ID}}",
													"type": "text"
												},
												{
													"key": "csrf_token",
													"value": "{{CSRF_TOKEN}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/BackInStock-Register",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"on",
												"demandware.store",
												"Sites-{{SITE}}-Site",
												"{{LOCALE}}",
												"BackInStock-Register"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "RECENTLY_BOUGHT",
							"item": [
								{
									"name": "LOGIN",
									"item": [
										{
											"name": "LOGIN_MYETOS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {",
															"    const res = pm.response.json();",
															"    pm.environment.set('LOGIN_JWT', res['token_type'] + ' ' + res['access_token']);",
															"    pm.environment.set('AUTH_ACCESS_TOKEN', res['access_token']);",
															"    pm.environment.set('LOGIN_REFRESH_JWT', res['refresh_token']);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{LOGIN_SERVICE_CLIENT_ID}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{LOGIN_SERVICE_CLIENT_SECRET}}",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{CUSTOMER_EMAIL}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{CUSTOMER_PASSWORD}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://beta-api.ah.nl/secure/oauth/token",
													"protocol": "https",
													"host": [
														"beta-api",
														"ah",
														"nl"
													],
													"path": [
														"secure",
														"oauth",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET_EXTERNAL_CUSTOMER_ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const respJson = pm.response.json();\r",
															"\r",
															"if (pm.response.code === 200) {\r",
															"    pm.environment.set('CUSTOMER_EMDA_ID', respJson.id);\r",
															"};\r",
															"\r",
															"pm.test(\"'id' attribute is Customer's id\", () => {\r",
															"    pm.expect((respJson.id).toString()).to.eql(environment.CUSTOMER_EXTERNAL_ID);\r",
															"});\r",
															"\r",
															"pm.test(\"'emailAddress' attribute is Customer's email\", () => {\r",
															"    pm.expect(respJson.emailAddress).to.eql(environment.CUSTOMER_EMAIL);\r",
															"});\r",
															"\r",
															"pm.test(\"'externalId' attribute exist\", () => {\r",
															"    pm.expect(respJson._embedded.externalids._embedded.items[0].externalId).exist;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{LOGIN_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "https://beta-api.ah.nl/member-service/v1/members",
													"protocol": "https",
													"host": [
														"beta-api",
														"ah",
														"nl"
													],
													"path": [
														"member-service",
														"v1",
														"members"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET_TOKEN_SFCC",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {",
															"    const respJson = pm.response.json();",
															"    pm.environment.set('BM_ACCESS_JWT', respJson['token_type'] + ' ' + respJson['access_token']);",
															"};",
															"",
															"pm.test(\"'access_token' attribute exist\", () => {",
															"    pm.expect(respJson.access_token).exist;",
															"});",
															"",
															"pm.test(\"'token_type' attribute is Bearer\", () => {",
															"    pm.expect(respJson.token_type).to.eql(\"Bearer\");",
															"});",
															"",
															"pm.test(\"'expires_in' attribute exist\", () => {",
															"    pm.expect(respJson.expires_in).exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{CLIENT_SECRET}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{CLIENT_ID}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://account.demandware.com/dw/oauth2/access_token",
													"protocol": "https",
													"host": [
														"account",
														"demandware",
														"com"
													],
													"path": [
														"dw",
														"oauth2",
														"access_token"
													]
												}
											},
											"response": []
										},
										{
											"name": "LOGIN_SFCC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const respJson = pm.response.json();",
															"",
															"if (pm.response.code === 200) {",
															"    pm.environment.set(\"JWT_TOKEN\", postman.getResponseHeader(\"Authorization\"));",
															"    pm.environment.set('CUSTOMER_NO', respJson['customer_no']);",
															"    pm.environment.set('CUSTOMER_ID', respJson['customer_id']);",
															"};",
															"",
															"pm.test(\"'customer_id' attribute exist\", () => {",
															"    pm.expect(respJson.customer_id).exist;",
															"});",
															"",
															"pm.test(\"'customer_no' attribute is Customer's number\", () => {",
															"    pm.expect(respJson.customer_no).to.eql(environment.CUSTOMER_NO);",
															"});",
															"",
															"pm.test(\"'email' attribute is Customer's email\", () => {",
															"    pm.expect(respJson.email).to.eql(environment.CUSTOMER_EMAIL);",
															"});",
															"",
															"pm.test(\"'first_name' attribute is Customer's firstname\", () => {",
															"    pm.expect(respJson.first_name).to.eql(environment.CUSTOMER_FIRST_NAME);",
															"});",
															"",
															"pm.test(\"'last_name' attribute is Customer's lastname\", () => {",
															"    pm.expect(respJson.last_name).to.eql(environment.CUSTOMER_LAST_NAME);",
															"});",
															"",
															"pm.test(\"'phone_home' attribute exist\", () => {",
															"    pm.expect(respJson.phone_home).to.exist || pm.expect(respJson.phone_mobile).to.exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{BM_ACCESS_JWT}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"login\": \"{{CUSTOMER_EMDA_ID}}\",\n    \"client_id\": \"{{CLIENT_ID}}\"\n}"
												},
												"url": {
													"raw": "{{HOST}}/s/{{SITE}}/dw/shop/{{OCAPI_VERSION}}/customers/auth/trustedsystem",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"{{SITE}}",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"customers",
														"auth",
														"trustedsystem"
													]
												}
											},
											"response": []
										},
										{
											"name": "JWT_TO_SESSION",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200 || pm.response.code === 204) {\r",
															"    const res = pm.response;\r",
															"    console.log(res)\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{JWT_TOKEN}}",
														"type": "text"
													},
													{
														"key": "x-dw-client-id",
														"value": "{{CLIENT_ID}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST}}/s/{{SITE}}/dw/shop/{{OCAPI_VERSION}}/sessions",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"{{SITE}}",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"sessions"
													]
												}
											},
											"response": []
										},
										{
											"name": "CSRF-Generate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {\r",
															"    const res = pm.response.json();\r",
															"    const csrf_token = res.csrf && res.csrf.token\r",
															"    pm.environment.set('CSRF_TOKEN', csrf_token);\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "Etos2020",
															"type": "string"
														},
														{
															"key": "username",
															"value": "Storefront",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{JWT_TOKEN}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/CSRF-Generate",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"on",
														"demandware.store",
														"Sites-{{SITE}}-Site",
														"{{LOCALE}}",
														"CSRF-Generate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PreviouslyBought-GetAll",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'count' attribute value is number\", () => {",
													"    pm.expect(responseJson.count).to.be.a(\"number\");",
													"});",
													"",
													"pm.test(\"'hits' attribute value is array\", () => {",
													"    pm.expect(responseJson.hits).to.be.a(\"array\");",
													"});",
													"",
													"pm.test(\"'start' attribute value is number\", () => {",
													"    pm.expect(responseJson.start).to.be.a(\"number\");",
													"});",
													"",
													"pm.test(\"'total' attribute value is number\", () => {",
													"    pm.expect(responseJson.total).to.be.a(\"number\");",
													"});",
													"",
													"pm.test(\"'sorting_options' attribute value is array\", () => {",
													"    pm.expect(responseJson.sorting_options).to.be.a(\"array\");",
													"});",
													"",
													"pm.test(\"'selected_sorting_option' attribute value is string\", () => {",
													"    pm.expect(responseJson.selected_sorting_option).to.be.a(\"string\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{STOREFRONT_PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{STOREFRONT_USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "start",
												"value": "1",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/PreviouslyBought-GetAll",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"on",
												"demandware.store",
												"Sites-{{SITE}}-Site",
												"{{LOCALE}}",
												"PreviouslyBought-GetAll"
											]
										}
									},
									"response": []
								},
								{
									"name": "PreviouslyBought-GetAll with params",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'count' attribute value is number\", () => {",
													"    pm.expect(responseJson.count).to.be.a(\"number\");",
													"});",
													"",
													"pm.test(\"'hits' attribute value is array\", () => {",
													"    pm.expect(responseJson.hits).to.be.a(\"array\");",
													"});",
													"",
													"pm.test(\"'start' is equal to 2 \", () => {",
													"    pm.expect(responseJson.start).is.eql(2);",
													"});",
													"",
													"pm.test(\"'total' attribute value is number\", () => {",
													"    pm.expect(responseJson.total).to.be.a(\"number\");",
													"});",
													"",
													"pm.test(\"'sorting_options' attribute value is array\", () => {",
													"    pm.expect(responseJson.sorting_options).to.be.a(\"array\");",
													"});",
													"",
													"pm.test(\"'selected_sorting_option' attribute value is string\", () => {",
													"    pm.expect(responseJson.selected_sorting_option).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'selected_sorting_option' is equal to 2 \", () => {",
													"    pm.expect(responseJson.selected_sorting_option).is.eql(\"mostBought\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{STOREFRONT_PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{STOREFRONT_USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/PreviouslyBought-GetAll?start=2&sort=mostBought",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"on",
												"demandware.store",
												"Sites-{{SITE}}-Site",
												"{{LOCALE}}",
												"PreviouslyBought-GetAll"
											],
											"query": [
												{
													"key": "start",
													"value": "2"
												},
												{
													"key": "sort",
													"value": "mostBought"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "WISHLIST",
							"item": [
								{
									"name": "LOGIN",
									"item": [
										{
											"name": "LOGIN_MYETOS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {",
															"    const res = pm.response.json();",
															"    pm.environment.set('LOGIN_JWT', res['token_type'] + ' ' + res['access_token']);",
															"    pm.environment.set('AUTH_ACCESS_TOKEN', res['access_token']);",
															"    pm.environment.set('LOGIN_REFRESH_JWT', res['refresh_token']);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{LOGIN_SERVICE_CLIENT_ID}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{LOGIN_SERVICE_CLIENT_SECRET}}",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{CUSTOMER_EMAIL}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{CUSTOMER_PASSWORD}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://beta-api.ah.nl/secure/oauth/token",
													"protocol": "https",
													"host": [
														"beta-api",
														"ah",
														"nl"
													],
													"path": [
														"secure",
														"oauth",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET_EXTERNAL_CUSTOMER_ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const respJson = pm.response.json();\r",
															"\r",
															"if (pm.response.code === 200) {\r",
															"    pm.environment.set('CUSTOMER_EMDA_ID', respJson.id);\r",
															"};\r",
															"\r",
															"pm.test(\"'id' attribute is Customer's id\", () => {\r",
															"    pm.expect((respJson.id).toString()).to.eql(environment.CUSTOMER_EXTERNAL_ID);\r",
															"});\r",
															"\r",
															"pm.test(\"'emailAddress' attribute is Customer's email\", () => {\r",
															"    pm.expect(respJson.emailAddress).to.eql(environment.CUSTOMER_EMAIL);\r",
															"});\r",
															"\r",
															"pm.test(\"'externalId' attribute exist\", () => {\r",
															"    pm.expect(respJson._embedded.externalids._embedded.items[0].externalId).exist;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{LOGIN_JWT}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "https://beta-api.ah.nl/member-service/v1/members",
													"protocol": "https",
													"host": [
														"beta-api",
														"ah",
														"nl"
													],
													"path": [
														"member-service",
														"v1",
														"members"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET_TOKEN_SFCC",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {",
															"    const respJson = pm.response.json();",
															"    pm.environment.set('BM_ACCESS_JWT', respJson['token_type'] + ' ' + respJson['access_token']);",
															"};",
															"",
															"pm.test(\"'access_token' attribute exist\", () => {",
															"    pm.expect(respJson.access_token).exist;",
															"});",
															"",
															"pm.test(\"'token_type' attribute is Bearer\", () => {",
															"    pm.expect(respJson.token_type).to.eql(\"Bearer\");",
															"});",
															"",
															"pm.test(\"'expires_in' attribute exist\", () => {",
															"    pm.expect(respJson.expires_in).exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{CLIENT_SECRET}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{CLIENT_ID}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://account.demandware.com/dw/oauth2/access_token",
													"protocol": "https",
													"host": [
														"account",
														"demandware",
														"com"
													],
													"path": [
														"dw",
														"oauth2",
														"access_token"
													]
												}
											},
											"response": []
										},
										{
											"name": "LOGIN_SFCC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const respJson = pm.response.json();",
															"",
															"",
															"if (pm.response.code === 200) {",
															"    pm.environment.set(\"JWT_TOKEN\", postman.getResponseHeader(\"Authorization\"));",
															"    pm.environment.set('CUSTOMER_NO', respJson['customer_no']);",
															"    pm.environment.set('CUSTOMER_ID', respJson['customer_id']);",
															"};",
															"",
															"pm.test(\"'customer_id' attribute exist\", () => {",
															"    pm.expect(respJson.customer_id).exist;",
															"});",
															"",
															"pm.test(\"'customer_no' attribute is Customer's number\", () => {",
															"    pm.expect(respJson.customer_no).to.eql(environment.CUSTOMER_NO);",
															"});",
															"",
															"pm.test(\"'email' attribute is Customer's email\", () => {",
															"    pm.expect(respJson.email).to.eql(environment.CUSTOMER_EMAIL);",
															"});",
															"",
															"pm.test(\"'first_name' attribute is Customer's firstname\", () => {",
															"    pm.expect(respJson.first_name).to.eql(environment.CUSTOMER_FIRST_NAME);",
															"});",
															"",
															"pm.test(\"'last_name' attribute is Customer's lastname\", () => {",
															"    pm.expect(respJson.last_name).to.eql(environment.CUSTOMER_LAST_NAME);",
															"});",
															"",
															"pm.test(\"'phone_home' attribute exist\", () => {",
															"    pm.expect(respJson.phone_home).to.exist || pm.expect(respJson.phone_mobile).to.exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{BM_ACCESS_JWT}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"login\": \"{{CUSTOMER_EMDA_ID}}\",\n    \"client_id\": \"{{CLIENT_ID}}\"\n}"
												},
												"url": {
													"raw": "{{HOST}}/s/{{SITE}}/dw/shop/{{OCAPI_VERSION}}/customers/auth/trustedsystem",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"{{SITE}}",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"customers",
														"auth",
														"trustedsystem"
													]
												}
											},
											"response": []
										},
										{
											"name": "JWT_TO_SESSION",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200 || pm.response.code === 204) {\r",
															"    const res = pm.response;\r",
															"    console.log(res)\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{JWT_TOKEN}}",
														"type": "text"
													},
													{
														"key": "x-dw-client-id",
														"value": "{{CLIENT_ID}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST}}/s/{{SITE}}/dw/shop/{{OCAPI_VERSION}}/sessions",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"s",
														"{{SITE}}",
														"dw",
														"shop",
														"{{OCAPI_VERSION}}",
														"sessions"
													]
												}
											},
											"response": []
										},
										{
											"name": "CSRF-Generate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {\r",
															"    const res = pm.response.json();\r",
															"    const csrf_token = res.csrf && res.csrf.token\r",
															"    pm.environment.set('CSRF_TOKEN', csrf_token);\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{STOREFRONT_PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{STOREFRONT_USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{JWT_TOKEN}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/CSRF-Generate",
													"host": [
														"{{HOST}}"
													],
													"path": [
														"on",
														"demandware.store",
														"Sites-{{SITE}}-Site",
														"{{LOCALE}}",
														"CSRF-Generate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Wishlist-AddProduct",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"'pid' attribute value is string\", () => {\r",
													"    pm.expect(responseJson.pid).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'length' attribute value is number\", () => {\r",
													"    pm.expect(responseJson.length).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"'items' attribute value is array\", () => {\r",
													"    pm.expect(responseJson.items).to.be.a(\"array\");\r",
													"});\r",
													"\r",
													"pm.test(\"'hits' attribute value is array\", () => {\r",
													"    pm.expect(responseJson.hits).to.be.a(\"array\");\r",
													"});\r",
													"\r",
													"pm.test(\"'lastModified' attribute value is string\", () => {\r",
													"    pm.expect(responseJson.lastModified).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'isLoggedIn' attribute value is boolean\", () => {\r",
													"    pm.expect(responseJson.isLoggedIn).to.be.a(\"boolean\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{STOREFRONT_PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{STOREFRONT_USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "pid",
													"value": "{{PRODUCT_ID}}",
													"type": "default"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/Wishlist-AddProduct?mobileApp=true",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"on",
												"demandware.store",
												"Sites-{{SITE}}-Site",
												"{{LOCALE}}",
												"Wishlist-AddProduct"
											],
											"query": [
												{
													"key": "mobileApp",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Wishlist-GetListJson",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"'owner' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.owner).to.be.a(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"'responseJson.owner.exists' attribute value is boolean\", () => {\r",
													"    pm.expect(responseJson.owner.exists).to.be.a(\"boolean\");\r",
													"});\r",
													"\r",
													"pm.test(\"'responseJson.owner.firstName' attribute value is string\", () => {\r",
													"    pm.expect(responseJson.owner.firstName).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'responseJson.owner.lastName' attribute value is string\", () => {\r",
													"    pm.expect(responseJson.owner.lastName).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'publicList' attribute value is boolean\", () => {\r",
													"    pm.expect(responseJson.publicList).to.be.a(\"boolean\");\r",
													"});\r",
													"\r",
													"pm.test(\"'publicView' attribute value is boolean\", () => {\r",
													"    pm.expect(responseJson.publicView).to.be.a(\"boolean\");\r",
													"});\r",
													"\r",
													"pm.test(\"'length' attribute value is number\", () => {\r",
													"    pm.expect(responseJson.length).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"'items' attribute value is array\", () => {\r",
													"    pm.expect(responseJson.items).to.be.a(\"array\");\r",
													"});\r",
													"\r",
													"pm.test(\"'hits' attribute value is array\", () => {\r",
													"    pm.expect(responseJson.hits).to.be.a(\"array\");\r",
													"});\r",
													"\r",
													"pm.test(\"'lastModified' attribute value is string\", () => {\r",
													"    pm.expect(responseJson.lastModified).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'orderMedicalProducts' attribute value is array\", () => {\r",
													"    pm.expect(responseJson.orderMedicalProducts).to.be.a(\"array\");\r",
													"});\r",
													"\r",
													"pm.test(\"'type' attribute value is number\", () => {\r",
													"    pm.expect(responseJson.type).to.be.a(\"number\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{STOREFRONT_PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{STOREFRONT_USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/Wishlist-GetListJson?mobileApp=true",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"on",
												"demandware.store",
												"Sites-{{SITE}}-Site",
												"{{LOCALE}}",
												"Wishlist-GetListJson"
											],
											"query": [
												{
													"key": "mobileApp",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Wishlist-GetListIdsJson",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"'items' attribute value is array\", () => {\r",
													"    pm.expect(responseJson.items).to.be.a(\"array\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{STOREFRONT_PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{STOREFRONT_USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/Wishlist-GetListIdsJson",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"on",
												"demandware.store",
												"Sites-{{SITE}}-Site",
												"{{LOCALE}}",
												"Wishlist-GetListIdsJson"
											]
										}
									},
									"response": []
								},
								{
									"name": "Wishlist-RemoveProduct",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"'pid' attribute value is string\", () => {\r",
													"    pm.expect(responseJson.pid).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'length' attribute value is number\", () => {\r",
													"    pm.expect(responseJson.length).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"'items' attribute value is array\", () => {\r",
													"    pm.expect(responseJson.items).to.be.a(\"array\");\r",
													"});\r",
													"\r",
													"pm.test(\"'hits' attribute value is array\", () => {\r",
													"    pm.expect(responseJson.hits).to.be.a(\"array\");\r",
													"});\r",
													"\r",
													"pm.test(\"'lastModified' attribute value is string\", () => {\r",
													"    pm.expect(responseJson.lastModified).to.be.a(\"string\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{STOREFRONT_PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{STOREFRONT_USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "pid",
													"value": "{{PRODUCT_ID}}",
													"type": "default"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/Wishlist-RemoveProduct?mobileApp=true",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"on",
												"demandware.store",
												"Sites-{{SITE}}-Site",
												"{{LOCALE}}",
												"Wishlist-RemoveProduct"
											],
											"query": [
												{
													"key": "mobileApp",
													"value": "true"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "TEST_CASES",
					"item": [
						{
							"name": "PRODUCT_REQUESTS",
							"item": [
								{
									"name": "GET_PRODUCT_120633857",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_DIGITAL}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_DIGITAL}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_ 20500456",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_biologisch' is equal false \", () => {",
													"    pm.expect(responseJson.c_biologisch).is.eql(false);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_38}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_38}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120437506",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test.skip(\"BUG:ETNL1-9008 'c_applicablePromos' attribute value is array\", () => {",
													"    pm.expect(responseJson.c_applicablePromos).to.be.a(\"array\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_37}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_37}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_111034668",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Product ID is correct', () => {",
													"    ",
													"    const variationProductId = pm.environment.get('VARIATION_PRODUCT_ID');",
													"    pm.expect(responseJson.id).to.eql(variationProductId);",
													"});",
													"",
													"pm.test('\"c_productVariants\" attribute is valid', () => {",
													"    pm.expect(responseJson).to.have.nested.property('c_productVariants[0].variationAttrId');",
													"});",
													"",
													"pm.test(\"'c_selectedQuantity' is equal to 1 \", () => {",
													"    pm.expect(responseJson.c_selectedQuantity).is.eql(1);",
													"});",
													"",
													"pm.test(\"'c_minOrderQuantity' is equal to 1 \", () => {",
													"    pm.expect(responseJson.c_minOrderQuantity).is.eql(1);",
													"});",
													"",
													"pm.test(\"'c_maxOrderQuantity' is equal to 1 \", () => {",
													"    pm.expect(responseJson.c_maxOrderQuantity).is.eql(10);",
													"});",
													"",
													"pm.test(\"'c_productVariants' attribute value is array\", () => {",
													"    pm.expect(responseJson.c_productVariants).to.be.a(\"array\");",
													"});",
													"",
													"pm.test(\"'c_variationAttributes' attribute value is array\", () => {",
													"    pm.expect(responseJson.c_variationAttributes).to.be.a(\"array\");",
													"});",
													"",
													"pm.test(\"'c_isDefaultProductVariant' attribute value is boolean\", () => {",
													"    pm.expect(responseJson.c_isDefaultProductVariant).to.be.a(\"boolean\");",
													"});",
													"",
													"pm.test(\"'c_isDefaultProductVariant' is equal true \", () => {",
													"    pm.expect(responseJson.c_isDefaultProductVariant).is.eql(true);",
													"});",
													"",
													"pm.test(\"'c_masterProductName' attribute value is string\", () => {",
													"\tpm.expect(responseJson.c_masterProductName).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_longDescription' attribute value is string\", () => {",
													"\tpm.expect(responseJson.c_productVariants[0].selectedProductVariant.c_longDescription).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_oneLineLongDescription' attribute value is string\", () => {",
													"\tpm.expect(responseJson.c_oneLineLongDescription).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_additionalTradeItemClassificationCodeValue' attribute value is string\", () => {",
													"\tpm.expect(responseJson.c_additionalTradeItemClassificationCodeValue).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_color' attribute value is string\", () => {",
													"\tpm.expect(responseJson.c_color).to.be.a(\"string\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{VARIATION_PRODUCT_ID}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{VARIATION_PRODUCT_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120092886",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test.skip(\"BUG:ETNL1-9008 'c_adviceVideoURL' attribute value is string \", () => {",
													"    pm.expect(responseJson.c_adviceVideoURL).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_ageTargetGroup' attribute value is array\", () => {",
													"    pm.expect(responseJson.c_ageTargetGroup).to.be.a(\"array\");",
													"});",
													"",
													"pm.test(\"'c_airMilesAllowed' is equal true \", () => {",
													"    pm.expect(responseJson.c_airMilesAllowed).is.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_35}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_35}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120167235",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('response is not include \"c_productVariants\"', () => {",
													"    pm.expect(pm.response.text()).to.not.include('c_productVariants');",
													"});",
													"",
													"pm.test(\"'c_shortDescription' attribute value is string\", () => {",
													"\tpm.expect(responseJson.c_shortDescription).to.be.a(\"string\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_43}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_43}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_111172585",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Product ID is correct', () => {",
													"    pm.expect(responseJson.id).to.eql(environment.PRODUCT_ID_4);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_4}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_4}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120730411",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_nonPhysicalLegalText' exist\", () => {",
													"    pm.expect(responseJson.c_nonPhysicalLegalText).exist;",
													"});",
													"",
													"pm.test(\"'c_nonPhysicalSubTitle' exist\", () => {",
													"    pm.expect(responseJson.c_nonPhysicalSubTitle).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_27}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_27}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_112177775",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Product ID is correct', () => {",
													"    pm.expect(responseJson.id).to.eql(environment.PRODUCT_ID_29_AVAILABLE_VIA_REGULIER);",
													"});",
													"",
													"pm.test('\"c_advicePrice\" is exist', () => {",
													"    pm.expect(responseJson.c_advicePrice).is.exist;",
													"});",
													"",
													"pm.test('\"c_advicePriceWithPromoEnabled\" is true', () => {",
													"    pm.expect(responseJson.c_advicePriceWithPromoEnabled).is.true;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_29_AVAILABLE_VIA_REGULIER}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_29_AVAILABLE_VIA_REGULIER}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_111201278",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('\"c_availableVia\" is Regulie', () => {",
													"    pm.expect(responseJson.c_availableVia).to.eql(\"Regulier\");",
													"});",
													"",
													"pm.test(\"'c_accreditationLabels' attribute value is string\", () => {",
													"\tpm.expect(responseJson.c_accreditationLabels).to.be.a(\"string\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_30}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_30}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_110322369",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_medicineConsumerSalesCondition' exists\", () => {",
													"    pm.expect(responseJson.c_medicineConsumerSalesCondition).exist;",
													"});",
													"",
													"pm.test(\"'c_medicineRegistrationCode' attribute exist\", () => {",
													"    pm.expect(responseJson.c_medicineRegistrationCode).exist;",
													"});",
													"",
													"pm.test(\"'c_productLegalNaming' exist\", () => {",
													"    pm.expect(responseJson.c_productLegalNaming).exist;",
													"});",
													"",
													"pm.test(\"'c_compulsoryAdditiveLabelInformation' exist\", () => {",
													"    pm.expect(responseJson.c_compulsoryAdditiveLabelInformation).exist;",
													"});",
													"",
													"pm.test(\"'c_indication' exist\", () => {",
													"    pm.expect(responseJson.c_indication).exist;",
													"});",
													"",
													"pm.test(\"'c_packageContents' exist\", () => {",
													"    pm.expect(responseJson.c_packageContents).exist;",
													"});",
													"",
													"pm.test(\"'c_nonFoodIngredientStatement' exist\", () => {",
													"    pm.expect(responseJson.c_nonFoodIngredientStatement).exist;",
													"});",
													"",
													"pm.test(\"'c_productDosage' exist\", () => {",
													"    pm.expect(responseJson.c_productDosage).exist;",
													"});",
													"",
													"pm.test(\"'c_usageAgeIndication' exist\", () => {",
													"    pm.expect(responseJson.c_usageAgeIndication).exist;",
													"});",
													"",
													"pm.test(\"'c_usageDuringBreastfeeding' exist\", () => {",
													"    pm.expect(responseJson.c_usageDuringBreastfeeding).exist;",
													"});",
													"",
													"pm.test(\"'c_preparationInstructions' exist\", () => {",
													"    pm.expect(responseJson.c_preparationInstructions).exist;",
													"});",
													"",
													"pm.test(\"'c_consumerUsageStorageInstructionsBySupplier' exist\", () => {",
													"    pm.expect(responseJson.c_consumerUsageStorageInstructionsBySupplier).exist;",
													"});",
													"",
													"pm.test(\"'c_drugSideEffectsAndWarnings' exist\", () => {",
													"    pm.expect(responseJson.c_drugSideEffectsAndWarnings).exist;",
													"});",
													"",
													"pm.test(\"'c_visitDoctorWhen' exist\", () => {",
													"    pm.expect(responseJson.c_visitDoctorWhen).exist;",
													"});",
													"",
													"pm.test(\"'c_usageDuringPregnancy' exist\", () => {",
													"    pm.expect(responseJson.c_usageDuringPregnancy).exist;",
													"});",
													"",
													"pm.test(\"'c_additionalTradeItemClassificationSystemCode' attribute value is array\", () => {",
													"    pm.expect(responseJson.c_additionalTradeItemClassificationSystemCode).to.be.a(\"array\");",
													"});",
													"",
													"pm.test(\"'c_medicalItemValue' attribute value is string\", () => {",
													"\tpm.expect(responseJson.c_medicalItemValue).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_medicineConsumerSalesCondition' attribute value is string\", () => {",
													"\tpm.expect(responseJson.c_medicineConsumerSalesCondition).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_medicineLeafletURL' attribute value is string\", () => {",
													"\tpm.expect(responseJson.c_medicineLeafletURL).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_medicineRegistrationCode' attribute value is string\", () => {",
													"\tpm.expect(responseJson.c_medicineRegistrationCode).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_medicineLeafletURL' attribute value is link\", () => {",
													"    pm.expect(responseJson.c_medicineLeafletURL).contain(\"http\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_8}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_8}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120580011",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_productContactEmail' attribute value is string\", () => {",
													"    pm.expect(responseJson.c_productContactEmail).to.be.a(\"string\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_41}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_41}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_111279032",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_productContactName' attribute value is string\", () => {",
													"    pm.expect(responseJson.c_productContactName).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_productContactAddress' attribute value is string\", () => {",
													"    pm.expect(responseJson.c_productContactAddress).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_productContactPhone' attribute value is string\", () => {",
													"    pm.expect(responseJson.c_productContactPhone).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_productContactWebsite' attribute value is string\", () => {",
													"    pm.expect(responseJson.c_productContactWebsite).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_compulsoryAdditiveLabelInformation' attribute value is string\", () => {",
													"    pm.expect(responseJson.c_compulsoryAdditiveLabelInformation).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_productIngredients' attribute value is string\", () => {",
													"    pm.expect(responseJson.c_productIngredients).to.be.a(\"string\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_42}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_42}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120171824",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('\"c_productImages\" exists', () => {",
													"    pm.expect(responseJson.c_productImages).exist;",
													"});",
													"",
													"pm.test(\"'ean' exist\", () => {",
													"    pm.expect(responseJson.ean).exist;",
													"});",
													"",
													"pm.test(\"'name' exist\", () => {",
													"    pm.expect(responseJson.name).exist;",
													"});",
													"",
													"pm.test(\"'c_packageContents' exist\", () => {",
													"    pm.expect(responseJson.c_packageContents).exist;",
													"});",
													"",
													"pm.test(\"'c_maxOrderQuantity' exist\", () => {",
													"    pm.expect(responseJson.c_maxOrderQuantity).exist;",
													"});",
													"",
													"pm.test(\"'c_maxLimitMessage' exist\", () => {",
													"    pm.expect(responseJson.c_maxLimitMessage).exist;",
													"});",
													"",
													"pm.test(\"'c_readyToOrder' exist\", () => {",
													"    pm.expect(responseJson.c_readyToOrder).exist;",
													"});",
													"",
													"pm.test(\"'c_productSubstance' exist\", () => {",
													"    pm.expect(responseJson.c_productSubstance).exist;",
													"});",
													"",
													"pm.test(\"'c_readyToOrder' attribute value is boolean\", () => {",
													"\tpm.expect(responseJson.c_readyToOrder).to.be.a(\"boolean\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_9}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_9}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120522436",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_extraLabelContentAssetID' exist\", () => {",
													"    pm.expect(responseJson.c_extraLabelContentAssetID).exist;",
													"});",
													"",
													"pm.test(\"'c_available' is equal true \", () => {",
													"    pm.expect(responseJson.c_available).is.eql(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_12}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_12}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120564054",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_advicePrice' exist\", () => {",
													"    pm.expect(responseJson.c_advicePrice).exist;",
													"});",
													"",
													"pm.test(\"'c_advicePrice' attribute value is number\", () => {",
													"    pm.expect(responseJson.c_advicePrice).to.be.a(\"number\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_13}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_13}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120336289",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_batteryWeight' exist\", () => {",
													"    pm.expect(responseJson.c_batteryWeight).exist;",
													"});",
													"",
													"pm.test(\"'c_areBatteriesIncluded' exist\", () => {",
													"    pm.expect(responseJson.c_areBatteriesIncluded).exist;",
													"});",
													"",
													"pm.test(\"'c_areBatteriesIncluded' attribute value is boolean\", () => {",
													"    pm.expect(responseJson.c_areBatteriesIncluded).to.be.a(\"boolean\");",
													"});",
													"",
													"pm.test(\"'c_areBatteriesRequired' attribute value is boolean\", () => {",
													"    pm.expect(responseJson.c_areBatteriesRequired).to.be.a(\"boolean\");",
													"});",
													"",
													"pm.test(\"'c_availableForInStorePickup' attribute value is boolean\", () => {",
													"    pm.expect(responseJson.c_availableForInStorePickup).to.be.a(\"boolean\");",
													"});",
													"",
													"pm.test(\"'c_availableForOnlinePurchase' attribute value is boolean\", () => {",
													"    pm.expect(responseJson.c_availableForOnlinePurchase).to.be.a(\"boolean\");",
													"});",
													"",
													"pm.test(\"'c_quantityOfBatteriesRequired' exist\", () => {",
													"    pm.expect(responseJson.c_quantityOfBatteriesRequired).exist;",
													"});",
													"",
													"pm.test(\"'c_availableForOnlinePurchaseFrom' attribute value is boolean\", () => {",
													"    pm.expect(responseJson.c_availableForOnlinePurchaseFrom).exist;",
													"});",
													"",
													"pm.test(\"'c_batteryTypeCode'exist\", () => {",
													"    pm.expect(responseJson.c_batteryTypeCode).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_14}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_14}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_112132438",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_allergenContains' is equal array \", () => {",
													"    pm.expect(responseJson.c_allergenContains).to.be.a(\"array\");",
													"});",
													"",
													"pm.test(\"'c_allergenInformation' attribute value is string\", () => {",
													"\tpm.expect(responseJson.c_allergenInformation).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_allergenFreeFrom' is equal array \", () => {",
													"    pm.expect(responseJson.c_allergenFreeFrom).to.be.a(\"array\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_15}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_15}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120370701",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_nutrientInfo' exist\", () => {",
													"    pm.expect(responseJson.c_nutrientInfo).exist;",
													"});",
													"",
													"pm.test(\"'c_longDescription' exist\", () => {",
													"     pm.expect(responseJson.c_longDescription).exist;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_16}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_16}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120066557",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_productSubstanceApplForm' attribute value is string\", () => {",
													"    pm.expect(responseJson.c_productSubstanceApplForm).to.be.a(\"string\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_19}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_19}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120587230",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_howToUse' attribute exist\", () => {",
													"    pm.expect(responseJson.c_howToUse).exist;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_20}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_20}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120575028",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_areBatteriesRequired' is equal false \", () => {",
													"    pm.expect(responseJson.c_isDefaultProductVariant).is.eql(false);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_21}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_21}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120545144",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_gHSSignalWordsCodeName' attribute value is string\", () => {",
													"    pm.expect(responseJson.c_gHSSignalWordsCodeName).to.be.a(\"string\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_22}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_22}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_110300012",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_hazardStatementsCodeName' attribute value is string\", () => {",
													"\tpm.expect(responseJson.c_hazardStatementsCodeName).to.be.a(\"string\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_23}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_23}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120561507",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'c_precautionaryStatementsCodeName' exist\", () => {",
													"    pm.expect(responseJson.c_precautionaryStatementsCodeName).exist;",
													"});",
													"",
													"pm.test(\"'c_precautionaryStatementsCodeName' attribute value is string\", () => {",
													"\tpm.expect(responseJson.c_precautionaryStatementsCodeName).to.be.a(\"string\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_24}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_24}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120558691",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"const nonPromoBadgeName = \"Dermacare\";",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Product ID is correct', () => {",
													"    pm.expect(responseJson.id).to.eql(environment.PRODUCT_ID_5);",
													"});",
													"",
													"pm.test(\"'c_packageContents' attribute exist\", () => {",
													"    pm.expect(responseJson.c_packageContents).exist;",
													"});",
													"",
													"pm.test(\"'c_packageContents' attribute value is string\", () => {",
													"\tpm.expect(responseJson.c_packageContents).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_productSubstance' attribute exist\", () => {",
													"    pm.expect(responseJson.c_productSubstance).exist;",
													"});",
													"",
													"pm.test(\"'c_productSubstance' attribute value is string\", () => {",
													"\tpm.expect(responseJson.c_productSubstance).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_price' attribute exist\", () => {",
													"    pm.expect(responseJson.c_price.sales.value).exist;",
													"});",
													"",
													"pm.test(\"'c_price' attribute value is object\", () => {",
													"    pm.expect(responseJson.c_price).to.be.a(\"object\");",
													"});",
													"",
													"pm.test(\"'c_nonPromoBadge' attribute exist\", () => {",
													"    pm.expect(responseJson.c_nonPromoBadge).exist;",
													"});",
													"",
													"pm.test(\"'c_nonPromoBadge' attribute is Dermacare\", () => {",
													"    pm.expect(responseJson.c_nonPromoBadge).is.eql(nonPromoBadgeName);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID_5}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID_5}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_PRODUCT_120470664",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 404', () => {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test('\"ProductNotFoundException\" exception is raised', () => {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.fault.type).to.eql('ProductNotFoundException');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/products/{{PRODUCT_ID}}_missing_product",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"products",
												"{{PRODUCT_ID}}_missing_product"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SEARCH_SUGGESTION",
							"item": [
								{
									"name": "GET_SEARCH_SUGGESTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Search suggestions returned successfully\", () => {\r",
													"    pm.expect(responseJson.query).to.eql(environment.SEARCH_SUGGESTION_QUERY_CUSTOM);\r",
													"});\r",
													"\r",
													"pm.test(\"Brand suggestion exists\", () => {\r",
													"    pm.expect(responseJson.brand_suggestions).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Brand suggestion has values returned\", () => {\r",
													"    pm.expect((responseJson.brand_suggestions.brands).length).is.not.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Category suggestion exists\", () => {\r",
													"    pm.expect(responseJson.category_suggestions).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Category suggestion has values returned\", () => {\r",
													"    pm.expect((responseJson.category_suggestions.categories).length).is.not.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Content suggestion exists\", () => {\r",
													"    pm.expect(responseJson.content_suggestions).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Content suggestion has values returned\", () => {\r",
													"    pm.expect((responseJson.content_suggestions.content).length).is.not.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Custom suggestion exists\", () => {\r",
													"    pm.expect(responseJson.custom_suggestions).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Custom suggestion has values returned\", () => {\r",
													"    pm.expect((responseJson.custom_suggestions.custom_suggestions).length).is.not.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Product suggestion exists\", () => {\r",
													"    pm.expect(responseJson.product_suggestions).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Product suggestion has values returned\", () => {\r",
													"    pm.expect((responseJson.product_suggestions.products).length).is.not.null;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/search_suggestion?q={{SEARCH_SUGGESTION_QUERY_CUSTOM}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"search_suggestion"
											],
											"query": [
												{
													"key": "q",
													"value": "{{SEARCH_SUGGESTION_QUERY_CUSTOM}}",
													"description": "man/Luislashlui"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SEARCH_PRODUCTS_NO_RESULTS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('\"count\" attribute is equal to 0', () => {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.count).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/product_search?q=QWERTY123",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"product_search"
											],
											"query": [
												{
													"key": "q",
													"value": "QWERTY123"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_SEARCH_SUGGESTION_CHARS<3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 400', () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Search character size violation\", () => {\r",
													"    pm.expect(pm.response.text()).to.include(\"StringConstraintViolationException\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/search_suggestion?q={{SEARCH_SUGGESTION_QUERY_<3CHARS}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"search_suggestion"
											],
											"query": [
												{
													"key": "q",
													"value": "{{SEARCH_SUGGESTION_QUERY_<3CHARS}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_SEARCH_SUGGESTION_CHARS>50",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 400', () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Search character size violation\", () => {\r",
													"    pm.expect(pm.response.text()).to.include(\"StringConstraintViolationException\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/search_suggestion?q={{SEARCH_SUGGESTION_QUERY_>50CHARS}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"search_suggestion"
											],
											"query": [
												{
													"key": "q",
													"value": "{{SEARCH_SUGGESTION_QUERY_>50CHARS}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_SEARCH_SUGGESTION_PRODUCT_ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Product suggestion exists\", () => {\r",
													"    pm.expect(responseJson.product_suggestions).exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Product suggestion has values returned\", () => {\r",
													"    pm.expect((responseJson.product_suggestions.products).length).is.not.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Suggestion returned for the ProductId\", () => {\r",
													"    pm.expect(responseJson.product_suggestions.products[0].product_id).to.eql(environment.SEARCH_SUGGESTION_QUERY_PRODUCT_ID)\r",
													"});\r",
													"\r",
													"pm.test(\"Product link returned in suggestion\", () => {\r",
													"    pm.expect(responseJson.product_suggestions.products.link).to.eql(environment.SEARCH_SUGGESTION_QUERY_PRODUCT_LINK)\r",
													"});\r",
													"\r",
													"pm.test(\"Product name returned in suggestion\", () => {\r",
													"    pm.expect(responseJson.product_suggestions.products.product_name).to.eql(environment.SEARCH_SUGGESTION_QUERY_PRODUCT_NAME)\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/search_suggestion?q={{SEARCH_SUGGESTION_QUERY_PRODUCT_ID}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"search_suggestion"
											],
											"query": [
												{
													"key": "q",
													"value": "{{SEARCH_SUGGESTION_QUERY_PRODUCT_ID}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SEARCH_PRODUCTS",
							"item": [
								{
									"name": "PRODUCTS_SEARCH_QUERY_1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"'count' property is more than 0\", () => {\r",
													"    pm.expect(responseJson.count).to.not.eql(0);\r",
													"});\r",
													"\r",
													"pm.test(\"'product_name' property exists for each hit\", () => {\r",
													"    const hitWithoutName = responseJson.hits.find(hit => !hit.product_name);\r",
													"    pm.expect(hitWithoutName).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test(\"'c_productImages' property is array \", () => {\r",
													"    const hitWithProductImages = responseJson.hits.find(hit => hit.c_productImages);\r",
													"    pm.expect(hitWithProductImages.c_productImages).to.be.a(\"array\")\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"'c_packageContents' property exists for hit\", () => {\r",
													"    const hitWithPackageContent = responseJson.hits.find(hit => hit.c_packageContents !== undefined);\r",
													"    pm.expect(hitWithPackageContent).to.be.an('object', 'Could not find the property');\r",
													"});\r",
													"\r",
													"pm.test(\"'c_applicablePromos' property exists for hit\", () => {\r",
													"    const hitWithPromos = responseJson.hits.find(hit => hit.c_applicablePromos !== undefined);\r",
													"    pm.expect(hitWithPromos).to.be.an('object', 'Could not find the property');\r",
													"});\r",
													"\r",
													"pm.test(\"'c_promoBadgeFontColor' property exists for hit\", () => {\r",
													"    const hitWithPromoBadgeFontColor = responseJson.hits.find(hit => hit.c_promoBadgeFontColor !== undefined);\r",
													"    pm.expect(hitWithPromoBadgeFontColor).to.be.an('object', 'Could not find the property');\r",
													"});\r",
													"\r",
													"pm.test(\"'c_promoBadgeColor' and 'c_applicablePromos' properties are occured the same number of time for hits\", () => {\r",
													"    const hitWithMismatchProperties = responseJson.hits.find(\r",
													"        hit => hit.c_promoBadgeColor !== undefined && hit.c_applicablePromos === undefined\r",
													"        || !hit.c_promoBadgeColor === undefined && hit.c_applicablePromos !== undefined\r",
													"    );\r",
													"    pm.expect(hitWithMismatchProperties).to.be.an('undefined', 'Mismatch has been found');\r",
													"});\r",
													"\r",
													"pm.test(\"'c_maxOrderQuantity' property exists for each hit\", () => {\r",
													"    const hitWithMaxOrderQuantity = responseJson.hits.find(hit => hit.c_maxOrderQuantity === undefined);\r",
													"    pm.expect(hitWithMaxOrderQuantity).to.be.an('undefined', 'Could not find the property');\r",
													"});\r",
													"\r",
													"pm.test(\"'c_minOrderQuantity' property exists for each hit\", () => {\r",
													"    const hitWithMinOrderQuantity = responseJson.hits.find(hit => hit.c_maxOrderQuantity === undefined);\r",
													"    pm.expect(hitWithMinOrderQuantity).to.be.an('undefined', 'Could not find the property');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"'c_maxLimitMessage' property exists for each hit\", () => {\r",
													"    const hitWithMaxLimitMessage = responseJson.hits.find(hit => hit.c_maxLimitMessage === undefined);\r",
													"    pm.expect(hitWithMaxLimitMessage).to.be.an('undefined', 'Could not find the property');\r",
													"});\r",
													"\r",
													"pm.test(\"'c_readyToOrder' property exists for each hit\", () => {\r",
													"    const hitWithReadyToOrder = responseJson.hits.find(hit => hit.c_readyToOrder === undefined);\r",
													"    pm.expect(hitWithReadyToOrder).to.be.an('undefined', 'Could not find the property');\r",
													"});\r",
													"\r",
													"pm.test(\"'c_selectedQuantity' property exists for each hit \", () => {\r",
													"    const hitWithSelectedQuantity = responseJson.hits.find(hit => hit.c_selectedQuantity === undefined);\r",
													"    pm.expect(hitWithSelectedQuantity).to.be.an('undefined', 'Could not find the property');\r",
													"});\r",
													"\r",
													"pm.test(\"'c_selectedQuantity' attribute value is number\", () => {\r",
													"pm.expect(responseJson.hits[1].c_selectedQuantity).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_minOrderQuantity' attribute value is number\", () => {\r",
													"pm.expect(responseJson.hits[1].c_minOrderQuantity).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_maxOrderQuantity' attribute value is number\", () => {\r",
													"pm.expect(responseJson.hits[1].c_maxOrderQuantity).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_readyToOrder' attribute value is boolean\", () => {\r",
													"    pm.expect(responseJson.hits[1].c_readyToOrder).to.be.a(\"boolean\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_productVariants' attribute exist\", () => {\r",
													"    pm.expect(pm.response.text()).to.include(\"c_productVariants\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_productVariants' property is array\", () => {\r",
													"    const hitWithSelectedQuantity = responseJson.hits.find(hit => hit.c_productVariants);\r",
													"    pm.expect(hitWithSelectedQuantity.c_productVariants).to.be.a(\"array\")\r",
													"});\r",
													"\r",
													"pm.test(\"'c_productVariants' property is array\", () => {\r",
													"    const hitWithProductVariants = responseJson.hits.find(hit => hit.c_productVariants);\r",
													"    pm.expect(hitWithProductVariants.c_variationAttributes).to.be.a(\"array\")\r",
													"});\r",
													"\r",
													"pm.test(\"'c_isDefaultProductVariant' property exists for each hit\", () => {\r",
													"    const hitIsDefaultProductVariant = responseJson.hits.find(hit => hit.c_isDefaultProductVariant === undefined);\r",
													"    pm.expect(hitIsDefaultProductVariant).to.be.an('undefined', 'Could not find the property');\r",
													"});\r",
													"\r",
													"pm.test(\"'c_isDefaultProductVariant' property is boolean\", () => {\r",
													"    const hitWithProductVariants = responseJson.hits.find(hit => hit.c_isDefaultProductVariant);\r",
													"    pm.expect(hitWithProductVariants.c_isDefaultProductVariant).to.be.a(\"boolean\")\r",
													"});\r",
													"\r",
													"pm.test(\"'c_masterProductName' property is string\", () => {\r",
													"    const hitWithMasterProductName = responseJson.hits.find(hit => hit.c_masterProductName);\r",
													"    pm.expect(hitWithMasterProductName.c_masterProductName).to.be.a(\"string\")\r",
													"});\r",
													"\r",
													"pm.test(\"'c_longDescription' property is string\", () => {\r",
													"    const hitWithLongDescription = responseJson.hits.find(hit => hit.c_longDescription);\r",
													"    pm.expect(hitWithLongDescription.c_longDescription).to.be.a(\"string\")\r",
													"});\r",
													"\r",
													"pm.test(\"'c_shortDescription' property is string\", () => {\r",
													"    const hitWithShortDescription = responseJson.hits.find(hit => hit.c_shortDescription);\r",
													"    pm.expect(hitWithShortDescription.c_shortDescription).to.be.a(\"string\")\r",
													"});\r",
													"\r",
													"pm.test(\"'c_oneLineLongDescription' property exists for each hit\", () => {\r",
													"    const hitWithOneLineLongDescription = responseJson.hits.find(hit => hit.c_oneLineLongDescription === undefined);\r",
													"    pm.expect(hitWithOneLineLongDescription).to.be.an('undefined', 'Could not find the property');\r",
													"});\r",
													"\r",
													"pm.test(\"'c_oneLineLongDescription' property is string\", () => {\r",
													"    const hitWithOneLineLongDescription = responseJson.hits.find(hit => hit.c_oneLineLongDescription);\r",
													"    pm.expect(hitWithOneLineLongDescription.c_oneLineLongDescription).to.be.a(\"string\")\r",
													"});\r",
													"\r",
													"pm.test(\"'c_available' property is boolean\", () => {\r",
													"    const hitWithAvailable = responseJson.hits.find(hit => hit.c_available);\r",
													"    pm.expect(hitWithAvailable.c_available).to.be.a(\"boolean\")\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/product_search?q=Etos",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"product_search"
											],
											"query": [
												{
													"key": "q",
													"value": "Etos"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PRODUCTS_SEARCH_QUERY_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"'count' property is more than 0\", () => {\r",
													"    pm.expect(responseJson.count).to.not.eql(0);\r",
													"});\r",
													"\r",
													"pm.test('\"product_name\" property exists for each hit', () => {\r",
													"    const hitWithoutName = responseJson.hits.find(hit => !hit.product_name);\r",
													"    pm.expect(hitWithoutName).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test('\"c_productSubstance\" property exists for each hit', () => {\r",
													"    const hitWithSubstance = responseJson.hits.find(hit => hit.c_productSubstance === undefined);\r",
													"    pm.expect(hitWithSubstance).to.be.an('undefined', 'Could not find the property');\r",
													"});\r",
													"\r",
													"pm.test(\"'c_productSubstance' attribute value is string\", () => {\r",
													"    pm.expect(responseJson.hits[1].c_productSubstance).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_packageContents' attribute value is string\", () => {\r",
													"    pm.expect(responseJson.hits[1].c_packageContents).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_extraLabelContentAssetID' attribute value is string\", () => {\r",
													"    pm.expect(responseJson.hits[1].c_extraLabelContentAssetID).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_price' attribute value is object\", () => {\r",
													"    pm.expect(responseJson.hits[1].c_price).to.be.a(\"object\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/product_search?q=Bioderma",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"product_search"
											],
											"query": [
												{
													"key": "q",
													"value": "Bioderma"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PRODUCTS_SEARCH_QUERY_3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('\"count\" property is more than 0', () => {\r",
													"    pm.expect(responseJson.count).to.not.eql(0);\r",
													"});\r",
													"\r",
													"pm.test('\"product_name\" property exists for each hit', () => {\r",
													"    const hitWithoutName = responseJson.hits.find(hit => !hit.product_name);\r",
													"    pm.expect(hitWithoutName).to.be.undefined;\r",
													"});\r",
													"\r",
													"pm.test('\"c_badges\" property exists for each hit', () => {\r",
													"    const hitWithBadges = responseJson.hits.find(hit => hit.c_badges === undefined);\r",
													"    pm.expect(hitWithBadges).to.be.an('undefined', 'Could not find the property');\r",
													"});\r",
													"\r",
													"pm.test(\"'c_badges' attribute value is string\", () => {\r",
													"    pm.expect(responseJson.hits[1].c_badges).to.be.a(\"string\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/product_search?q=La Roche-Posay Cicaplast Balsem",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"product_search"
											],
											"query": [
												{
													"key": "q",
													"value": "La Roche-Posay Cicaplast Balsem"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PRODUCTS_SEARCH_QUERY_4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('\"c_extraLabelContentAssetID\" exist', function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"c_extraLabelContentAssetID\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/product_search?q=kabrita 2 opvolgmelk",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"product_search"
											],
											"query": [
												{
													"key": "q",
													"value": "kabrita 2 opvolgmelk"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PRODUCTS_SEARCH_QUERY_5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"'c_advicePrice' attribute value is number\", () => {\r",
													"    pm.expect(responseJson.hits[0].c_advicePrice).to.be.a(\"number\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/product_search?q={{PRODUCT_ID_39}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"product_search"
											],
											"query": [
												{
													"key": "q",
													"value": "{{PRODUCT_ID_39}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PRODUCTS_SEARCH_QUERY_6",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"'c_productType' attribute value is string\", () => {\r",
													"    pm.expect(responseJson.hits[1].c_productType).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"'c_showMedicinePopup' attribute value is string\", () => {\r",
													"    pm.expect(responseJson.hits[0].c_showMedicinePopup).to.be.a(\"boolean\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/product_search?q=panadol",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"product_search"
											],
											"query": [
												{
													"key": "q",
													"value": "panadol"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SEARCH_PRODUCTS_REFINE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('\"count\" attribute is not equal to 0', () => {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.count).to.not.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/product_search?q={{PRODUCTS_SEARCH_QUERY}}&refine_1={{REFINE1}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"product_search"
											],
											"query": [
												{
													"key": "q",
													"value": "{{PRODUCTS_SEARCH_QUERY}}"
												},
												{
													"key": "refine_1",
													"value": "{{REFINE1}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PLP_CATEGORY",
							"item": [
								{
									"name": "GET_CATEGORY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('\"categories\" length is not 0', () => {",
													"    pm.expect(responseJson.categories.length).to.not.eql(0);",
													"});",
													"",
													"pm.test('categories name is \"Beauty\"', () => {",
													"    pm.expect(responseJson.name).equal('Beauty');",
													"});",
													"",
													"pm.test('\"page_description\" not empty', () => {",
													"    pm.expect(responseJson.page_description).not.empty",
													"});",
													"",
													"pm.test('\"page_title\" not empty', () => {",
													"    pm.expect(responseJson.page_title).not.empty",
													"});",
													"",
													"pm.test(\"'c_GFT_BannerTitle' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_GFT_BannerTitle\")",
													"});",
													"",
													"pm.test(\"'c_GFT_BannerTitle' attribute value is string\", () => {",
													"  pm.expect(responseJson.categories[2].c_GFT_BannerTitle).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_GFT_BannerButtonText' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_GFT_BannerButtonText\")",
													"});",
													"",
													"pm.test(\"'c_GFT_BannerButtonText' attribute value is string\", () => {",
													"  pm.expect(responseJson.categories[2].c_GFT_BannerButtonText).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_GFT_BannerCopy' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_GFT_BannerCopy\")",
													"});",
													"",
													"pm.test(\"'c_GFT_BannerCopy' attribute value is string\", () => {",
													"  pm.expect(responseJson.categories[2].c_GFT_BannerCopy).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_GFT_BannerTimeEstimationText' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_GFT_BannerTimeEstimationText\")",
													"});",
													"",
													"pm.test(\"'c_GFT_BannerTimeEstimationText' attribute value is string\", () => {",
													"  pm.expect(responseJson.categories[2].c_GFT_BannerTimeEstimationText).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_GFT_Enabled' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_GFT_Enabled\")",
													"});",
													"",
													"pm.test(\"'c_GFT_Enabled' attribute value is boolean\", () => {",
													"  pm.expect(responseJson.categories[2].c_GFT_Enabled).to.be.a(\"boolean\");",
													"});",
													"",
													"pm.test(\"'c_GFT_MaxNumberOfBrands' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_GFT_MaxNumberOfBrands\")",
													"});",
													"",
													"pm.test(\"'c_GFT_MaxNumberOfBrands' attribute value is number\", () => {",
													"  pm.expect(responseJson.categories[2].c_GFT_MaxNumberOfBrands).to.be.a(\"number\");",
													"});",
													"",
													"pm.test(\"'c_GFT_ModalColorScheme' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_GFT_ModalColorScheme\")",
													"});",
													"",
													"pm.test(\"'c_GFT_ModalColorScheme' attribute value is string\", () => {",
													"  pm.expect(responseJson.categories[2].c_GFT_ModalColorScheme).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_GFT_Q1Text' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_GFT_Q1Text\")",
													"});",
													"",
													"pm.test(\"'c_GFT_Q1Text' attribute value is string\", () => {",
													"  pm.expect(responseJson.categories[2].c_GFT_Q1Text).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_GFT_Q1Options' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_GFT_Q1Options\")",
													"});",
													"",
													"pm.test(\"'c_GFT_Q1Options' attribute value is array\", () => {",
													"  pm.expect(responseJson.categories[2].c_GFT_Q1Options).to.be.a(\"array\");",
													"});",
													"",
													"pm.test(\"'c_GFT_Q3Options' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_GFT_Q3Options\")",
													"});",
													"",
													"pm.test(\"'c_GFT_Q3Options' attribute value is array\", () => {",
													"  pm.expect(responseJson.categories[2].c_GFT_Q3Options).to.be.a(\"array\");",
													"});",
													"",
													"pm.test(\"'c_GFT_Q3Text' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_GFT_Q3Text\")",
													"});",
													"",
													"pm.test(\"'c_GFT_Q3Text' attribute value is string\", () => {",
													"  pm.expect(responseJson.categories[2].c_GFT_Q3Text).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_adviceBannerId' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_adviceBannerId\")",
													"});",
													"",
													"pm.test(\"'c_adviceBannerId' attribute value is string\", () => {",
													"  pm.expect(responseJson.c_adviceBannerId).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_brandBannerColor' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_brandBannerColor\")",
													"});",
													"",
													"pm.test(\"'c_brandBannerColor' attribute value is string\", () => {",
													"  pm.expect(responseJson.c_brandBannerColor).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_brandBannerItems' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_brandBannerItems\")",
													"});",
													"",
													"pm.test(\"'c_brandBannerItems' attribute value is array\", () => {",
													"  pm.expect(responseJson.c_brandBannerItems).to.be.a(\"array\");",
													"});",
													"",
													"pm.test(\"'c_categoryIcon' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_categoryIcon\")",
													"});",
													"",
													"pm.test(\"'c_categoryIcon' attribute value is string\", () => {",
													"  pm.expect(responseJson.c_categoryIcon).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_clpTileIcon' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_clpTileIcon\")",
													"});",
													"",
													"pm.test(\"'c_clpTileIcon' attribute value is image\", () => {",
													"  pm.expect(responseJson.c_clpTileIcon).contain(\".svg\" || \".jpg\" || \".png\");",
													"});",
													"",
													"pm.test(\"'c_displayAs4thLevel' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_displayAs4thLevel\")",
													"});",
													"",
													"pm.test(\"'c_displayAs4thLevel' attribute value is boolean\", () => {",
													"  pm.expect(responseJson.c_displayAs4thLevel).to.be.a(\"boolean\");",
													"});",
													"",
													"pm.test(\"'c_enableCompare' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_enableCompare\")",
													"});",
													"",
													"pm.test(\"'c_enableCompare' attribute value is boolean\", () => {",
													"  pm.expect(responseJson.c_enableCompare).to.be.a(\"boolean\");",
													"});",
													"",
													"pm.test(\"'c_hideMoreButton' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_hideMoreButton\")",
													"});",
													"",
													"pm.test(\"'c_hideMoreButton' attribute value is boolean\", () => {",
													"  pm.expect(responseJson.c_hideMoreButton).to.be.a(\"boolean\");",
													"});",
													"",
													"pm.test(\"'c_hideStorefrontLinks' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_hideStorefrontLinks\")",
													"});",
													"",
													"pm.test(\"'c_hideStorefrontLinks' attribute value is boolean\", () => {",
													"  pm.expect(responseJson.c_hideStorefrontLinks).to.be.a(\"boolean\");",
													"});",
													"",
													"pm.test(\"'c_hideSubCategories' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_hideSubCategories\")",
													"});",
													"",
													"pm.test(\"'c_hideSubCategories' attribute value is boolean\", () => {",
													"  pm.expect(responseJson.c_hideStorefrontLinks).to.be.a(\"boolean\");",
													"});",
													"",
													"pm.test(\"'c_isPageDesignerConfigured' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_isPageDesignerConfigured\")",
													"});",
													"",
													"pm.test(\"'c_isPageDesignerConfigured' attribute value is boolean\", () => {",
													"  pm.expect(responseJson.c_isPageDesignerConfigured).to.be.a(\"boolean\");",
													"});",
													"",
													"pm.test(\"'c_longDescription' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_longDescription\")",
													"});",
													"",
													"pm.test(\"'c_longDescription' attribute value is boolean\", () => {",
													"  pm.expect(responseJson.c_longDescription).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_isPromoCategory' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_isPromoCategory\")",
													"});",
													"",
													"pm.test(\"'c_isPromoCategory' attribute value is boolean\", () => {",
													"  pm.expect(responseJson.c_isPromoCategory).to.be.a(\"boolean\");",
													"});",
													"",
													"pm.test(\"'c_menuRightPromoContentAssetIds' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_menuRightPromoContentAssetIds\")",
													"});",
													"",
													"pm.test(\"'c_menuRightPromoContentAssetIds' attribute value is array\", () => {",
													"  pm.expect(responseJson.c_menuRightPromoContentAssetIds).to.be.a(\"array\");",
													"});",
													"",
													"pm.test(\"'c_isRecentlyBoughtCategory' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_isRecentlyBoughtCategory\")",
													"});",
													"",
													"pm.test(\"'c_isRecentlyBoughtCategory' attribute value is boolean\", () => {",
													"  pm.expect(responseJson.c_isRecentlyBoughtCategory).to.be.a(\"boolean\");",
													"});",
													"",
													"pm.test(\"'c_renderPriceAsThresholds' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_renderPriceAsThresholds\")",
													"});",
													"",
													"pm.test(\"'c_renderPriceAsThresholds' attribute value is boolean\", () => {",
													"  pm.expect(responseJson.c_renderPriceAsThresholds).to.be.a(\"boolean\");",
													"});",
													"",
													"pm.test(\"'c_shortDescription' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_shortDescription\")",
													"});",
													"",
													"pm.test(\"'c_shortDescription' attribute value is string\", () => {",
													"  pm.expect(responseJson.c_responsiveBannerId).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_showAsTopMenuItem' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_showAsTopMenuItem\")",
													"});",
													"",
													"pm.test(\"'c_showAsTopMenuItem' attribute value is boolean\", () => {",
													"  pm.expect(responseJson.c_showAsTopMenuItem).to.be.a(\"boolean\");",
													"});",
													"",
													"pm.test(\"'c_showCountdownTimer' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_showCountdownTimer\")",
													"});",
													"",
													"pm.test(\"'c_showCountdownTimer' attribute value is boolean\", () => {",
													"  pm.expect(responseJson.c_showCountdownTimer).to.be.a(\"boolean\");",
													"});",
													"",
													"pm.test(\"'c_showInLowerMenuItem' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_showInLowerMenuItem\")",
													"});",
													"",
													"pm.test(\"'c_showInLowerMenuItem' attribute value is boolean\", () => {",
													"  pm.expect(responseJson.c_showInLowerMenuItem).to.be.a(\"boolean\");",
													"});",
													"",
													"pm.test(\"'c_showInMenu' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_showInMenu\")",
													"});",
													"",
													"pm.test(\"'c_showInMenu' attribute value is boolean\", () => {",
													"  pm.expect(responseJson.c_showInMenu).to.be.a(\"boolean\");",
													"});",
													"",
													"pm.test(\"'c_showPricePerUnitForB2B' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_showPricePerUnitForB2B\")",
													"});",
													"",
													"pm.test(\"'c_showPricePerUnitForB2B' attribute value is boolean\", () => {",
													"  pm.expect(responseJson.c_showPricePerUnitForB2B).to.be.a(\"boolean\");",
													"});",
													"",
													"pm.test(\"'c_showProductVariationsOnPLP' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_showPricePerUnitForB2B\")",
													"});",
													"",
													"pm.test.skip(\"BUG:ETNL1-9008'c_showProductVariationsOnPLP' attribute value is string\", () => {",
													"  pm.expect(responseJson.c_showProductVariationsOnPLP).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_showRatingsAndReviews' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_showRatingsAndReviews\")",
													"});",
													"",
													"pm.test(\"'c_showRatingsAndReviews' attribute value is boolean\", () => {",
													"  pm.expect(responseJson.c_showRatingsAndReviews).to.be.a(\"boolean\");",
													"});",
													"",
													"pm.test(\"'c_themeHeaderColor' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_themeHeaderColor\")",
													"});",
													"",
													"pm.test(\"'c_themeHeaderColor' attribute value is string\", () => {",
													"  pm.expect(responseJson.c_themeHeaderColor).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"'c_tileIcon' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_tileIcon\")",
													"});",
													"",
													"pm.test(\"'c_tileIcon' attribute value is image\", () => {",
													"    pm.expect(responseJson.c_clpTileIcon).contain(\".svg\" || \".jpg\" || \".png\");",
													"});",
													"",
													"pm.test(\"'c_tileImage' attribute exist\", () => {",
													"    pm.expect(pm.response.text()).to.include(\"c_tileImage\")",
													"});",
													"",
													"pm.test(\"'c_tileImage' attribute value is image\", () => {",
													"    pm.expect(responseJson.c_clpTileIcon).contain(\".svg\" || \".jpg\" || \".png\");",
													"});",
													"",
													"pm.test(\"'c_GFT_BannerBackgroundImage' attribute value is image\", () => {",
													"    pm.expect(responseJson.categories[2].c_GFT_BannerBackgroundImage).contain(\"https\");",
													"});",
													"",
													"pm.test(\"'c_GFT_Q2Text' value is string\", () => {",
													"    pm.expect(responseJson.categories[2].c_GFT_Q2Text).to.be.a(\"string\");",
													"});",
													"",
													"pm.test('\"c_hideInMobileAppMenuNavigation\" is not true', () => {",
													"    pm.expect(responseJson.c_hideInMobileAppMenuNavigation).to.be.not.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/categories/{{CATEGORY_ID_1}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"categories",
												"{{CATEGORY_ID_1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_CATEGORY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('\"categories\" length is not 0', () => {",
													"    pm.expect(responseJson.categories.length).to.not.eql(0);",
													"});",
													"",
													"pm.test('categories name is \"Verzorging\"', () => {",
													"    pm.expect(responseJson.name).equal('Verzorging');",
													"});",
													"",
													"pm.test('\"image\" contains the url', () => {",
													"    pm.expect(responseJson.image).contain('https:')",
													"});",
													"",
													"pm.test('\"page_description\" not empty', () => {",
													"    pm.expect(responseJson.page_description).not.empty",
													"});",
													"",
													"pm.test('\"page_title\" not empty', () => {",
													"    pm.expect(responseJson.page_title).not.empty",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/categories/{{CATEGORY_ID_2}}?levels={{CATEGORY_NESTED_LEVEL_2}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"categories",
												"{{CATEGORY_ID_2}}"
											],
											"query": [
												{
													"key": "levels",
													"value": "{{CATEGORY_NESTED_LEVEL_2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_CATEGORY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('categories name is \"Gezondheid oud\"', () => {",
													"    pm.expect(responseJson.name).equal('Gezondheid oud');",
													"});",
													"",
													"pm.test('\"image\" contains the url', () => {",
													"    pm.expect(responseJson.image).contain('https:')",
													"});",
													"",
													"pm.test('\"page_description\" not empty', () => {",
													"    pm.expect(responseJson.page_description).not.empty",
													"});",
													"",
													"pm.test('\"page_title\" not empty', () => {",
													"    pm.expect(responseJson.page_title).not.empty",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/categories/{{CATEGORY_ID_3}}?levels={{CATEGORY_NESTED_LEVEL_3}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"categories",
												"{{CATEGORY_ID_3}}"
											],
											"query": [
												{
													"key": "levels",
													"value": "{{CATEGORY_NESTED_LEVEL_3}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_CATEGORY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 404', () => {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test('\"type\" is \"ResourcePathNotFoundException\"', () => {",
													"    pm.expect(responseJson.fault.type).equal('ResourcePathNotFoundException');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/categories/",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"categories",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_CATEGORY_RECENTLY_BOUGHT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('categories name is \"Eerder gekocht\"', () => {",
													"    pm.expect(responseJson.name).equal('Eerder gekocht');",
													"});",
													"",
													"pm.test('`c_isRecentlyBoughtCategory` is equal `true`', () => {",
													"    pm.expect(responseJson.c_isRecentlyBoughtCategory).to.be.true;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/categories/{{CATEGORY_RECENTLY_BOUGHT_1}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"categories",
												"{{CATEGORY_RECENTLY_BOUGHT_1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_CATEGORIES",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('\"count\" is 2', () => {",
													"    pm.expect(responseJson.count).equal(2);",
													"});",
													"",
													"pm.test('\"total\" is 2', () => {",
													"    pm.expect(responseJson.total).equal(2);",
													"});",
													"",
													"pm.test('\"data\" length is not 0', () => {",
													"    pm.expect(responseJson.data.length).to.not.eql(0);",
													"});",
													"",
													"pm.test('categories name is \"Beauty\"', () => {",
													"    pm.expect(responseJson.data[0].name).equal('Beauty');",
													"});",
													"",
													"pm.test('categories name is \"Verzorging\"', () => {",
													"    pm.expect(responseJson.data[1].name).equal('Verzorging');",
													"});",
													"",
													"pm.test('\"c_tileIcon\" contains the url', () => {",
													"    pm.expect(responseJson.data[0].c_tileIcon).contain('https:')",
													"});",
													"",
													"pm.test('\"image\" contains the url', () => {",
													"    pm.expect(responseJson.data[0].image).contain('https:')",
													"});",
													"",
													"pm.test('\"image\" contains the url', () => {",
													"    pm.expect(responseJson.data[1].image).contain('https:')",
													"});",
													"",
													"pm.test('\"page_description\" not empty', () => {",
													"    pm.expect(responseJson.data[0].page_description).not.empty",
													"});",
													"",
													"pm.test('\"page_description\" not empty', () => {",
													"    pm.expect(responseJson.data[1].page_description).not.empty",
													"});",
													"",
													"pm.test('\"page_title\" not empty', () => {",
													"    pm.expect(responseJson.data[0].page_title).not.empty",
													"});",
													"",
													"pm.test('\"page_title\" not empty', () => {",
													"    pm.expect(responseJson.data[1].page_title).not.empty",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/categories/({{CATEGORY_ID_1}},{{CATEGORY_ID_2}})",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"categories",
												"({{CATEGORY_ID_1}},{{CATEGORY_ID_2}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_CATEGORIES",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('\"count\" is 2', () => {",
													"    pm.expect(responseJson.count).equal(3);",
													"});",
													"",
													"pm.test('\"total\" is 2', () => {",
													"    pm.expect(responseJson.total).equal(3);",
													"});",
													"",
													"pm.test('\"data\" length is not 0', () => {",
													"    pm.expect(responseJson.data.length).to.not.eql(0);",
													"});",
													"",
													"pm.test('categories name is \"Beauty\"', () => {",
													"    pm.expect(responseJson.data[0].name).equal('Beauty');",
													"});",
													"",
													"pm.test('categories name is \"Verzorging\"', () => {",
													"    pm.expect(responseJson.data[1].name).equal('Verzorging');",
													"});",
													"",
													"pm.test('categories name is \"Gezondheid oud\"', () => {",
													"    pm.expect(responseJson.data[2].name).equal('Gezondheid oud');",
													"});",
													"",
													"",
													"pm.test('\"c_tileIcon\" contains the url', () => {",
													"    pm.expect(responseJson.data[0].c_tileIcon).contain('https:')",
													"});",
													"",
													"pm.test('\"image\" contains the url', () => {",
													"    pm.expect(responseJson.data[0].image).contain('https:')",
													"});",
													"",
													"pm.test('\"image\" contains the url', () => {",
													"    pm.expect(responseJson.data[1].image).contain('https:')",
													"});",
													"",
													"pm.test('\"image\" contains the url', () => {",
													"    pm.expect(responseJson.data[2].image).contain('https:')",
													"});",
													"",
													"",
													"pm.test('\"page_description\" not empty', () => {",
													"    pm.expect(responseJson.data[0].page_description).not.empty",
													"});",
													"",
													"pm.test('\"page_description\" not empty', () => {",
													"    pm.expect(responseJson.data[1].page_description).not.empty",
													"});",
													"",
													"pm.test('\"page_description\" not empty', () => {",
													"    pm.expect(responseJson.data[2].page_description).not.empty",
													"});",
													"",
													"pm.test('\"page_title\" not empty', () => {",
													"    pm.expect(responseJson.data[0].page_title).not.empty",
													"});",
													"",
													"pm.test('\"page_title\" not empty', () => {",
													"    pm.expect(responseJson.data[1].page_title).not.empty",
													"});",
													"",
													"pm.test('\"page_title\" not empty', () => {",
													"    pm.expect(responseJson.data[2].page_title).not.empty",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/categories/({{CATEGORY_ID_1}},{{CATEGORY_ID_2}},{{CATEGORY_ID_3}})",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"categories",
												"({{CATEGORY_ID_1}},{{CATEGORY_ID_2}},{{CATEGORY_ID_3}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_CATEGORY_SL_BANNER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('c_appCategorySLTop exists', () => {\r",
													"    pm.expect(responseJson.c_appCategorySLTop).exist;\r",
													"});\r",
													"\r",
													"if (responseJson.c_appCategorySLTop) {\r",
													"    pm.test('c_appCategorySLTopContent exists', () => {\r",
													"        pm.expect(responseJson.c_appCategorySLTopContent).exist;\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.test('c_appCategorySLMiddle exist', () => {\r",
													"    pm.expect(responseJson.c_appCategorySLMiddle).exist;\r",
													"});\r",
													"\r",
													"if (responseJson.c_appCategorySLMiddle) {\r",
													"    pm.test('c_appCategorySLMiddleContent exists', () => {\r",
													"        pm.expect(responseJson.c_appCategorySLMiddleContent).exist;\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.test('SL related category attributes are of string type', () => {\r",
													"    const attributes = ['c_appCategorySLTop', 'c_appCategorySLTopContent', 'c_appCategorySLMiddle', 'c_appCategorySLMiddleContent'];\r",
													"    attributes.forEach((attribute) => {\r",
													"        pm.expect(typeof responseJson[attribute]).to.equal('string');\r",
													"    })\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/categories/{{CATEGORY_ID_1_1_1}}?levels={{CATEGORY_NESTED_LEVEL_0}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"categories",
												"{{CATEGORY_ID_1_1_1}}"
											],
											"query": [
												{
													"key": "levels",
													"value": "{{CATEGORY_NESTED_LEVEL_0}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_DUMMY_CATEGORY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('\"c_hideInMobileAppMenuNavigation\" is true', () => {",
													"    pm.expect(responseJson.c_hideInMobileAppMenuNavigation).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{REQ_ORIGIN}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/categories/{{DUMMY_CATEGORY_ID_1}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"categories",
												"{{DUMMY_CATEGORY_ID_1}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "STORES",
							"item": [
								{
									"name": "GET_STORE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('\"id\" correct', () => {",
													"    pm.expect(responseJson.id).equal(environment.STORE_ID);",
													"});",
													"",
													"pm.test('\"name\" is correct', () => {",
													"    pm.expect(responseJson.name).equal('Etos Veerweg Waalwijk');",
													"});",
													"",
													"pm.test('\"latitude\" is correct', () => {",
													"    pm.expect(responseJson.latitude).equal(6.308797);",
													"});",
													"",
													"pm.test('\"longitude\" is correct', () => {",
													"    pm.expect(responseJson.longitude).equal(52.052339);",
													"});",
													"",
													"pm.test('\"c_houseNr\" is correct', () => {",
													"    pm.expect(responseJson.c_houseNr).equal(\"16\");",
													"});",
													"",
													"pm.test('\"email\" is correct', () => {",
													"    pm.expect(responseJson.email).equal(\"annemarie.niemeijer@etos.nl\");",
													"});",
													"",
													"pm.test('\"phone\" is correct', () => {",
													"    pm.expect(responseJson.phone).equal(\"030-2463115\");",
													"});",
													"",
													"pm.test('\"c_storeType\" is correct', () => {",
													"    pm.expect(responseJson.c_storeType).equal(\"ETOS_FRANCHISE_STORE\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/stores/{{STORE_ID}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"stores",
												"{{STORE_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_MULPTIPLE_STORES",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('\"total\" is 3', () => {",
													"    pm.expect(responseJson.total).equal(3);",
													"});",
													"",
													"pm.test('\"count\" is 3', () => {",
													"    pm.expect(responseJson.count).equal(3);",
													"});",
													"",
													"pm.test('\"id\" correct', () => {",
													"    pm.expect(responseJson.data[0].id).equal(environment.STORE_ID);",
													"});",
													"",
													"pm.test('\"name\" is correct', () => {",
													"    pm.expect(responseJson.data[0].name).equal('Etos Veerweg Waalwijk');",
													"});",
													"",
													"pm.test('\"latitude\" is correct', () => {",
													"    pm.expect(responseJson.data[0].latitude).equal(6.308797);",
													"});",
													"",
													"pm.test('\"longitude\" is correct', () => {",
													"    pm.expect(responseJson.data[0].longitude).equal(52.052339);",
													"});",
													"",
													"pm.test('\"postal_code\" is correct', () => {",
													"    pm.expect(responseJson.data[0].postal_code).equal('5154 NS');",
													"});",
													"",
													"pm.test('\"c_houseNr\" is correct', () => {",
													"    pm.expect(responseJson.data[0].c_houseNr).equal('16');",
													"});",
													"",
													"pm.test('\"email\" is correct', () => {",
													"    pm.expect(responseJson.data[0].email).equal('annemarie.niemeijer@etos.nl');",
													"});",
													"",
													"pm.test('\"phone\" is correct', () => {",
													"    pm.expect(responseJson.data[0].phone).equal('030-2463115');",
													"});",
													"",
													"pm.test('\"c_storeType\" is correct', () => {",
													"    pm.expect(responseJson.data[0].c_storeType).equal('ETOS_FRANCHISE_STORE');",
													"});",
													"",
													"pm.test('\"id\" correct', () => {",
													"    pm.expect(responseJson.data[1].id).equal(environment.STORE_ID2);",
													"});",
													"",
													"pm.test('\"name\" is correct', () => {",
													"    pm.expect(responseJson.data[1].name).equal('Etos Sniederslaan Bladel');",
													"});",
													"",
													"pm.test('\"latitude\" is correct', () => {",
													"    pm.expect(responseJson.data[1].latitude).equal(51.367714);",
													"});",
													"",
													"pm.test('\"longitude\" is correct', () => {",
													"    pm.expect(responseJson.data[1].longitude).equal(5.220385);",
													"});",
													"",
													"pm.test('\"postal_code\" is correct', () => {",
													"    pm.expect(responseJson.data[1].postal_code).equal('5531 EH');",
													"});",
													"",
													"pm.test('\"c_houseNr\" is correct', () => {",
													"    pm.expect(responseJson.data[1].c_houseNr).equal('51');",
													"});",
													"",
													"pm.test('\"email\" is correct', () => {",
													"    pm.expect(responseJson.data[1].email).equal('ETOS.Bladel6010@etos.nl');",
													"});",
													"",
													"pm.test('\"phone\" is correct', () => {",
													"    pm.expect(responseJson.data[1].phone).equal('0497-380395');",
													"});",
													"",
													"pm.test('\"c_storeType\" is correct', () => {",
													"    pm.expect(responseJson.data[1].c_storeType).equal('ETOS_FRANCHISE_STORE');",
													"});",
													"",
													"pm.test('\"id\" correct', () => {",
													"    pm.expect(responseJson.data[2].id).equal(environment.STORE_ID3);",
													"});",
													"",
													"pm.test('\"name\" is correct', () => {",
													"    pm.expect(responseJson.data[2].name).equal('Etos Heuvel Geldrop');",
													"});",
													"",
													"pm.test('\"latitude\" is correct', () => {",
													"    pm.expect(responseJson.data[2].latitude).equal(51.421993);",
													"});",
													"",
													"pm.test('\"longitude\" is correct', () => {",
													"    pm.expect(responseJson.data[2].longitude).equal(5.558763);",
													"});",
													"",
													"pm.test('\"postal_code\" is correct', () => {",
													"    pm.expect(responseJson.data[2].postal_code).equal('5664 HM');",
													"});",
													"",
													"pm.test('\"c_houseNr\" is correct', () => {",
													"    pm.expect(responseJson.data[2].c_houseNr).equal('42');",
													"});",
													"",
													"pm.test('\"email\" is correct', () => {",
													"    pm.expect(responseJson.data[2].email).equal('ETOS.Geldrop6014@etos.nl');",
													"});",
													"",
													"pm.test('\"phone\" is correct', () => {",
													"    pm.expect(responseJson.data[2].phone).equal('040-2850160');",
													"});",
													"",
													"pm.test('\"c_storeType\" is correct', () => {",
													"    pm.expect(responseJson.data[2].c_storeType).equal('ETOS_FRANCHISE_STORE');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/stores/({{STORE_ID}},{{STORE_ID2}},{{STORE_ID3}})",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"stores",
												"({{STORE_ID}},{{STORE_ID2}},{{STORE_ID3}})"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET_STORES",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('\"count\" is 10', () => {",
													"    pm.expect(responseJson.count).equal(10);",
													"});",
													"",
													"pm.test('\"id\" correct', () => {",
													"    pm.expect(responseJson.data[0].id).equal(environment.STORE_ID);",
													"});",
													"",
													"pm.test('\"name\" is correct', () => {",
													"    pm.expect(responseJson.data[0].name).equal('Etos Veerweg Waalwijk');",
													"});",
													"",
													"pm.test('\"latitude\" is correct', () => {",
													"    pm.expect(responseJson.data[0].latitude).equal(6.308797);",
													"});",
													"",
													"pm.test('\"longitude\" is correct', () => {",
													"    pm.expect(responseJson.data[0].longitude).equal(52.052339);",
													"});",
													"",
													"pm.test('\"postal_code\" is correct', () => {",
													"    pm.expect(responseJson.data[0].postal_code).equal('5154 NS');",
													"});",
													"",
													"pm.test('\"c_houseNr\" is correct', () => {",
													"    pm.expect(responseJson.data[0].c_houseNr).equal('16');",
													"});",
													"",
													"pm.test('\"email\" is correct', () => {",
													"    pm.expect(responseJson.data[0].email).equal('annemarie.niemeijer@etos.nl');",
													"});",
													"",
													"pm.test('\"phone\" is correct', () => {",
													"    pm.expect(responseJson.data[0].phone).equal('030-2463115');",
													"});",
													"",
													"pm.test('\"c_storeType\" is correct', () => {",
													"    pm.expect(responseJson.data[0].c_storeType).equal('ETOS_FRANCHISE_STORE');",
													"});",
													"",
													"pm.test('\"id\" correct', () => {",
													"    pm.expect(responseJson.data[1].id).equal('5000');",
													"});",
													"",
													"pm.test('\"name\" is correct', () => {",
													"    pm.expect(responseJson.data[1].name).equal('Etos Test street Qcity');",
													"});",
													"",
													"pm.test('\"postal_code\" is correct', () => {",
													"    pm.expect(responseJson.data[1].postal_code).equal('5153 NS');",
													"});",
													"",
													"pm.test('\"c_houseNr\" is correct', () => {",
													"    pm.expect(responseJson.data[1].c_houseNr).equal('11');",
													"});",
													"",
													"pm.test('\"phone\" is correct', () => {",
													"    pm.expect(responseJson.data[1].phone).equal('+31648593852');",
													"});",
													"",
													"pm.test('\"id\" correct', () => {",
													"    pm.expect(responseJson.data[2].id).equal('6233');",
													"});",
													"",
													"pm.test('\"name\" is correct', () => {",
													"    pm.expect(responseJson.data[2].name).equal('Etos Prins Willem Alexander P Vaals');",
													"});",
													"",
													"pm.test('\"latitude\" is correct', () => {",
													"    pm.expect(responseJson.data[2].latitude).equal(50);",
													"});",
													"",
													"pm.test('\"longitude\" is correct', () => {",
													"    pm.expect(responseJson.data[2].longitude).equal(6);",
													"});",
													"",
													"pm.test('\"postal_code\" is correct', () => {",
													"    pm.expect(responseJson.data[2].postal_code).equal('6291 GZ');",
													"});",
													"",
													"pm.test('\"c_houseNr\" is correct', () => {",
													"    pm.expect(responseJson.data[2].c_houseNr).equal('7');",
													"});",
													"",
													"pm.test('\"phone\" is correct', () => {",
													"    pm.expect(responseJson.data[2].phone).equal('043-3062348');",
													"});",
													"",
													"pm.test('\"c_storeType\" is correct', () => {",
													"    pm.expect(responseJson.data[2].c_storeType).equal('ETOS_FRANCHISE_STORE');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-dw-client-id",
												"value": "{{CLIENT_ID}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/stores?latitude={{STORE_LATITUDE}}&longitude={{STORE_LONGITUDE}}&country_code={{COUNTRY_CODE}}&postal_code={{POSTAL_CODE}}&distance_unit={{DISTANCE_UNIT}}&max_distance={{MAX_DISTANCE}}&start={{START}}&count={{COUNT}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"s",
												"Sites-{{SITE}}-Site",
												"dw",
												"shop",
												"{{OCAPI_VERSION}}",
												"stores"
											],
											"query": [
												{
													"key": "latitude",
													"value": "{{STORE_LATITUDE}}"
												},
												{
													"key": "longitude",
													"value": "{{STORE_LONGITUDE}}"
												},
												{
													"key": "country_code",
													"value": "{{COUNTRY_CODE}}"
												},
												{
													"key": "postal_code",
													"value": "{{POSTAL_CODE}}"
												},
												{
													"key": "distance_unit",
													"value": "{{DISTANCE_UNIT}}"
												},
												{
													"key": "max_distance",
													"value": "{{MAX_DISTANCE}}"
												},
												{
													"key": "start",
													"value": "{{START}}"
												},
												{
													"key": "count",
													"value": "{{COUNT}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "CONTENTS",
			"item": [
				{
					"name": "GET_CONTENT",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "default"
							},
							{
								"key": "Origin",
								"value": "{{REQ_ORIGIN}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/content/{{CONTENT_ID_1}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"content",
								"{{CONTENT_ID_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_CONTENTS",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "default"
							},
							{
								"key": "Origin",
								"value": "{{REQ_ORIGIN}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/content/({{CONTENT_ID_1}},{{CONTENT_ID_2}},{{CONTENT_ID_3}})",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"content",
								"({{CONTENT_ID_1}},{{CONTENT_ID_2}},{{CONTENT_ID_3}})"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SEARCH_SUGGESTION",
			"item": [
				{
					"name": "GET_SEARCH_SUGGESTION",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "{{REQ_ORIGIN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/search_suggestion?q={{SEARCH_SUGGESTION_QUERY}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"search_suggestion"
							],
							"query": [
								{
									"key": "q",
									"value": "{{SEARCH_SUGGESTION_QUERY}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SFCC_CONTROLLERS",
			"item": [
				{
					"name": "CSRF-Generate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {\r",
									"    const res = pm.response.json();\r",
									"    const csrf_token = res.csrf && res.csrf.token\r",
									"    pm.environment.set('CSRF_TOKEN', csrf_token);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "Etos2020",
									"type": "string"
								},
								{
									"key": "username",
									"value": "Storefront",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/CSRF-Generate",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"on",
								"demandware.store",
								"Sites-{{SITE}}-Site",
								"{{LOCALE}}",
								"CSRF-Generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "ConsentTracking-SetSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {\r",
									"    const res = pm.response.json();\r",
									"    console.log(res)\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "{{REQ_ORIGIN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/on/demandware.store//Sites-{{SITE}}-Site/{{LOCALE}}/ConsentTracking-SetSession?consent=true",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"on",
								"demandware.store",
								"",
								"Sites-{{SITE}}-Site",
								"{{LOCALE}}",
								"ConsentTracking-SetSession"
							],
							"query": [
								{
									"key": "consent",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BackInStock-Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {\r",
									"    const res = pm.response.json();\r",
									"    console.log(res)\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "Etos2020",
									"type": "string"
								},
								{
									"key": "username",
									"value": "Storefront",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "{{CUSTOMER_EMAIL}}",
									"type": "text"
								},
								{
									"key": "productId",
									"value": "{{PRODUCT_ID}}",
									"type": "text"
								},
								{
									"key": "csrf_token",
									"value": "{{CSRF_TOKEN}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/BackInStock-Register",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"on",
								"demandware.store",
								"Sites-{{SITE}}-Site",
								"{{LOCALE}}",
								"BackInStock-Register"
							]
						}
					},
					"response": []
				},
				{
					"name": "ContentSlot-GetById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {\r",
									"    const res = pm.response.json();\r",
									"    console.log(res)\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/ContentSlot-GetById?contentSlotId=slotName",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"on",
								"demandware.store",
								"Sites-{{SITE}}-Site",
								"{{LOCALE}}",
								"ContentSlot-GetById"
							],
							"query": [
								{
									"key": "contentSlotId",
									"value": "slotName"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PreviouslyBought-GetAll",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{STOREFRONT_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{STOREFRONT_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/PreviouslyBought-GetAll?start=0&count=18",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"on",
								"demandware.store",
								"Sites-{{SITE}}-Site",
								"{{LOCALE}}",
								"PreviouslyBought-GetAll"
							],
							"query": [
								{
									"key": "start",
									"value": "0"
								},
								{
									"key": "count",
									"value": "18"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Wishlist-GetListJson",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{STOREFRONT_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{STOREFRONT_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/Wishlist-GetListJson?mobileApp=true",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"on",
								"demandware.store",
								"Sites-{{SITE}}-Site",
								"{{LOCALE}}",
								"Wishlist-GetListJson"
							],
							"query": [
								{
									"key": "mobileApp",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Wishlist-GetListIdsJson",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{STOREFRONT_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{STOREFRONT_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/Wishlist-GetListIdsJson",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"on",
								"demandware.store",
								"Sites-{{SITE}}-Site",
								"{{LOCALE}}",
								"Wishlist-GetListIdsJson"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wishlist-AddProduct",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{STOREFRONT_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{STOREFRONT_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "pid",
									"value": "{{PRODUCT_ID}}",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/Wishlist-AddProduct?mobileApp=true",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"on",
								"demandware.store",
								"Sites-{{SITE}}-Site",
								"{{LOCALE}}",
								"Wishlist-AddProduct"
							],
							"query": [
								{
									"key": "mobileApp",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Wishlist-RemoveProduct",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{STOREFRONT_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{STOREFRONT_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "pid",
									"value": "{{PRODUCT_ID}}",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{HOST}}/on/demandware.store/Sites-{{SITE}}-Site/{{LOCALE}}/Wishlist-RemoveProduct?mobileApp=true",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"on",
								"demandware.store",
								"Sites-{{SITE}}-Site",
								"{{LOCALE}}",
								"Wishlist-RemoveProduct"
							],
							"query": [
								{
									"key": "mobileApp",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "STORES",
			"item": [
				{
					"name": "GET_STORE",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/stores/{{STORE_ID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"stores",
								"{{STORE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_MULPTIPLE_STORES",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/stores/({{STORE_ID1}},{{STORE_ID2}},{{STORE_ID3}})",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"stores",
								"({{STORE_ID1}},{{STORE_ID2}},{{STORE_ID3}})"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_STORES",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-dw-client-id",
								"value": "{{CLIENT_ID}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{HOST}}/s/Sites-{{SITE}}-Site/dw/shop/{{OCAPI_VERSION}}/stores?latitude={{STORE_LATITUDE}}&longitude={{STORE_LONGITUDE}}&country_code={{COUNTRY_CODE}}&postal_code={{POSTAL_CODE}}&distance_unit={{DISTANCE_UNIT}}&max_distance={{MAX_DISTANCE}}&start={{START}}&count={{COUNT}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"s",
								"Sites-{{SITE}}-Site",
								"dw",
								"shop",
								"{{OCAPI_VERSION}}",
								"stores"
							],
							"query": [
								{
									"key": "latitude",
									"value": "{{STORE_LATITUDE}}"
								},
								{
									"key": "longitude",
									"value": "{{STORE_LONGITUDE}}"
								},
								{
									"key": "country_code",
									"value": "{{COUNTRY_CODE}}"
								},
								{
									"key": "postal_code",
									"value": "{{POSTAL_CODE}}"
								},
								{
									"key": "distance_unit",
									"value": "{{DISTANCE_UNIT}}"
								},
								{
									"key": "max_distance",
									"value": "{{MAX_DISTANCE}}"
								},
								{
									"key": "start",
									"value": "{{START}}"
								},
								{
									"key": "count",
									"value": "{{COUNT}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}